<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="uqdecd_z_zs" title="UQDECD (vector) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="sve"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="UQDECD"/>
    <docvar key="sve-esize" value="esize-doubleword"/>
  </docvars>
  <heading>UQDECD (vector)</heading>
  <desc>
    <brief>
      <para>Unsigned saturating decrement vector by multiple of 64-bit predicate constraint element count</para>
    </brief>
    <authored>
      <para>Determines the number of active 64-bit
elements implied by the named predicate constraint, multiplies
that by an immediate in the range 1 to 16 inclusive, and
then uses the result to decrement all destination vector elements.
The
  results are
  saturated to the
  64-bit <br/>
  unsigned integer range.</para>
      <para>The named predicate constraint limits the number of active
elements in a single predicate to:</para>
      <list type="unordered">
        <listitem>
          <content>A fixed number (VL1 to VL256)</content>
        </listitem>
        <listitem>
          <content>The largest power of two (POW2)</content>
        </listitem>
        <listitem>
          <content>The largest multiple of three or four (MUL3 or MUL4)</content>
        </listitem>
        <listitem>
          <content>All available, implicitly a multiple of two (ALL).</content>
        </listitem>
      </list>
      <para>Unspecified or out of range constraint encodings generate an
empty predicate or zero element count rather than Undefined
Instruction exception.</para>
    </authored>
    <predicated>False</predicated>
    <takes_movprfx>True</takes_movprfx>
  </desc>
  <operationalnotes>
    <operationalnote>
      <operationalnote_content>
        <para>This instruction might be immediately preceded in program order by a <instruction>MOVPRFX</instruction> instruction. The <instruction>MOVPRFX</instruction> must conform to all of the following requirements, otherwise the behavior of the <instruction>MOVPRFX</instruction> and this instruction is <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word>:</para>
        <list type="unordered">
          <listitem>
            <content>The <instruction>MOVPRFX</instruction> must be unpredicated.</content>
          </listitem>
          <listitem>
            <content>The <instruction>MOVPRFX</instruction> must specify the same destination register as this instruction.</content>
          </listitem>
          <listitem>
            <content>The destination register must not refer to architectural register state referenced by any other source operand register of this instruction.</content>
          </listitem>
        </list>
      </operationalnote_content>
    </operationalnote>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="SVE" oneof="1" id="iclass_sve" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="UQDECD"/>
        <docvar key="sve-esize" value="esize-doubleword"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SVE || FEAT_SME" name="FEAT_SVE || FEAT_SME"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_countelt.sve_int_countvlv0.uqdecd_z_zs_" tworows="1">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="19" width="4" name="imm4" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="15" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="13" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="11" name="D" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="10" name="U" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="pattern" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Zdn" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="uqdecd_z_zs_" oneofinclass="1" oneof="1" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="UQDECD"/>
          <docvar key="instr-class" value="sve"/>
          <docvar key="sve-esize" value="esize-doubleword"/>
        </docvars>
        <asmtemplate><text>UQDECD  </text><a hover="Is the name of the source and destination scalable vector register, encoded in the &quot;Zdn&quot; field." link="Zdn__2">&lt;Zdn&gt;</a><text>.D{, </text><a hover="Is the optional pattern specifier, defaulting to ALL, " link="pattern">&lt;pattern&gt;</a><text>{, MUL #</text><a hover="Is the immediate multiplier, in the range 1 to 16, defaulting to 1, encoded in the &quot;imm4&quot; field." link="imm__45">&lt;imm&gt;</a><text>}}</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_countelt.sve_int_countvlv0.uqdecd_z_zs_" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE) &amp;&amp; !IsFeatureImplemented(FEAT_SME) then
    <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 64;
constant integer dn = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zdn);
constant bits(5) pat = pattern;
constant integer imm = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(imm4) + 1;

constant boolean unsigned = TRUE;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="uqdecd_z_zs_" symboldefcount="1">
      <symbol link="Zdn__2">&lt;Zdn&gt;</symbol>
      <account encodedin="Zdn">
        <intro>
          <para>Is the name of the source and destination scalable vector register, encoded in the "Zdn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="uqdecd_z_zs_" symboldefcount="1">
      <symbol link="pattern">&lt;pattern&gt;</symbol>
      <definition encodedin="pattern">
        <intro>Is the optional pattern specifier, defaulting to ALL, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">pattern</entry>
                <entry class="symbol">&lt;pattern&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">00000</entry>
                <entry class="symbol">POW2</entry>
              </row>
              <row>
                <entry class="bitfield">00001</entry>
                <entry class="symbol">VL1</entry>
              </row>
              <row>
                <entry class="bitfield">00010</entry>
                <entry class="symbol">VL2</entry>
              </row>
              <row>
                <entry class="bitfield">00011</entry>
                <entry class="symbol">VL3</entry>
              </row>
              <row>
                <entry class="bitfield">00100</entry>
                <entry class="symbol">VL4</entry>
              </row>
              <row>
                <entry class="bitfield">00101</entry>
                <entry class="symbol">VL5</entry>
              </row>
              <row>
                <entry class="bitfield">00110</entry>
                <entry class="symbol">VL6</entry>
              </row>
              <row>
                <entry class="bitfield">00111</entry>
                <entry class="symbol">VL7</entry>
              </row>
              <row>
                <entry class="bitfield">01000</entry>
                <entry class="symbol">VL8</entry>
              </row>
              <row>
                <entry class="bitfield">01001</entry>
                <entry class="symbol">VL16</entry>
              </row>
              <row>
                <entry class="bitfield">01010</entry>
                <entry class="symbol">VL32</entry>
              </row>
              <row>
                <entry class="bitfield">01011</entry>
                <entry class="symbol">VL64</entry>
              </row>
              <row>
                <entry class="bitfield">01100</entry>
                <entry class="symbol">VL128</entry>
              </row>
              <row>
                <entry class="bitfield">01101</entry>
                <entry class="symbol">VL256</entry>
              </row>
              <row>
                <entry class="bitfield">0111x</entry>
                <entry class="symbol">#uimm5</entry>
              </row>
              <row>
                <entry class="bitfield">1xx00</entry>
                <entry class="symbol">#uimm5</entry>
              </row>
              <row>
                <entry class="bitfield">1x0x1</entry>
                <entry class="symbol">#uimm5</entry>
              </row>
              <row>
                <entry class="bitfield">1x010</entry>
                <entry class="symbol">#uimm5</entry>
              </row>
              <row>
                <entry class="bitfield">101x1</entry>
                <entry class="symbol">#uimm5</entry>
              </row>
              <row>
                <entry class="bitfield">10110</entry>
                <entry class="symbol">#uimm5</entry>
              </row>
              <row>
                <entry class="bitfield">11101</entry>
                <entry class="symbol">MUL4</entry>
              </row>
              <row>
                <entry class="bitfield">11110</entry>
                <entry class="symbol">MUL3</entry>
              </row>
              <row>
                <entry class="bitfield">11111</entry>
                <entry class="symbol">ALL</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="uqdecd_z_zs_" symboldefcount="1">
      <symbol link="imm__45">&lt;imm&gt;</symbol>
      <account encodedin="imm4">
        <intro>
          <para>Is the immediate multiplier, in the range 1 to 16, defaulting to 1, encoded in the "imm4" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sve.sve_countelt.sve_int_countvlv0.uqdecd_z_zs_" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckSVEEnabled()">CheckSVEEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer elements = VL DIV esize;
constant integer count = <a link="impl-aarch64.DecodePredCount.2" file="shared_pseudocode.xml" hover="function: integer DecodePredCount(bits(5) bitpattern, integer esize)">DecodePredCount</a>(pat, esize);
constant bits(VL) operand1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[dn, VL];
bits(VL) result;

for e = 0 to elements-1
    constant integer element1 = <a link="impl-shared.Int.2" file="shared_pseudocode.xml" hover="function: integer Int(bits(N) x, boolean unsigned)">Int</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, e, esize], unsigned);
    (<a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, e, esize], -) = <a link="impl-shared.SatQ.3" file="shared_pseudocode.xml" hover="function: (bits(N), boolean) SatQ(integer i, integer N, boolean unsigned)">SatQ</a>(element1 - (count * imm), esize, unsigned);

<a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[dn, VL] = result;</pstext></ps>
  </ps_section>
</instructionsection>
