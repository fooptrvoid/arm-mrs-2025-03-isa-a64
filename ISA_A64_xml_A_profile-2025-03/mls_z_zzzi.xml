<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="mls_z_zzzi" title="MLS (indexed) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="sve2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="MLS"/>
  </docvars>
  <heading>MLS (indexed)</heading>
  <desc>
    <brief>
      <para>Multiply-subtract from accumulator (indexed)</para>
    </brief>
    <authored>
      <para>Multiply all integer elements within each 128-bit
segment of the first source vector by the specified element in
the corresponding second source vector segment.  The products are then destructively subtracted from the corresponding
elements of the addend and destination vector.</para>
      <para>The elements within the second source vector are specified using
an immediate index which selects the same element position within
each 128-bit vector segment.  The index range is from 0 to
one less than the number of elements per 128-bit segment.
This instruction is unpredicated.</para>
    </authored>
    <predicated>False</predicated>
    <uses_dit condition="FEAT_SVE2 is implemented or FEAT_SME is implemented">True</uses_dit>
    <takes_movprfx>True</takes_movprfx>
  </desc>
  <operationalnotes>
    <operationalnote>
      <operationalnote_content>
        <para>If PSTATE.DIT is 1:</para>
        <list type="unordered">
          <listitem>
            <content>The execution time of this instruction is independent of:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its registers.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
          <listitem>
            <content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its registers.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
        </list>
        <para>This instruction might be immediately preceded in program order by a <instruction>MOVPRFX</instruction> instruction. The <instruction>MOVPRFX</instruction> must conform to all of the following requirements, otherwise the behavior of the <instruction>MOVPRFX</instruction> and this instruction is <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word>:</para>
        <list type="unordered">
          <listitem>
            <content>The <instruction>MOVPRFX</instruction> must be unpredicated.</content>
          </listitem>
          <listitem>
            <content>The <instruction>MOVPRFX</instruction> must specify the same destination register as this instruction.</content>
          </listitem>
          <listitem>
            <content>The destination register must not refer to architectural register state referenced by any other source operand register of this instruction.</content>
          </listitem>
        </list>
      </operationalnote_content>
    </operationalnote>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <classesintro count="3">
      <txt>It has encodings from 3 classes:</txt>
      <a href="#iclass_16_bit">16-bit</a>
      <txt>, </txt>
      <a href="#iclass_32_bit">32-bit</a>
      <txt> and </txt>
      <a href="#iclass_64_bit">64-bit</a>
    </classesintro>
    <iclass name="16-bit" oneof="3" id="iclass_16_bit" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="as-structure-org" value="of-halfwords"/>
        <docvar key="instr-class" value="sve2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="MLS"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SVE2 || FEAT_SME" name="FEAT_SVE2 || FEAT_SME"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_intx_by_indexed_elem.sve_intx_mla_by_indexed_elem.mls_z_zzzi_h" tworows="1">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="22" width="1" name="i3h" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="2" name="i3l" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="18" width="3" name="Zm" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="15" width="5" settings="5">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="10" name="S" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Zda" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="mls_z_zzzi_h" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="MLS"/>
          <docvar key="instr-class" value="sve2"/>
          <docvar key="as-structure-org" value="of-halfwords"/>
        </docvars>
        <asmtemplate><text>MLS  </text><a hover="Is the name of the third source and destination scalable vector register, encoded in the &quot;Zda&quot; field." link="Zda">&lt;Zda&gt;</a><text>.H, </text><a hover="Is the name of the first source scalable vector register, encoded in the &quot;Zn&quot; field." link="Zn__2">&lt;Zn&gt;</a><text>.H, </text><a hover="For the &quot;16-bit&quot; and &quot;32-bit&quot; variants: is the name of the second source scalable vector register Z0-Z7, encoded in the &quot;Zm&quot; field." link="Zm__4">&lt;Zm&gt;</a><text>.H[</text><a hover="For the &quot;16-bit&quot; variant: is the element index, in the range 0 to 7, encoded in the &quot;i3h:i3l&quot; fields." link="imm__78">&lt;imm&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_intx_by_indexed_elem.sve_intx_mla_by_indexed_elem.mls_z_zzzi_h" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE2) &amp;&amp; !IsFeatureImplemented(FEAT_SME) then
    <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 16;
constant integer index = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i3h:i3l);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer da = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zda);</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="32-bit" oneof="3" id="iclass_32_bit" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="as-structure-org" value="of-words"/>
        <docvar key="instr-class" value="sve2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="MLS"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SVE2 || FEAT_SME" name="FEAT_SVE2 || FEAT_SME"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_intx_by_indexed_elem.sve_intx_mla_by_indexed_elem.mls_z_zzzi_s" tworows="1">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="2" name="i2" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="18" width="3" name="Zm" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="15" width="5" settings="5">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="10" name="S" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Zda" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="mls_z_zzzi_s" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="MLS"/>
          <docvar key="instr-class" value="sve2"/>
          <docvar key="as-structure-org" value="of-words"/>
        </docvars>
        <asmtemplate><text>MLS  </text><a hover="Is the name of the third source and destination scalable vector register, encoded in the &quot;Zda&quot; field." link="Zda">&lt;Zda&gt;</a><text>.S, </text><a hover="Is the name of the first source scalable vector register, encoded in the &quot;Zn&quot; field." link="Zn__2">&lt;Zn&gt;</a><text>.S, </text><a hover="For the &quot;16-bit&quot; and &quot;32-bit&quot; variants: is the name of the second source scalable vector register Z0-Z7, encoded in the &quot;Zm&quot; field." link="Zm__4">&lt;Zm&gt;</a><text>.S[</text><a hover="For the &quot;32-bit&quot; variant: is the element index, in the range 0 to 3, encoded in the &quot;i2&quot; field." link="imm__41">&lt;imm&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_intx_by_indexed_elem.sve_intx_mla_by_indexed_elem.mls_z_zzzi_s" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE2) &amp;&amp; !IsFeatureImplemented(FEAT_SME) then
    <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 32;
constant integer index = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i2);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer da = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zda);</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="64-bit" oneof="3" id="iclass_64_bit" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="as-structure-org" value="of-doublewords"/>
        <docvar key="instr-class" value="sve2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="MLS"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SVE2 || FEAT_SME" name="FEAT_SVE2 || FEAT_SME"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_intx_by_indexed_elem.sve_intx_mla_by_indexed_elem.mls_z_zzzi_d" tworows="1">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="1" name="i1" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="19" width="4" name="Zm" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="15" width="5" settings="5">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="10" name="S" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Zda" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="mls_z_zzzi_d" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="MLS"/>
          <docvar key="instr-class" value="sve2"/>
          <docvar key="as-structure-org" value="of-doublewords"/>
        </docvars>
        <asmtemplate><text>MLS  </text><a hover="Is the name of the third source and destination scalable vector register, encoded in the &quot;Zda&quot; field." link="Zda">&lt;Zda&gt;</a><text>.D, </text><a hover="Is the name of the first source scalable vector register, encoded in the &quot;Zn&quot; field." link="Zn__2">&lt;Zn&gt;</a><text>.D, </text><a hover="For the &quot;64-bit&quot; variant: is the name of the second source scalable vector register Z0-Z15, encoded in the &quot;Zm&quot; field." link="Zm__2">&lt;Zm&gt;</a><text>.D[</text><a hover="For the &quot;64-bit&quot; variant: is the element index, in the range 0 to 1, encoded in the &quot;i1&quot; field." link="imm__42">&lt;imm&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_intx_by_indexed_elem.sve_intx_mla_by_indexed_elem.mls_z_zzzi_d" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE2) &amp;&amp; !IsFeatureImplemented(FEAT_SME) then
    <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 64;
constant integer index = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i1);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer da = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zda);</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="mls_z_zzzi_h, mls_z_zzzi_s, mls_z_zzzi_d" symboldefcount="1">
      <symbol link="Zda">&lt;Zda&gt;</symbol>
      <account encodedin="Zda">
        <intro>
          <para>Is the name of the third source and destination scalable vector register, encoded in the "Zda" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="mls_z_zzzi_h, mls_z_zzzi_s, mls_z_zzzi_d" symboldefcount="1">
      <symbol link="Zn__2">&lt;Zn&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the first source scalable vector register, encoded in the "Zn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="mls_z_zzzi_h, mls_z_zzzi_s" symboldefcount="1">
      <symbol link="Zm__4">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>For the "16-bit" and "32-bit" variants: is the name of the second source scalable vector register Z0-Z7, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="mls_z_zzzi_d" symboldefcount="2">
      <symbol link="Zm__2">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>For the "64-bit" variant: is the name of the second source scalable vector register Z0-Z15, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="mls_z_zzzi_h" symboldefcount="1">
      <symbol link="imm__78">&lt;imm&gt;</symbol>
      <account encodedin="i3h:i3l">
        <intro>
          <para>For the "16-bit" variant: is the element index, in the range 0 to 7, encoded in the "i3h:i3l" fields.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="mls_z_zzzi_s" symboldefcount="2">
      <symbol link="imm__41">&lt;imm&gt;</symbol>
      <account encodedin="i2">
        <intro>
          <para>For the "32-bit" variant: is the element index, in the range 0 to 3, encoded in the "i2" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="mls_z_zzzi_d" symboldefcount="3">
      <symbol link="imm__42">&lt;imm&gt;</symbol>
      <account encodedin="i1">
        <intro>
          <para>For the "64-bit" variant: is the element index, in the range 0 to 1, encoded in the "i1" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sve.sve_intx_by_indexed_elem.sve_intx_mla_by_indexed_elem.mls_z_zzzi_h" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckSVEEnabled()">CheckSVEEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer elements = VL DIV esize;
constant integer eltspersegment = 128 DIV esize;
constant bits(VL) operand1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[n, VL];
constant bits(VL) operand2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m, VL];
bits(VL) result = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[da, VL];

for e = 0 to elements-1
    constant integer segmentbase = e - (e MOD eltspersegment);
    constant integer s = segmentbase + index;
    constant integer element1 = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, e, esize]);
    constant integer element2 = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, s, esize]);
    constant bits(esize) product = (element1 * element2)&lt;esize-1:0&gt;;
    <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, e, esize] = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[result, e, esize] - product;

<a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[da, VL] = result;</pstext></ps>
  </ps_section>
</instructionsection>
