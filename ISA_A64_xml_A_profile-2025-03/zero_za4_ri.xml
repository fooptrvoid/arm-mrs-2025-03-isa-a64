<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="zero_za4_ri" title="ZERO (quad-vector) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="mortlach2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="ZERO"/>
  </docvars>
  <heading>ZERO (quad-vector)</heading>
  <desc>
    <brief>
      <para>Zero ZA quad-vector groups</para>
    </brief>
    <authored>
      <para>This instruction zeroes one, two, or four ZA quad-vector groups.</para>
      <para>The quad-vector
group within all of, each half of,
or each quarter of the ZA array is selected by the sum
of the vector select register and offset range, modulo all, half, or quarter the number of ZA array vectors.</para>
      <para>The <syntax>vector group</syntax> symbol, <syntax>VGx2</syntax> or <syntax>VGx4</syntax>, indicates that
the ZA operand consists of two or four ZA quad-vector
groups
respectively. </para>
    </authored>
    <uses_dit condition="FEAT_SVE2 is implemented or FEAT_SME is implemented">True</uses_dit>
    <sm_policy>SM_1_only</sm_policy>
  </desc>
  <operationalnotes>
    <operationalnote>
      <operationalnote_content>
        <para>If PSTATE.DIT is 1:</para>
        <list type="unordered">
          <listitem>
            <content>The execution time of this instruction is independent of:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its registers.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
          <listitem>
            <content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its registers.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
        </list>
      </operationalnote_content>
    </operationalnote>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <classesintro count="3">
      <txt>It has encodings from 3 classes:</txt>
      <a href="#iclass_one_za_quad_vector">One ZA quad-vector</a>
      <txt>, </txt>
      <a href="#iclass_two_za_quad_vectors">Two ZA quad-vectors</a>
      <txt> and </txt>
      <a href="#iclass_four_za_quad_vectors">Four ZA quad-vectors</a>
    </classesintro>
    <iclass name="One ZA quad-vector" oneof="3" id="iclass_one_za_quad_vector" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="ZERO"/>
        <docvar key="sme-multireg" value="sme-vgx1-quad"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2p1" name="ARMv9.4"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multizero.mortlach_multi_zero.zero_za4_ri_1" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="7" settings="7">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="17" width="3" name="opc" usename="1" settings="3" psbits="xxx">
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="10" settings="10">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="2" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="1" width="2" name="off2" usename="1">
          <c colspan="2"/>
        </box>
      </regdiagram>
      <encoding name="zero_za4_ri_1" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="ZERO"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="sme-multireg" value="sme-vgx1-quad"/>
        </docvars>
        <asmtemplate><text>ZERO  ZA.D[</text><a hover="Is the 32-bit name of the vector select register W8-W11, encoded in the &quot;Rv&quot; field." link="Wv">&lt;Wv&gt;</a><text>, </text><a hover="For the &quot;One ZA quad-vector&quot; variant: is the first vector select offset, encoded as &quot;off2&quot; field times 4." link="offs1__3">&lt;offs1&gt;</a><text>:</text><a hover="For the &quot;One ZA quad-vector&quot; variant: is the fourth vector select offset, encoded as &quot;off2&quot; field times 4 plus 3." link="offs4">&lt;offs4&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multizero.mortlach_multi_zero.zero_za4_ri_1" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2p1) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(off2:'00');
constant integer ngrp = 1;
constant integer nvec = 4;</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Two ZA quad-vectors" oneof="3" id="iclass_two_za_quad_vectors" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="ZERO"/>
        <docvar key="sme-multireg" value="sme-vgx2-quad"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2p1" name="ARMv9.4"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multizero.mortlach_multi_zero.zero_za4_ri_2" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="7" settings="7">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="17" width="3" name="opc" usename="1" settings="3" psbits="xxx">
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="10" settings="10">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="2" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="0" width="1" name="o1" usename="1">
          <c colspan="1"/>
        </box>
      </regdiagram>
      <encoding name="zero_za4_ri_2" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="ZERO"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="sme-multireg" value="sme-vgx2-quad"/>
        </docvars>
        <asmtemplate><text>ZERO  ZA.D[</text><a hover="Is the 32-bit name of the vector select register W8-W11, encoded in the &quot;Rv&quot; field." link="Wv">&lt;Wv&gt;</a><text>, </text><a hover="For the &quot;Four ZA quad-vectors&quot; and &quot;Two ZA quad-vectors&quot; variants: is the first vector select offset, encoded as &quot;o1&quot; field times 4." link="offs1__4">&lt;offs1&gt;</a><text>:</text><a hover="For the &quot;Four ZA quad-vectors&quot; and &quot;Two ZA quad-vectors&quot; variants: is the fourth vector select offset, encoded as &quot;o1&quot; field times 4 plus 3." link="offs4__2">&lt;offs4&gt;</a><text>, VGx2]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multizero.mortlach_multi_zero.zero_za4_ri_2" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2p1) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(o1:'00');
constant integer ngrp = 2;
constant integer nvec = 4;</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Four ZA quad-vectors" oneof="3" id="iclass_four_za_quad_vectors" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="ZERO"/>
        <docvar key="sme-multireg" value="sme-vgx4-quad"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2p1" name="ARMv9.4"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multizero.mortlach_multi_zero.zero_za4_ri_4" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="7" settings="7">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="17" width="3" name="opc" usename="1" settings="3" psbits="xxx">
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="10" settings="10">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="2" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="0" width="1" name="o1" usename="1">
          <c colspan="1"/>
        </box>
      </regdiagram>
      <encoding name="zero_za4_ri_4" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="ZERO"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="sme-multireg" value="sme-vgx4-quad"/>
        </docvars>
        <asmtemplate><text>ZERO  ZA.D[</text><a hover="Is the 32-bit name of the vector select register W8-W11, encoded in the &quot;Rv&quot; field." link="Wv">&lt;Wv&gt;</a><text>, </text><a hover="For the &quot;Four ZA quad-vectors&quot; and &quot;Two ZA quad-vectors&quot; variants: is the first vector select offset, encoded as &quot;o1&quot; field times 4." link="offs1__4">&lt;offs1&gt;</a><text>:</text><a hover="For the &quot;Four ZA quad-vectors&quot; and &quot;Two ZA quad-vectors&quot; variants: is the fourth vector select offset, encoded as &quot;o1&quot; field times 4 plus 3." link="offs4__2">&lt;offs4&gt;</a><text>, VGx4]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multizero.mortlach_multi_zero.zero_za4_ri_4" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2p1) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(o1:'00');
constant integer ngrp = 4;
constant integer nvec = 4;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="zero_za4_ri_1, zero_za4_ri_2, zero_za4_ri_4" symboldefcount="1">
      <symbol link="Wv">&lt;Wv&gt;</symbol>
      <account encodedin="Rv">
        <intro>
          <para>Is the 32-bit name of the vector select register W8-W11, encoded in the "Rv" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="zero_za4_ri_1" symboldefcount="1">
      <symbol link="offs1__3">&lt;offs1&gt;</symbol>
      <account encodedin="off2">
        <intro>
          <para>For the "One ZA quad-vector" variant: is the first vector select offset, encoded as "off2" field times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="zero_za4_ri_2, zero_za4_ri_4" symboldefcount="2">
      <symbol link="offs1__4">&lt;offs1&gt;</symbol>
      <account encodedin="o1">
        <intro>
          <para>For the "Four ZA quad-vectors" and "Two ZA quad-vectors" variants: is the first vector select offset, encoded as "o1" field times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="zero_za4_ri_1" symboldefcount="1">
      <symbol link="offs4">&lt;offs4&gt;</symbol>
      <account encodedin="off2">
        <intro>
          <para>For the "One ZA quad-vector" variant: is the fourth vector select offset, encoded as "off2" field times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="zero_za4_ri_2, zero_za4_ri_4" symboldefcount="2">
      <symbol link="offs4__2">&lt;offs4&gt;</symbol>
      <account encodedin="o1">
        <intro>
          <para>For the "Four ZA quad-vectors" and "Two ZA quad-vectors" variants: is the fourth vector select offset, encoded as "o1" field times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sme.mortlach_multizero.mortlach_multi_zero.zero_za4_ri_1" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckStreamingSVEAndZAEnabled.0" file="shared_pseudocode.xml" hover="function: CheckStreamingSVEAndZAEnabled()">CheckStreamingSVEAndZAEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer vectors = VL DIV 8;
constant integer vstride = vectors DIV ngrp;
constant bits(32) vbase = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[v, 32];
integer vec = (<a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(vbase) + offset) MOD vstride;
vec = vec - (vec MOD nvec);
for r = 0 to ngrp-1
    for i = 0 to nvec-1
        <a link="impl-aarch64.ZAvector.write.2" file="shared_pseudocode.xml" hover="accessor: ZAvector[integer index, integer width] = bits(width) value">ZAvector</a>[vec + i, VL] = <a link="impl-shared.Zeros.1" file="shared_pseudocode.xml" hover="function: bits(N) Zeros(integer N)">Zeros</a>(VL);
    vec = vec + vstride;</pstext></ps>
  </ps_section>
</instructionsection>
