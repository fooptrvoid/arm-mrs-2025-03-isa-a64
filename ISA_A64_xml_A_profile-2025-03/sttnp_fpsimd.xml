<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="STTNP_fpsimd" title="STTNP (SIMD&amp;FP) -- A64" type="instruction">
  <docvars>
    <docvar key="address-form" value="signed-scaled-offset"/>
    <docvar key="address-form-reg-type" value="signed-scaled-offset-pair-quadwords"/>
    <docvar key="atomic-ops" value="STTNP-pair-quadwords"/>
    <docvar key="instr-class" value="fpsimd"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="STTNP"/>
    <docvar key="offset-type" value="off7s_s"/>
    <docvar key="reg-type" value="pair-quadwords"/>
  </docvars>
  <heading>STTNP (SIMD&amp;FP)</heading>
  <desc>
    <brief>
      <para>Store unprivileged pair of SIMD&amp;FP registers, with non-temporal hint</para>
    </brief>
    <authored>
      <para>This instruction stores a pair of SIMD&amp;FP registers to memory, issuing a hint to the
memory system that the access is non-temporal. The address used for the store is
calculated from an address from a base register value and an immediate offset.
For information about non-temporal pair instructions, see
<xref linkend="ARMARM_BABJADHH">Load/Store SIMD and Floating-point non-temporal pair</xref>.</para>
      <para>Depending on the settings in the <register_link id="AArch64-cpacr_el1.xml" state="AArch64">CPACR_EL1</register_link>,
  <register_link id="AArch64-cptr_el2.xml" state="AArch64">CPTR_EL2</register_link>, and <register_link id="AArch64-cptr_el3.xml" state="AArch64">CPTR_EL3</register_link> registers,
  and the current Security state and Exception level,
  an attempt to execute the instruction might be trapped.</para>
      <para>Explicit Memory  effects produced by the instruction behave as if the instruction was
  executed at EL0 if the <xref linkend="ARMARM_Effective_value">Effective value</xref> of
  PSTATE.UAO is 0 and either:</para>
      <list type="unordered">
        <listitem>
          <content>The instruction is executed at EL1.</content>
        </listitem>
        <listitem>
          <content>The instruction is executed at EL2 when the <xref linkend="ARMARM_Effective_value">Effective value</xref>
  of <register_link id="AArch64-hcr_el2.xml" state="AArch64">HCR_EL2</register_link>.{E2H, TGE} is {1, 1}.</content>
        </listitem>
      </list>
      <para>Otherwise, the Explicit Memory  effects operate with the restrictions determined by
  the Exception level at which the instruction is executed.</para>
    </authored>
  </desc>
  <operationalnotes>
    <operationalnote>
      <operationalnote_content>
        <para>If PSTATE.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.</para>
      </operationalnote_content>
    </operationalnote>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="Signed offset" oneof="1" id="iclass_signed_offset" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="address-form" value="signed-scaled-offset"/>
        <docvar key="address-form-reg-type" value="signed-scaled-offset-pair-quadwords"/>
        <docvar key="atomic-ops" value="STTNP-pair-quadwords"/>
        <docvar key="instr-class" value="fpsimd"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="STTNP"/>
        <docvar key="offset-type" value="off7s_s"/>
        <docvar key="reg-type" value="pair-quadwords"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_FP &amp;&amp; FEAT_LSUI" name="FEAT_FP &amp;&amp; FEAT_LSUI"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.ldst.ldstnapair_offs.STTNP_Q_ldstnapair_offs" tworows="1">
        <box hibit="31" width="2" name="opc" usename="1" settings="2" psbits="xx">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="29" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="27" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="26" name="VR" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="25" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="24" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="22" name="L" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="21" width="7" name="imm7" usename="1">
          <c colspan="7"/>
        </box>
        <box hibit="14" width="5" name="Rt2" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Rt" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="STTNP_Q_ldstnapair_offs" oneofinclass="1" oneof="1" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="STTNP"/>
          <docvar key="address-form" value="signed-scaled-offset"/>
          <docvar key="address-form-reg-type" value="signed-scaled-offset-pair-quadwords"/>
          <docvar key="atomic-ops" value="STTNP-pair-quadwords"/>
          <docvar key="instr-class" value="fpsimd"/>
          <docvar key="offset-type" value="off7s_s"/>
          <docvar key="reg-type" value="pair-quadwords"/>
        </docvars>
        <asmtemplate><text>STTNP  </text><a hover="Is the 128-bit name of the first SIMD&amp;amp;FP register to be transferred, encoded in the &quot;Rt&quot; field." link="Qt1">&lt;Qt1&gt;</a><text>, </text><a hover="Is the 128-bit name of the second SIMD&amp;amp;FP register to be transferred, encoded in the &quot;Rt2&quot; field." link="Qt2">&lt;Qt2&gt;</a><text>, [</text><a hover="Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the &quot;Rn&quot; field." link="XnSP_option">&lt;Xn|SP&gt;</a><text>{, #</text><a hover="For the &quot;128-bit&quot; variant: is the optional signed immediate byte offset, a multiple of 16 in the range -1024 to 1008, defaulting to 0 and encoded in the &quot;imm7&quot; field as &amp;lt;imm&amp;gt;/16." link="imm__6">&lt;imm&gt;</a><text>}]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.ldst.ldstnapair_offs.STTNP_Q_ldstnapair_offs" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_FP) || !IsFeatureImplemented(FEAT_LSUI) then
    <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer t = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rt);
constant integer t2 = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rt2);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
constant boolean nontemporal = TRUE;
constant integer datasize = 128;
constant bits(64) offset = <a link="impl-shared.LSL.2" file="shared_pseudocode.xml" hover="function: bits(N) LSL(bits(N) x, integer shift)">LSL</a>(<a link="impl-shared.SignExtend.2" file="shared_pseudocode.xml" hover="function: bits(N) SignExtend(bits(M) x, integer N)">SignExtend</a>(imm7, 64), 4);
constant boolean tagchecked = n != 31;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="STTNP_Q_ldstnapair_offs" symboldefcount="1">
      <symbol link="Qt1">&lt;Qt1&gt;</symbol>
      <account encodedin="Rt">
        <intro>
          <para>Is the 128-bit name of the first SIMD&amp;FP register to be transferred, encoded in the "Rt" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="STTNP_Q_ldstnapair_offs" symboldefcount="1">
      <symbol link="Qt2">&lt;Qt2&gt;</symbol>
      <account encodedin="Rt2">
        <intro>
          <para>Is the 128-bit name of the second SIMD&amp;FP register to be transferred, encoded in the "Rt2" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="STTNP_Q_ldstnapair_offs" symboldefcount="1">
      <symbol link="XnSP_option">&lt;Xn|SP&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="STTNP_Q_ldstnapair_offs" symboldefcount="1">
      <symbol link="imm__6">&lt;imm&gt;</symbol>
      <account encodedin="imm7">
        <intro>
          <para>Is the optional signed immediate byte offset, a multiple of 16 in the range -1024 to 1008, defaulting to 0 and encoded in the "imm7" field as &lt;imm&gt;/16.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.ldst.ldstnapair_offs.STTNP_Q_ldstnapair_offs" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckFPEnabled64.0" file="shared_pseudocode.xml" hover="function: CheckFPEnabled64()">CheckFPEnabled64</a>();
bits(64) address;
bits(64) address2;
constant integer dbytes = datasize DIV 8;

constant boolean privileged = <a link="AArch64.IsUnprivAccessPriv.0" file="shared_pseudocode.xml" hover="function: boolean AArch64.IsUnprivAccessPriv()">AArch64.IsUnprivAccessPriv</a>();
constant <a link="AccessDescriptor" file="shared_pseudocode.xml" hover="type AccessDescriptor is ( AccessType acctype, bits(2) el, SecurityState ss, boolean acqsc, boolean acqpc, boolean relsc, boolean limitedordered, boolean exclusive, boolean atomicop, MemAtomicOp modop, boolean nontemporal, boolean read, boolean write, CacheOp cacheop, CacheOpScope opscope, CacheType cachetype, boolean pan, boolean transactional, boolean nonfault, boolean firstfault, boolean first, boolean contiguous, boolean streamingsve, boolean ls64, boolean withstatus, boolean mops, boolean rcw, boolean rcws, boolean toplevel, VARange varange, boolean a32lsmd, boolean tagchecked, boolean tagaccess, boolean stzgm, boolean ispair, boolean highestaddressfirst, MPAMinfo mpam )">AccessDescriptor</a> accdesc = <a link="impl-shared.CreateAccDescASIMD.4" file="shared_pseudocode.xml" hover="function: AccessDescriptor CreateAccDescASIMD(MemOp memop, boolean nontemporal, boolean tagchecked, boolean privileged)">CreateAccDescASIMD</a>(<a link="MemOp_STORE" file="shared_pseudocode.xml" hover="enumeration MemOp {MemOp_LOAD, MemOp_STORE, MemOp_PREFETCH}">MemOp_STORE</a>, nontemporal,
                                                       tagchecked, privileged);

if n == 31 then
    <a link="impl-aarch64.CheckSPAlignment.0" file="shared_pseudocode.xml" hover="function: CheckSPAlignment()">CheckSPAlignment</a>();
    address = <a link="impl-aarch64.SP.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) SP[integer width]">SP</a>[64];
else
    address = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[n, 64];

address = <a link="impl-shared.AddressAdd.3" file="shared_pseudocode.xml" hover="function: bits(64) AddressAdd(bits(64) base, integer offset, AccessDescriptor accdesc)">AddressAdd</a>(address, offset, accdesc);

address2 = <a link="impl-shared.AddressIncrement.3" file="shared_pseudocode.xml" hover="function: bits(64) AddressIncrement(bits(64) base, integer increment, AccessDescriptor accdesc)">AddressIncrement</a>(address, dbytes, accdesc);
<a link="impl-aarch64.Mem.write.3" file="shared_pseudocode.xml" hover="accessor: Mem[bits(64) address, integer size, AccessDescriptor accdesc_in] = bits(size*8) value_in">Mem</a>[address , dbytes, accdesc] = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[t , datasize];
<a link="impl-aarch64.Mem.write.3" file="shared_pseudocode.xml" hover="accessor: Mem[bits(64) address, integer size, AccessDescriptor accdesc_in] = bits(size*8) value_in">Mem</a>[address2, dbytes, accdesc] = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[t2, datasize];</pstext></ps>
  </ps_section>
</instructionsection>
