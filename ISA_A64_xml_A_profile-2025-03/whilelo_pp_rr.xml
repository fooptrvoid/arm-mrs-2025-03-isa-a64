<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="whilelo_pp_rr" title="WHILELO (predicate pair) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="sve2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="WHILELO"/>
    <docvar key="sve-elem-type" value="8-64-elem"/>
  </docvars>
  <heading>WHILELO (predicate pair)</heading>
  <desc>
    <brief>
      <para>While incrementing unsigned scalar lower than scalar (pair of predicates)</para>
    </brief>
    <authored>
      <para>Generate a pair of predicates that starting from the lowest numbered element of the pair
is true while the incrementing value of the first, unsigned
 scalar operand is lower than the second scalar operand and
false thereafter up to the highest numbered element of the pair.</para>
      <para>The full  width of the scalar operands is significant
for the purposes of comparison, and the full width 
first operand is incremented by one for each destination
predicate element, irrespective of the predicate result
element size. The first general-purpose source register is not
itself updated.</para>
      <para>The lower-numbered elements are placed in the first predicate
destination register, and the higher-numbered elements in the
second predicate destination register. Sets the First (N), None (Z), !Last (C)
condition flags based on the predicate result,
and the V flag to zero.</para>
    </authored>
    <predicated>False</predicated>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="SVE2" oneof="1" id="iclass_sve2" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="WHILELO"/>
        <docvar key="sve-elem-type" value="8-64-elem"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2 || FEAT_SVE2p1" name="FEAT_SME2 || FEAT_SVE2p1"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_while_pn.sve_int_while_rr_pair.whilelo_pp_rr_" tworows="1">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Rm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="13" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="11" name="U" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="10" name="lt" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="3" width="3" name="Pd" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="0" name="eq" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
      </regdiagram>
      <encoding name="whilelo_pp_rr_" oneofinclass="1" oneof="1" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="WHILELO"/>
          <docvar key="sve-elem-type" value="8-64-elem"/>
          <docvar key="instr-class" value="sve2"/>
        </docvars>
        <asmtemplate><text>WHILELO  { </text><a hover="Is the name of the first destination scalable predicate register, encoded as &quot;Pd&quot; times 2." link="Pd1__2">&lt;Pd1&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__71">&lt;T&gt;</a><text>, </text><a hover="Is the name of the second destination scalable predicate register, encoded as &quot;Pd&quot; times 2 plus 1." link="Pd2__2">&lt;Pd2&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__71">&lt;T&gt;</a><text> }, </text><a hover="Is the 64-bit name of the first source general-purpose register, encoded in the &quot;Rn&quot; field." link="Xn__4">&lt;Xn&gt;</a><text>, </text><a hover="Is the 64-bit name of the second source general-purpose register, encoded in the &quot;Rm&quot; field." link="Xm__6">&lt;Xm&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_while_pn.sve_int_while_rr_pair.whilelo_pp_rr_" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) &amp;&amp; !IsFeatureImplemented(FEAT_SVE2p1) then
    <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 8 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(size);
constant integer rsize = 64;
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rm);
constant integer d0 = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pd:'0');
constant integer d1 = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pd:'1');
constant boolean unsigned = TRUE;
constant <a link="CmpOp" file="shared_pseudocode.xml" hover="enumeration CmpOp { Cmp_EQ, Cmp_NE, Cmp_GE, Cmp_GT, Cmp_LT, Cmp_LE, Cmp_UN }">CmpOp</a> op = <a link="Cmp_LT" file="shared_pseudocode.xml" hover="enumeration CmpOp { Cmp_EQ, Cmp_NE, Cmp_GE, Cmp_GT, Cmp_LT, Cmp_LE, Cmp_UN }">Cmp_LT</a>;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="whilelo_pp_rr_" symboldefcount="1">
      <symbol link="Pd1__2">&lt;Pd1&gt;</symbol>
      <account encodedin="Pd">
        <intro>
          <para>Is the name of the first destination scalable predicate register, encoded as "Pd" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="whilelo_pp_rr_" symboldefcount="1">
      <symbol link="T__71">&lt;T&gt;</symbol>
      <definition encodedin="size">
        <intro>Is the size specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">size</entry>
                <entry class="symbol">&lt;T&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">00</entry>
                <entry class="symbol">B</entry>
              </row>
              <row>
                <entry class="bitfield">01</entry>
                <entry class="symbol">H</entry>
              </row>
              <row>
                <entry class="bitfield">10</entry>
                <entry class="symbol">S</entry>
              </row>
              <row>
                <entry class="bitfield">11</entry>
                <entry class="symbol">D</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="whilelo_pp_rr_" symboldefcount="1">
      <symbol link="Pd2__2">&lt;Pd2&gt;</symbol>
      <account encodedin="Pd">
        <intro>
          <para>Is the name of the second destination scalable predicate register, encoded as "Pd" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="whilelo_pp_rr_" symboldefcount="1">
      <symbol link="Xn__4">&lt;Xn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the first source general-purpose register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="whilelo_pp_rr_" symboldefcount="1">
      <symbol link="Xm__6">&lt;Xm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the 64-bit name of the second source general-purpose register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sve.sve_while_pn.sve_int_while_rr_pair.whilelo_pp_rr_" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckSVEEnabled()">CheckSVEEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer PL = VL DIV 8;
constant integer elements = VL DIV esize;
constant bits(PL*2) mask = <a link="impl-shared.Ones.1" file="shared_pseudocode.xml" hover="function: bits(N) Ones(integer N)">Ones</a>(PL*2);
bits(rsize) operand1 = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[n, rsize];
constant bits(rsize) operand2 = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[m, rsize];
bits(PL*2) result;
boolean last = TRUE;
constant integer psize = esize DIV 8;

for e = 0 to (elements*2)-1
    boolean cond;
    case op of
        when <a link="Cmp_LT" file="shared_pseudocode.xml" hover="enumeration CmpOp { Cmp_EQ, Cmp_NE, Cmp_GE, Cmp_GT, Cmp_LT, Cmp_LE, Cmp_UN }">Cmp_LT</a> cond = (<a link="impl-shared.Int.2" file="shared_pseudocode.xml" hover="function: integer Int(bits(N) x, boolean unsigned)">Int</a>(operand1, unsigned) &lt;  <a link="impl-shared.Int.2" file="shared_pseudocode.xml" hover="function: integer Int(bits(N) x, boolean unsigned)">Int</a>(operand2, unsigned));
        when <a link="Cmp_LE" file="shared_pseudocode.xml" hover="enumeration CmpOp { Cmp_EQ, Cmp_NE, Cmp_GE, Cmp_GT, Cmp_LT, Cmp_LE, Cmp_UN }">Cmp_LE</a> cond = (<a link="impl-shared.Int.2" file="shared_pseudocode.xml" hover="function: integer Int(bits(N) x, boolean unsigned)">Int</a>(operand1, unsigned) &lt;= <a link="impl-shared.Int.2" file="shared_pseudocode.xml" hover="function: integer Int(bits(N) x, boolean unsigned)">Int</a>(operand2, unsigned));

    last = last &amp;&amp; cond;
    constant bit pbit = if last then '1' else '0';
    <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, e, psize] = <a link="impl-shared.ZeroExtend.2" file="shared_pseudocode.xml" hover="function: bits(N) ZeroExtend(bits(M) x, integer N)">ZeroExtend</a>(pbit, psize);
    operand1 = operand1 + 1;

PSTATE.&lt;N,Z,C,V&gt; = <a link="impl-aarch64.PredTest.3" file="shared_pseudocode.xml" hover="function: bits(4) PredTest(bits(N) mask, bits(N) result, integer esize)">PredTest</a>(mask, result, esize);
<a link="impl-aarch64.P.write.2" file="shared_pseudocode.xml" hover="accessor: P[integer n, integer width] = bits(width) value">P</a>[d0, PL] = result&lt;PL-1:0&gt;;
<a link="impl-aarch64.P.write.2" file="shared_pseudocode.xml" hover="accessor: P[integer n, integer width] = bits(width) value">P</a>[d1, PL] = result&lt;PL*2-1:PL&gt;;</pstext></ps>
  </ps_section>
</instructionsection>
