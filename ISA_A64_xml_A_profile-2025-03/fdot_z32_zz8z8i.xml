<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="fdot_z32_zz8z8i" title="FDOT (4-way, indexed) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="sve2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="FDOT"/>
  </docvars>
  <heading>FDOT (4-way, indexed)</heading>
  <desc>
    <brief>
      <para>8-bit floating-point indexed dot product to single-precision</para>
    </brief>
    <authored>
      <para>This instruction computes the fused sum-of-products of a group of
four 8-bit floating-point values held in each 32-bit element
of the first source vector and a group of
four 8-bit floating-point values in an indexed 32-bit element of the second
source vector. The single-precision sum-of-products
are scaled by 2<sup>-UInt(FPMR.LSCALE)</sup>,
before being destructively added without intermediate rounding to the corresponding
single-precision elements of the destination vector.</para>
      <para>The 8-bit floating-point groups within the
second source vector are specified using an immediate index which selects
the same group position within each 128-bit vector segment.
The 8-bit floating-point encoding format for the elements of the first source vector
and the second source vector is selected by <asm-code>FPMR.F8S1</asm-code> and <asm-code>FPMR.F8S2</asm-code>
respectively.</para>
      <para>This instruction is unpredicated.</para>
    </authored>
    <predicated>False</predicated>
    <takes_movprfx>True</takes_movprfx>
  </desc>
  <operationalnotes>
    <operationalnote>
      <operationalnote_content>
        <para>This instruction might be immediately preceded in program order by a <instruction>MOVPRFX</instruction> instruction. The <instruction>MOVPRFX</instruction> must conform to all of the following requirements, otherwise the behavior of the <instruction>MOVPRFX</instruction> and this instruction is <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word>:</para>
        <list type="unordered">
          <listitem>
            <content>The <instruction>MOVPRFX</instruction> must be unpredicated.</content>
          </listitem>
          <listitem>
            <content>The <instruction>MOVPRFX</instruction> must specify the same destination register as this instruction.</content>
          </listitem>
          <listitem>
            <content>The destination register must not refer to architectural register state referenced by any other source operand register of this instruction.</content>
          </listitem>
        </list>
      </operationalnote_content>
    </operationalnote>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="SVE2" oneof="1" id="iclass_sve2" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="FDOT"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="(FEAT_SVE2 &amp;&amp; FEAT_FP8DOT4) || FEAT_SSVE_FP8DOT4" name="(FEAT_SVE2 &amp;&amp; FEAT_FP8DOT4) || FEAT_SSVE_FP8DOT4"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_fp_fma_w_by_indexed_elem.sve_fp_fdot_by_indexed_elem.fdot_z32_zz8z8i_" tworows="1">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="22" name="op" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="2" name="i2" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="18" width="3" name="Zm" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="15" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="13" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="12" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="11" width="2" name="opc2" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Zda" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="fdot_z32_zz8z8i_" oneofinclass="1" oneof="1" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FDOT"/>
          <docvar key="instr-class" value="sve2"/>
        </docvars>
        <asmtemplate><text>FDOT  </text><a hover="Is the name of the third source and destination scalable vector register, encoded in the &quot;Zda&quot; field." link="Zda">&lt;Zda&gt;</a><text>.S, </text><a hover="Is the name of the first source scalable vector register, encoded in the &quot;Zn&quot; field." link="Zn__2">&lt;Zn&gt;</a><text>.B, </text><a hover="For the &quot;Half-precision&quot; and &quot;Single-precision&quot; variants: is the name of the second source scalable vector register Z0-Z7, encoded in the &quot;Zm&quot; field." link="Zm__4">&lt;Zm&gt;</a><text>.B[</text><a hover="For the &quot;8-bit to 32-bit&quot; variant: is the immediate index of a 32-bit group of four 8-bit values within each 128-bit vector segment, in the range 0 to 3, encoded in the &quot;i2&quot; field." link="imm__40">&lt;imm&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_fp_fma_w_by_indexed_elem.sve_fp_fdot_by_indexed_elem.fdot_z32_zz8z8i_" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !<a link="impl-aarch64.HaveSVE2FP8DOT4.0" file="shared_pseudocode.xml" hover="function: boolean HaveSVE2FP8DOT4()">HaveSVE2FP8DOT4</a>() then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer da = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zda);
constant integer index = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i2);</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="fdot_z32_zz8z8i_" symboldefcount="1">
      <symbol link="Zda">&lt;Zda&gt;</symbol>
      <account encodedin="Zda">
        <intro>
          <para>Is the name of the third source and destination scalable vector register, encoded in the "Zda" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fdot_z32_zz8z8i_" symboldefcount="1">
      <symbol link="Zn__2">&lt;Zn&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the first source scalable vector register, encoded in the "Zn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fdot_z32_zz8z8i_" symboldefcount="1">
      <symbol link="Zm__4">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the second source scalable vector register Z0-Z7, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fdot_z32_zz8z8i_" symboldefcount="1">
      <symbol link="imm__40">&lt;imm&gt;</symbol>
      <account encodedin="i2">
        <intro>
          <para>Is the immediate index of a 32-bit group of four 8-bit values within each 128-bit vector segment, in the range 0 to 3, encoded in the "i2" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sve.sve_fp_fma_w_by_indexed_elem.sve_fp_fdot_by_indexed_elem.fdot_z32_zz8z8i_" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">
<a link="impl-aarch64.CheckFPMREnabled.0" file="shared_pseudocode.xml" hover="function: CheckFPMREnabled()">CheckFPMREnabled</a>();
if IsFeatureImplemented(FEAT_SSVE_FP8DOT4) &amp;&amp; IsFeatureImplemented(FEAT_FP8DOT4) then
    <a link="impl-aarch64.CheckSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckSVEEnabled()">CheckSVEEnabled</a>();
elsif IsFeatureImplemented(FEAT_FP8DOT4) then
    <a link="impl-aarch64.CheckNonStreamingSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckNonStreamingSVEEnabled()">CheckNonStreamingSVEEnabled</a>();
else
    <a link="impl-aarch64.CheckStreamingSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckStreamingSVEEnabled()">CheckStreamingSVEEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer elements = VL DIV 32;
constant integer eltspersegment = 128 DIV 32;
constant bits(VL) operand1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[n, VL];
constant bits(VL) operand2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m, VL];
constant bits(VL) operand3 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[da, VL];
bits(VL) result;

for e = 0 to elements-1
    constant integer segmentbase = e - (e MOD eltspersegment);
    constant integer s = segmentbase + index;
    constant bits(32) op1 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, e, 32];
    constant bits(32) op2 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, s, 32];
    bits(32) sum  = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand3, e, 32];

    sum = <a link="impl-shared.FP8DotAddFP.5" file="shared_pseudocode.xml" hover="function: bits(M) FP8DotAddFP(bits(M) addend, bits(N) op1, bits(N) op2, FPCR_Type fpcr, FPMR_Type fpmr)">FP8DotAddFP</a>(sum, op1, op2, FPCR, FPMR);
    <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, e, 32] = sum;

<a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[da, VL] = result;</pstext></ps>
  </ps_section>
</instructionsection>
