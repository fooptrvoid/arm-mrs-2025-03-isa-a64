<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="SETPTN" title="SETPTN, SETMTN, SETETN -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="general"/>
    <docvar key="isa" value="A64"/>
  </docvars>
  <heading>SETPTN, SETMTN, SETETN</heading>
  <desc>
    <brief>
      <para>Memory set, unprivileged and non-temporal</para>
    </brief>
    <authored>
      <para>These instructions set a required number of bytes in memory to the value in the least significant
byte of the source data register. The prologue, main, and epilogue instructions are expected to
be run in succession and to appear consecutively in memory: SETPTN, then SETMTN,
and then SETETN.</para>
      <para>SETPTN performs some preconditioning of the arguments suitable for using the
SETMTN instruction, and sets an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> portion of the requested number
of bytes. SETMTN sets a further <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> portion of the remaining bytes.
SETETN sets any final remaining bytes.</para>
      <note>
        <para>The ability to set an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> number of bytes allows an implementation to
optimize how the bytes being set are divided between the different instructions.</para>
      </note>
      <para>For more information on exceptions specific to memory set instructions,
see <xref linkend="ARMARM_MDSec.memcpy_and_memset_exceptions">Memory Copy and Memory Set exceptions</xref>.</para>
      <para>The architecture supports two algorithms for the memory set: option A and option B. Which
algorithm is used is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>.</para>
      <note>
        <para>Portable software should not assume that the choice of algorithm is constant.</para>
      </note>
      <para>For SETPTN:</para>
      <list type="unordered">
        <listitem>
          <content>If Xn&lt;63&gt; == 1, the set size is saturated to <hexnumber>0x7FFFFFFFFFFFFFFF</hexnumber>.</content>
        </listitem>
      </list>
      <para>On completion of SETPTN, option A:</para>
      <list type="unordered">
        <listitem>
          <content>Xn holds -1 times the number of bytes in the saturated set size remaining to be set.</content>
        </listitem>
        <listitem>
          <content>Xd holds the original Xd + saturated set size.</content>
        </listitem>
        <listitem>
          <content>PSTATE.{N,Z,C,V} are set to {0,0,0,0}.</content>
        </listitem>
      </list>
      <para>On completion of SETPTN, option B:</para>
      <list type="unordered">
        <listitem>
          <content>Xn holds the number of bytes in the saturated set size remaining to be set.</content>
        </listitem>
        <listitem>
          <content>Xd holds the lowest address that has not been set.</content>
        </listitem>
        <listitem>
          <content>PSTATE.{N,Z,C,V} are set to {0,0,1,0}.</content>
        </listitem>
      </list>
      <para>For SETMTN, option A, when PSTATE.C = 0:</para>
      <list type="unordered">
        <listitem>
          <content>Xn holds a signed 64-bit integer.</content>
        </listitem>
        <listitem>
          <content>Xn holds -1 times the number of bytes remaining to be set.</content>
        </listitem>
        <listitem>
          <content>Xd holds the lowest address to be set - Xn.</content>
        </listitem>
        <listitem>
          <content>On completion of the instruction, Xn holds -1 times the number of bytes remaining to be set.</content>
        </listitem>
      </list>
      <para>For SETMTN, option B, when PSTATE.C = 1:</para>
      <list type="unordered">
        <listitem>
          <content>Xn holds the number of bytes remaining to be set.</content>
        </listitem>
        <listitem>
          <content>Xd holds the lowest address to be set.</content>
        </listitem>
        <listitem>
          <content>On completion of the instruction:<list type="unordered">
              <listitem>
                <content>Xn holds the number of bytes remaining to be set.</content>
              </listitem>
              <listitem>
                <content>Xd holds the lowest address that has not been set.</content>
              </listitem>
            </list>
          </content>
        </listitem>
      </list>
      <para>For SETETN, option A, when PSTATE.C = 0:</para>
      <list type="unordered">
        <listitem>
          <content>Xn holds a signed 64-bit integer.</content>
        </listitem>
        <listitem>
          <content>Xn holds -1 times the number of bytes remaining to be set.</content>
        </listitem>
        <listitem>
          <content>Xd holds the lowest address to be set - Xn.</content>
        </listitem>
        <listitem>
          <content>On completion of the instruction, Xn holds 0.</content>
        </listitem>
      </list>
      <para>For SETETN, option B, when PSTATE.C = 1:</para>
      <list type="unordered">
        <listitem>
          <content>Xn holds the number of bytes remaining to be set.</content>
        </listitem>
        <listitem>
          <content>Xd holds the lowest address to be set.</content>
        </listitem>
        <listitem>
          <content>On completion of the instruction:<list type="unordered">
              <listitem>
                <content>Xn holds 0.</content>
              </listitem>
              <listitem>
                <content>Xd holds the lowest address that has not been set.</content>
              </listitem>
            </list>
          </content>
        </listitem>
      </list>
      <para>Explicit Memory Write  effects produced by the instruction behave as if the instruction was
  executed at EL0 if the <xref linkend="ARMARM_Effective_value">Effective value</xref> of
  PSTATE.UAO is 0 and either:</para>
      <list type="unordered">
        <listitem>
          <content>The instruction is executed at EL1.</content>
        </listitem>
        <listitem>
          <content>The instruction is executed at EL2 when the <xref linkend="ARMARM_Effective_value">Effective value</xref>
  of <register_link id="AArch64-hcr_el2.xml" state="AArch64">HCR_EL2</register_link>.{E2H, TGE} is {1, 1}.</content>
        </listitem>
      </list>
      <para>Otherwise, the Explicit Memory Write  effects operate with the restrictions determined by
  the Exception level at which the instruction is executed.</para>
    </authored>
    <encodingnotes>
      <para>For information about the <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word> behavior of this instruction, see <xref linkend="CJAEGDJC">Architectural Constraints on UNPREDICTABLE behaviors</xref>, and particularly <xref linkend="CEGDGDDAG2">Memory Copy and Memory Set SET*</xref> and <xref linkend="ARMARM_CEGCCGAE">Crossing a page boundary with different memory types or Shareability attributes</xref>.</para>
    </encodingnotes>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="Integer" oneof="1" id="iclass_integer" no_encodings="3" isa="A64">
      <docvars>
        <docvar key="instr-class" value="general"/>
        <docvar key="isa" value="A64"/>
      </docvars>
      <iclassintro count="3"/>
      <arch_variants>
        <arch_variant feature="FEAT_MOPS" name="ARMv8.8"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.ldst.memcms.SETPTN_SET_memcms" tworows="1">
        <box hibit="31" width="2" name="sz" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="29" width="3" settings="3">
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="26" name="o0" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="25" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="op1" usename="1" settings="2" psbits="xx">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="20" width="5" name="Rs" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="4" name="op2" usename="1" settings="2" psbits="xxxx">
          <c>x</c>
          <c>x</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="11" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Rd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="SETPTN_SET_memcms" oneofinclass="3" oneof="3" label="Prologue" bitdiffs="op2 == 0011">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="pme" value="pme-prologue"/>
          <docvar key="mnemonic" value="SETPTN"/>
          <docvar key="instr-class" value="general"/>
        </docvars>
        <box hibit="15" width="4" name="op2">
          <c>0</c>
          <c>0</c>
          <c/>
          <c/>
        </box>
        <asmtemplate><text>SETPTN  [</text><a hover="For the &quot;Prologue&quot; variant: is the 64-bit name of the general-purpose register that holds the destination address and is updated by the instruction, encoded in the &quot;Rd&quot; field." link="XdOrXZR">&lt;Xd&gt;</a><text>]!, </text><a hover="For the &quot;Prologue&quot; variant: is the 64-bit name of the general-purpose register that holds the number of bytes to be set and is updated by the instruction, encoded in the &quot;Rn&quot; field." link="XnOrXZR__5">&lt;Xn&gt;</a><text>!, </text><a hover="Is the 64-bit name of the general-purpose register that holds the source data, encoded in the &quot;Rs&quot; field." link="XsOrXZR__7">&lt;Xs&gt;</a></asmtemplate>
      </encoding>
      <encoding name="SETMTN_SET_memcms" oneofinclass="3" oneof="3" label="Main" bitdiffs="op2 == 0111">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="pme" value="pme-main"/>
          <docvar key="mnemonic" value="SETMTN"/>
          <docvar key="instr-class" value="general"/>
        </docvars>
        <box hibit="15" width="4" name="op2">
          <c>0</c>
          <c>1</c>
          <c/>
          <c/>
        </box>
        <asmtemplate><text>SETMTN  [</text><a hover="For the &quot;Epilogue&quot; and &quot;Main&quot; variants: is the 64-bit name of the general-purpose register that holds an encoding of the destination address and for option B is updated by the instruction, encoded in the &quot;Rd&quot; field." link="XdOrXZR__3">&lt;Xd&gt;</a><text>]!, </text><a hover="For the &quot;Main&quot; variant: is the 64-bit name of the general-purpose register that holds an encoding of the number of bytes to be set and is updated by the instruction, encoded in the &quot;Rn&quot; field." link="XnOrXZR__6">&lt;Xn&gt;</a><text>!, </text><a hover="Is the 64-bit name of the general-purpose register that holds the source data, encoded in the &quot;Rs&quot; field." link="XsOrXZR__7">&lt;Xs&gt;</a></asmtemplate>
      </encoding>
      <encoding name="SETETN_SET_memcms" oneofinclass="3" oneof="3" label="Epilogue" bitdiffs="op2 == 1011">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="pme" value="pme-epilogue"/>
          <docvar key="mnemonic" value="SETETN"/>
          <docvar key="instr-class" value="general"/>
        </docvars>
        <box hibit="15" width="4" name="op2">
          <c>1</c>
          <c>0</c>
          <c/>
          <c/>
        </box>
        <asmtemplate><text>SETETN  [</text><a hover="For the &quot;Epilogue&quot; and &quot;Main&quot; variants: is the 64-bit name of the general-purpose register that holds an encoding of the destination address and for option B is updated by the instruction, encoded in the &quot;Rd&quot; field." link="XdOrXZR__3">&lt;Xd&gt;</a><text>]!, </text><a hover="For the &quot;Epilogue&quot; variant: is the 64-bit name of the general-purpose register that holds the number of bytes to be set and is set to zero on completion of the instruction, encoded in the &quot;Rn&quot; field." link="XnOrXZR__7">&lt;Xn&gt;</a><text>!, </text><a hover="Is the 64-bit name of the general-purpose register that holds the source data, encoded in the &quot;Rs&quot; field." link="XsOrXZR__7">&lt;Xs&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.ldst.memcms.SETPTN_SET_memcms" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_MOPS) || sz != '00' then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);

<a link="SETParams" file="shared_pseudocode.xml" hover="type SETParams is ( MOPSStage stage, boolean implements_option_a, boolean is_setg, integer setsize, integer stagesetsize, bits(64) toaddress, bits(4) nzcv, integer n, integer d, integer s )">SETParams</a> memset;
memset.d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rd);
memset.s = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rs);
memset.n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
constant bits(2) options = op2&lt;1:0&gt;;
constant boolean nontemporal = options&lt;1&gt; == '1';

case op2&lt;3:2&gt; of
    when '00' memset.stage = <a link="MOPSStage_Prologue" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Prologue</a>;
    when '01' memset.stage = <a link="MOPSStage_Main" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Main</a>;
    when '10' memset.stage = <a link="MOPSStage_Epilogue" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Epilogue</a>;
    otherwise <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="SETPTN_SET_memcms" symboldefcount="1">
      <symbol link="XdOrXZR">&lt;Xd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>For the "Prologue" variant: is the 64-bit name of the general-purpose register that holds the destination address and is updated by the instruction, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="SETMTN_SET_memcms, SETETN_SET_memcms" symboldefcount="2">
      <symbol link="XdOrXZR__3">&lt;Xd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>For the "Epilogue" and "Main" variants: is the 64-bit name of the general-purpose register that holds an encoding of the destination address and for option B is updated by the instruction, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="SETPTN_SET_memcms" symboldefcount="1">
      <symbol link="XnOrXZR__5">&lt;Xn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>For the "Prologue" variant: is the 64-bit name of the general-purpose register that holds the number of bytes to be set and is updated by the instruction, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="SETMTN_SET_memcms" symboldefcount="2">
      <symbol link="XnOrXZR__6">&lt;Xn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>For the "Main" variant: is the 64-bit name of the general-purpose register that holds an encoding of the number of bytes to be set and is updated by the instruction, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="SETETN_SET_memcms" symboldefcount="3">
      <symbol link="XnOrXZR__7">&lt;Xn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>For the "Epilogue" variant: is the 64-bit name of the general-purpose register that holds the number of bytes to be set and is set to zero on completion of the instruction, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="SETPTN_SET_memcms, SETMTN_SET_memcms, SETETN_SET_memcms" symboldefcount="1">
      <symbol link="XsOrXZR__7">&lt;Xs&gt;</symbol>
      <account encodedin="Rs">
        <intro>
          <para>Is the 64-bit name of the general-purpose register that holds the source data, encoded in the "Rs" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.ldst.memcms.SETPTN_SET_memcms" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckMOPSEnabled.0" file="shared_pseudocode.xml" hover="function: CheckMOPSEnabled()">CheckMOPSEnabled</a>();

<a link="impl-aarch64.CheckSETConstrainedUnpredictable.3" file="shared_pseudocode.xml" hover="function: CheckSETConstrainedUnpredictable(integer n, integer d, integer s)">CheckSETConstrainedUnpredictable</a>(memset.n, memset.d, memset.s);

constant bits(8) data = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[memset.s, 8];
<a link="MOPSBlockSize" file="shared_pseudocode.xml" hover="type MOPSBlockSize">MOPSBlockSize</a> B;

memset.is_setg = FALSE;
memset.nzcv = PSTATE.&lt;N,Z,C,V&gt;;
memset.toaddress = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[memset.d, 64];
if memset.stage == <a link="MOPSStage_Prologue" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Prologue</a> then
    memset.setsize = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(<a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[memset.n, 64]);
else
    memset.setsize = <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(<a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[memset.n, 64]);
memset.implements_option_a = <a link="impl-aarch64.SETOptionA.0" file="shared_pseudocode.xml" hover="function: boolean SETOptionA()">SETOptionA</a>();

constant boolean privileged = (if options&lt;0&gt; == '1' then <a link="AArch64.IsUnprivAccessPriv.0" file="shared_pseudocode.xml" hover="function: boolean AArch64.IsUnprivAccessPriv()">AArch64.IsUnprivAccessPriv</a>()
                               else PSTATE.EL != <a link="EL0" file="shared_pseudocode.xml" hover="constant bits(2) EL0 = '00'">EL0</a>);

constant <a link="AccessDescriptor" file="shared_pseudocode.xml" hover="type AccessDescriptor is ( AccessType acctype, bits(2) el, SecurityState ss, boolean acqsc, boolean acqpc, boolean relsc, boolean limitedordered, boolean exclusive, boolean atomicop, MemAtomicOp modop, boolean nontemporal, boolean read, boolean write, CacheOp cacheop, CacheOpScope opscope, CacheType cachetype, boolean pan, boolean transactional, boolean nonfault, boolean firstfault, boolean first, boolean contiguous, boolean streamingsve, boolean ls64, boolean withstatus, boolean mops, boolean rcw, boolean rcws, boolean toplevel, VARange varange, boolean a32lsmd, boolean tagchecked, boolean tagaccess, boolean stzgm, boolean ispair, boolean highestaddressfirst, MPAMinfo mpam )">AccessDescriptor</a> accdesc = <a link="impl-shared.CreateAccDescMOPS.3" file="shared_pseudocode.xml" hover="function: AccessDescriptor CreateAccDescMOPS(MemOp memop, boolean privileged, boolean nontemporal)">CreateAccDescMOPS</a>(<a link="MemOp_STORE" file="shared_pseudocode.xml" hover="enumeration MemOp {MemOp_LOAD, MemOp_STORE, MemOp_PREFETCH}">MemOp_STORE</a>, privileged, nontemporal);

if memset.stage == <a link="MOPSStage_Prologue" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Prologue</a> then
    if memset.setsize &gt; <a link="ArchMaxMOPSBlockSize" file="shared_pseudocode.xml" hover="constant integer ArchMaxMOPSBlockSize = 0x7FFF_FFFF_FFFF_FFFF">ArchMaxMOPSBlockSize</a> then
        memset.setsize = <a link="ArchMaxMOPSBlockSize" file="shared_pseudocode.xml" hover="constant integer ArchMaxMOPSBlockSize = 0x7FFF_FFFF_FFFF_FFFF">ArchMaxMOPSBlockSize</a>;

    if memset.implements_option_a then
        memset.nzcv = '0000';
        memset.toaddress = memset.toaddress + memset.setsize;
        memset.setsize   = 0 - memset.setsize;
    else
        memset.nzcv = '0010';

memset.stagesetsize = <a link="impl-aarch64.MemSetStageSize.1" file="shared_pseudocode.xml" hover="function: integer MemSetStageSize(SETParams memset)">MemSetStageSize</a>(memset);

if memset.stage != <a link="MOPSStage_Prologue" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Prologue</a> then
    <a link="impl-aarch64.CheckMemSetParams.2" file="shared_pseudocode.xml" hover="function: CheckMemSetParams(SETParams memset, bits(2) options)">CheckMemSetParams</a>(memset, options);

<a link="AddressDescriptor" file="shared_pseudocode.xml" hover="type AddressDescriptor is ( FaultRecord fault, MemoryAttributes memattrs, FullAddress paddress, boolean s1assured, boolean s2fs1mro, bits(16) mecid, bits(64) vaddress )">AddressDescriptor</a> memaddrdesc;
<a link="PhysMemRetStatus" file="shared_pseudocode.xml" hover="type PhysMemRetStatus is ( Fault statuscode, bit extflag, ErrorState merrorstate, bits(64) store64bstatus )">PhysMemRetStatus</a>  memstatus;
integer memory_set;
boolean fault = FALSE;

if memset.implements_option_a then
    while memset.stagesetsize &lt; 0 &amp;&amp; !fault do
        // IMP DEF selection of the block size that is worked on. While many
        // implementations might make this constant, that is not assumed.
        B = <a link="impl-aarch64.SETSizeChoice.2" file="shared_pseudocode.xml" hover="function: MOPSBlockSize SETSizeChoice(SETParams memset, integer alignsize)">SETSizeChoice</a>(memset, 1);
        assert B &lt;= -1 * memset.stagesetsize;

        (memory_set, memaddrdesc, memstatus) = <a link="impl-aarch64.MemSetBytes.4" file="shared_pseudocode.xml" hover="function: (integer, AddressDescriptor, PhysMemRetStatus) MemSetBytes(bits(64) toaddress, bits(8) data, MOPSBlockSize bytes, AccessDescriptor accdesc)">MemSetBytes</a>(memset.toaddress + memset.setsize,
                                                           data, B, accdesc);

        if memory_set != B then
            fault = TRUE;
        else
            memset.setsize      = memset.setsize      + B;
            memset.stagesetsize = memset.stagesetsize + B;

else
    while memset.stagesetsize &gt; 0 &amp;&amp; !fault do
        // IMP DEF selection of the block size that is worked on. While many
        // implementations might make this constant, that is not assumed.
        B = <a link="impl-aarch64.SETSizeChoice.2" file="shared_pseudocode.xml" hover="function: MOPSBlockSize SETSizeChoice(SETParams memset, integer alignsize)">SETSizeChoice</a>(memset, 1);
        assert B &lt;= memset.stagesetsize;

        (memory_set, memaddrdesc, memstatus) = <a link="impl-aarch64.MemSetBytes.4" file="shared_pseudocode.xml" hover="function: (integer, AddressDescriptor, PhysMemRetStatus) MemSetBytes(bits(64) toaddress, bits(8) data, MOPSBlockSize bytes, AccessDescriptor accdesc)">MemSetBytes</a>(memset.toaddress, data, B, accdesc);

        if memory_set != B then
            fault = TRUE;
        else
            memset.toaddress    = memset.toaddress    + B;
            memset.setsize      = memset.setsize      - B;
            memset.stagesetsize = memset.stagesetsize - B;

<a link="impl-aarch64.UpdateSetRegisters.3" file="shared_pseudocode.xml" hover="function: UpdateSetRegisters(SETParams memset, boolean fault, integer memory_set)">UpdateSetRegisters</a>(memset, fault, memory_set);

if fault then
    if <a link="impl-shared.IsFault.1" file="shared_pseudocode.xml" hover="function: boolean IsFault(AddressDescriptor addrdesc)">IsFault</a>(memaddrdesc) then
        <a link="AArch64.Abort.1" file="shared_pseudocode.xml" hover="function: AArch64.Abort(FaultRecord fault)">AArch64.Abort</a>(memaddrdesc.fault);
    else
        constant boolean iswrite = TRUE;
        <a link="impl-shared.HandleExternalAbort.5" file="shared_pseudocode.xml" hover="function: HandleExternalAbort(PhysMemRetStatus memretstatus, boolean iswrite, AddressDescriptor memaddrdesc, integer size, AccessDescriptor accdesc)">HandleExternalAbort</a>(memstatus, iswrite, memaddrdesc, B, accdesc);

if memset.stage == <a link="MOPSStage_Prologue" file="shared_pseudocode.xml" hover="enumeration MOPSStage { MOPSStage_Prologue, MOPSStage_Main, MOPSStage_Epilogue }">MOPSStage_Prologue</a> then
    PSTATE.&lt;N,Z,C,V&gt; = memset.nzcv;</pstext></ps>
  </ps_section>
</instructionsection>
