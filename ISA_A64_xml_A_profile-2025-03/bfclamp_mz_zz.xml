<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="bfclamp_mz_zz" title="BFCLAMP -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="mortlach2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="BFCLAMP"/>
  </docvars>
  <heading>BFCLAMP</heading>
  <desc>
    <brief>
      <para>Multi-vector BFloat16 clamp to minimum/maximum number</para>
    </brief>
    <authored>
      <para>This instruction clamps each BFloat16 element in the two or four destination vectors
to between the BFloat16 minimum value in the corresponding element of the
first source vector and the BFloat16 maximum value in the corresponding element
of the second source vector and destructively places the clamped results
in the corresponding elements of the two or four destination vectors.</para>
      <para>Regardless of the value of FPCR.AH, the behavior is as follows for each minimum number and maximum number operation:</para>
      <list type="unordered">
        <listitem>
          <content>Negative zero compares less than positive zero.</content>
        </listitem>
        <listitem>
          <content>If one value is numeric and the other
  is a quiet NaN, the result is the numeric
  value.</content>
        </listitem>
        <listitem>
          <content>When FPCR.DN is 0, if either value is a signaling NaN or if both values are NaNs,
  the result is a quiet NaN.</content>
        </listitem>
        <listitem>
          <content>When FPCR.DN is 1, if either value is a signaling NaN or if both values are NaNs,
  the result is Default NaN.</content>
        </listitem>
      </list>
      <para>This instruction follows SME2 non-widening BFloat16 numerical behaviors
corresponding to instructions that place their results in two or four SVE Z vectors.</para>
      <para>This instruction is unpredicated.</para>
      <para>ID_AA64ZFR0_EL1.B16B16 indicates whether this instruction is implemented.</para>
    </authored>
    <predicated>False</predicated>
    <sm_policy>SM_1_only</sm_policy>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <classesintro count="2">
      <txt>It has encodings from 2 classes:</txt>
      <a href="#iclass_two_registers">Two registers</a>
      <txt> and </txt>
      <a href="#iclass_four_registers">Four registers</a>
    </classesintro>
    <iclass name="Two registers" oneof="2" id="iclass_two_registers" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="ldstruct-regcount" value="to-2reg"/>
        <docvar key="mnemonic" value="BFCLAMP"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2 &amp;&amp; FEAT_SVE_B16B16" name="FEAT_SME2 &amp;&amp; FEAT_SVE_B16B16"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_sve_3.mortlach_multi2_fclamp.bfclamp_mz_zz_2" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Zm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="3" settings="3">
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="4" name="Zd" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="0" name="op" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
      </regdiagram>
      <encoding name="bfclamp_mz_zz_2" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="BFCLAMP"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="ldstruct-regcount" value="to-2reg"/>
        </docvars>
        <asmtemplate><text>BFCLAMP  { </text><a hover="For the &quot;Two registers&quot; variant: is the name of the first scalable vector register of the destination multi-vector group, encoded as &quot;Zd&quot; times 2." link="Zd1">&lt;Zd1&gt;</a><text>.H-</text><a hover="For the &quot;Consecutive&quot; variant: is the name of the second scalable vector register of the destination multi-vector group, encoded as &quot;Zd&quot; times 2 plus 1." link="Zd2">&lt;Zd2&gt;</a><text>.H }, </text><a hover="Is the name of the first source scalable vector register, encoded in the &quot;Zn&quot; field." link="Zn__2">&lt;Zn&gt;</a><text>.H, </text><a hover="Is the name of the second source scalable vector register, encoded in the &quot;Zm&quot; field." link="Zm">&lt;Zm&gt;</a><text>.H</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_sve_3.mortlach_multi2_fclamp.bfclamp_mz_zz_2" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) || !IsFeatureImplemented(FEAT_SVE_B16B16) then
    <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd:'0');
constant integer nreg = 2;</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Four registers" oneof="2" id="iclass_four_registers" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="ldstruct-regcount" value="to-4reg"/>
        <docvar key="mnemonic" value="BFCLAMP"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2 &amp;&amp; FEAT_SVE_B16B16" name="FEAT_SME2 &amp;&amp; FEAT_SVE_B16B16"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_sve_3.mortlach_multi4_fclamp.bfclamp_mz_zz_4" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Zm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="3" settings="3">
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="3" name="Zd" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="1" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="0" name="op" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
      </regdiagram>
      <encoding name="bfclamp_mz_zz_4" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="BFCLAMP"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="ldstruct-regcount" value="to-4reg"/>
        </docvars>
        <asmtemplate><text>BFCLAMP  { </text><a hover="For the &quot;Four registers&quot; variant: is the name of the first scalable vector register of the destination multi-vector group, encoded as &quot;Zd&quot; times 4." link="Zd1__2">&lt;Zd1&gt;</a><text>.H-</text><a hover="For the &quot;Consecutive&quot; variant: is the name of the fourth scalable vector register of the destination multi-vector group, encoded as &quot;Zd&quot; times 4 plus 3." link="Zd4">&lt;Zd4&gt;</a><text>.H }, </text><a hover="Is the name of the first source scalable vector register, encoded in the &quot;Zn&quot; field." link="Zn__2">&lt;Zn&gt;</a><text>.H, </text><a hover="Is the name of the second source scalable vector register, encoded in the &quot;Zm&quot; field." link="Zm">&lt;Zm&gt;</a><text>.H</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_sve_3.mortlach_multi4_fclamp.bfclamp_mz_zz_4" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) || !IsFeatureImplemented(FEAT_SVE_B16B16) then
    <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd:'00');
constant integer nreg = 4;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="bfclamp_mz_zz_2" symboldefcount="1">
      <symbol link="Zd1">&lt;Zd1&gt;</symbol>
      <account encodedin="Zd">
        <intro>
          <para>For the "Two registers" variant: is the name of the first scalable vector register of the destination multi-vector group, encoded as "Zd" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="bfclamp_mz_zz_4" symboldefcount="2">
      <symbol link="Zd1__2">&lt;Zd1&gt;</symbol>
      <account encodedin="Zd">
        <intro>
          <para>For the "Four registers" variant: is the name of the first scalable vector register of the destination multi-vector group, encoded as "Zd" times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="bfclamp_mz_zz_2" symboldefcount="1">
      <symbol link="Zd2">&lt;Zd2&gt;</symbol>
      <account encodedin="Zd">
        <intro>
          <para>Is the name of the second scalable vector register of the destination multi-vector group, encoded as "Zd" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="bfclamp_mz_zz_2, bfclamp_mz_zz_4" symboldefcount="1">
      <symbol link="Zn__2">&lt;Zn&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the first source scalable vector register, encoded in the "Zn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="bfclamp_mz_zz_2, bfclamp_mz_zz_4" symboldefcount="1">
      <symbol link="Zm">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the second source scalable vector register, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="bfclamp_mz_zz_4" symboldefcount="1">
      <symbol link="Zd4">&lt;Zd4&gt;</symbol>
      <account encodedin="Zd">
        <intro>
          <para>Is the name of the fourth scalable vector register of the destination multi-vector group, encoded as "Zd" times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sme.mortlach_multi_sve_3.mortlach_multi2_fclamp.bfclamp_mz_zz_2" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckStreamingSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckStreamingSVEEnabled()">CheckStreamingSVEEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer elements = VL DIV 16;
array [0..3] of bits(VL) results;

for r = 0 to nreg-1
    constant bits(VL) operand1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[n, VL];
    constant bits(VL) operand2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m, VL];
    constant bits(VL) operand3 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[d+r, VL];
    for e = 0 to elements-1
        constant bits(16) element1 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, e, 16];
        constant bits(16) element2 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, e, 16];
        constant bits(16) element3 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand3, e, 16];
        constant bits(16) maxelement = <a link="impl-shared.BFMaxNum.3" file="shared_pseudocode.xml" hover="function: bits(N) BFMaxNum(bits(N) op1, bits(N) op2, FPCR_Type fpcr)">BFMaxNum</a>(element1, element3, FPCR);
        <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[results[r], e, 16] = <a link="impl-shared.BFMinNum.3" file="shared_pseudocode.xml" hover="function: bits(N) BFMinNum(bits(N) op1, bits(N) op2, FPCR_Type fpcr)">BFMinNum</a>(maxelement, element2, FPCR);

for r = 0 to nreg-1
    <a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[d+r, VL] = results[r];</pstext></ps>
  </ps_section>
</instructionsection>
