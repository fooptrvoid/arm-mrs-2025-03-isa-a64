<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="LDBFMAXNM" title="LDBFMAXNM, LDBFMAXNMA, LDBFMAXNMAL, LDBFMAXNML -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="advsimd"/>
    <docvar key="isa" value="A64"/>
    <docvar key="reg-type" value="16-reg"/>
  </docvars>
  <heading>LDBFMAXNM, LDBFMAXNMA, LDBFMAXNMAL, LDBFMAXNML</heading>
  <desc>
    <brief>
      <para>BFloat16 floating-point atomic maximum number in memory</para>
    </brief>
    <authored>
      <para>This instruction atomically loads a 16-bit value from memory,
computes the BFloat16 maximum number with the value held in a register,
and stores the result back to memory.
The value initially loaded from memory is returned in the destination register.</para>
      <list type="unordered">
        <listitem>
          <content>
            <instruction>LDBFMAXNMA</instruction> and
  <instruction>LDBFMAXNMAL</instruction> load
  from memory with acquire semantics.</content>
        </listitem>
        <listitem>
          <content>
            <instruction>LDBFMAXNML</instruction> and
  <instruction>LDBFMAXNMAL</instruction> store
  to memory with release semantics.</content>
        </listitem>
        <listitem>
          <content>
            <instruction>LDBFMAXNM</instruction> has neither acquire nor release semantics.</content>
        </listitem>
      </list>
      <para>This instruction:</para>
      <list type="unordered">
        <listitem>
          <content>Disables alternative floating-point behaviors, as if <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.AH
  is 0.</content>
        </listitem>
        <listitem>
          <content>Generates only the default NaN, as if <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.DN
  is 1.</content>
        </listitem>
        <listitem>
          <content>Does not modify the cumulative <register_link id="AArch64-fpsr.xml" state="AArch64">FPSR</register_link>
  exception bits (IDC, IXC, UFC, OFC, DZC, and IOC).</content>
        </listitem>
        <listitem>
          <content>Disables trapped floating-point exceptions, as if the
  <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link> trap enable bits
  (IDE, IXE, UFE, OFE, DZE, and IOE) are all zero.</content>
        </listitem>
      </list>
      <para>For more information about memory ordering semantics, see <xref linkend="ARMARM_BEIHCHEF">Load-Acquire, Store-Release</xref>.</para>
      <para>For information about addressing modes, see
<xref linkend="ARMARM_CHDIIIBB">Load/Store addressing modes</xref>.</para>
    </authored>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="Floating-point" oneof="1" id="iclass_floating_point" no_encodings="4" isa="A64">
      <docvars>
        <docvar key="instr-class" value="advsimd"/>
        <docvar key="isa" value="A64"/>
        <docvar key="reg-type" value="16-reg"/>
      </docvars>
      <iclassintro count="4"/>
      <arch_variants>
        <arch_variant feature="FEAT_LSFE" name="ARMv9.6"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.ldst.memop.LDBFMAXNM_16" tworows="1">
        <box hibit="31" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="29" width="3" settings="3">
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="26" name="VR" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="25" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="23" width="1" name="A" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="22" width="1" name="R" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Rs" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" name="o3" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="14" width="3" name="opc" usename="1" settings="3" psbits="xxx">
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="11" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Rt" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="LDBFMAXNM_16" oneofinclass="4" oneof="4" label="No memory ordering" bitdiffs="A == 0 &amp;&amp; R == 0">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="LDBFMAXNM"/>
          <docvar key="instr-class" value="advsimd"/>
          <docvar key="reg-type" value="16-reg"/>
        </docvars>
        <box hibit="23" width="1" name="A">
          <c>0</c>
        </box>
        <box hibit="22" width="1" name="R">
          <c>0</c>
        </box>
        <asmtemplate><text>LDBFMAXNM  </text><a hover="Is the 16-bit name of the SIMD&amp;amp;FP register holding the data value to be operated on with the contents of the memory location, encoded in the &quot;Rs&quot; field." link="fpfar_hs">&lt;Hs&gt;</a><text>, </text><a hover="Is the 16-bit name of the SIMD&amp;amp;FP register to be loaded, encoded in the &quot;Rt&quot; field." link="fpfar_ht">&lt;Ht&gt;</a><text>, [</text><a hover="Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the &quot;Rn&quot; field." link="XnSP_option">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <encoding name="LDBFMAXNMA_16" oneofinclass="4" oneof="4" label="Acquire" bitdiffs="A == 1 &amp;&amp; R == 0">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="LDBFMAXNMA"/>
          <docvar key="instr-class" value="advsimd"/>
          <docvar key="reg-type" value="16-reg"/>
        </docvars>
        <box hibit="23" width="1" name="A">
          <c>1</c>
        </box>
        <box hibit="22" width="1" name="R">
          <c>0</c>
        </box>
        <asmtemplate><text>LDBFMAXNMA  </text><a hover="Is the 16-bit name of the SIMD&amp;amp;FP register holding the data value to be operated on with the contents of the memory location, encoded in the &quot;Rs&quot; field." link="fpfar_hs">&lt;Hs&gt;</a><text>, </text><a hover="Is the 16-bit name of the SIMD&amp;amp;FP register to be loaded, encoded in the &quot;Rt&quot; field." link="fpfar_ht">&lt;Ht&gt;</a><text>, [</text><a hover="Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the &quot;Rn&quot; field." link="XnSP_option">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <encoding name="LDBFMAXNMAL_16" oneofinclass="4" oneof="4" label="Acquire-release" bitdiffs="A == 1 &amp;&amp; R == 1">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="LDBFMAXNMAL"/>
          <docvar key="instr-class" value="advsimd"/>
          <docvar key="reg-type" value="16-reg"/>
        </docvars>
        <box hibit="23" width="1" name="A">
          <c>1</c>
        </box>
        <box hibit="22" width="1" name="R">
          <c>1</c>
        </box>
        <asmtemplate><text>LDBFMAXNMAL  </text><a hover="Is the 16-bit name of the SIMD&amp;amp;FP register holding the data value to be operated on with the contents of the memory location, encoded in the &quot;Rs&quot; field." link="fpfar_hs">&lt;Hs&gt;</a><text>, </text><a hover="Is the 16-bit name of the SIMD&amp;amp;FP register to be loaded, encoded in the &quot;Rt&quot; field." link="fpfar_ht">&lt;Ht&gt;</a><text>, [</text><a hover="Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the &quot;Rn&quot; field." link="XnSP_option">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <encoding name="LDBFMAXNML_16" oneofinclass="4" oneof="4" label="Release" bitdiffs="A == 0 &amp;&amp; R == 1">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="LDBFMAXNML"/>
          <docvar key="instr-class" value="advsimd"/>
          <docvar key="reg-type" value="16-reg"/>
        </docvars>
        <box hibit="23" width="1" name="A">
          <c>0</c>
        </box>
        <box hibit="22" width="1" name="R">
          <c>1</c>
        </box>
        <asmtemplate><text>LDBFMAXNML  </text><a hover="Is the 16-bit name of the SIMD&amp;amp;FP register holding the data value to be operated on with the contents of the memory location, encoded in the &quot;Rs&quot; field." link="fpfar_hs">&lt;Hs&gt;</a><text>, </text><a hover="Is the 16-bit name of the SIMD&amp;amp;FP register to be loaded, encoded in the &quot;Rt&quot; field." link="fpfar_ht">&lt;Ht&gt;</a><text>, [</text><a hover="Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the &quot;Rn&quot; field." link="XnSP_option">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.ldst.memop.LDBFMAXNM_16" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_LSFE) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);

constant integer t = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rt);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
constant integer s = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rs);

constant integer datasize = 16;
constant boolean acquire = A == '1';
constant boolean release = R == '1';
constant boolean tagchecked = n != 31;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="LDBFMAXNM_16, LDBFMAXNMA_16, LDBFMAXNMAL_16, LDBFMAXNML_16" symboldefcount="1">
      <symbol link="fpfar_hs">&lt;Hs&gt;</symbol>
      <account encodedin="Rs">
        <intro>
          <para>Is the 16-bit name of the SIMD&amp;FP register holding the data value to be operated on with the contents of the memory location, encoded in the "Rs" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="LDBFMAXNM_16, LDBFMAXNMA_16, LDBFMAXNMAL_16, LDBFMAXNML_16" symboldefcount="1">
      <symbol link="fpfar_ht">&lt;Ht&gt;</symbol>
      <account encodedin="Rt">
        <intro>
          <para>Is the 16-bit name of the SIMD&amp;FP register to be loaded, encoded in the "Rt" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="LDBFMAXNM_16, LDBFMAXNMA_16, LDBFMAXNMAL_16, LDBFMAXNML_16" symboldefcount="1">
      <symbol link="XnSP_option">&lt;Xn|SP&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.ldst.memop.LDBFMAXNM_16" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckFPEnabled64.0" file="shared_pseudocode.xml" hover="function: CheckFPEnabled64()">CheckFPEnabled64</a>();
bits(64) address;
bits(datasize) value;
bits(datasize) data;
constant <a link="AccessDescriptor" file="shared_pseudocode.xml" hover="type AccessDescriptor is ( AccessType acctype, bits(2) el, SecurityState ss, boolean acqsc, boolean acqpc, boolean relsc, boolean limitedordered, boolean exclusive, boolean atomicop, MemAtomicOp modop, boolean nontemporal, boolean read, boolean write, CacheOp cacheop, CacheOpScope opscope, CacheType cachetype, boolean pan, boolean transactional, boolean nonfault, boolean firstfault, boolean first, boolean contiguous, boolean streamingsve, boolean ls64, boolean withstatus, boolean mops, boolean rcw, boolean rcws, boolean toplevel, VARange varange, boolean a32lsmd, boolean tagchecked, boolean tagaccess, boolean stzgm, boolean ispair, boolean highestaddressfirst, MPAMinfo mpam )">AccessDescriptor</a> accdesc = <a link="impl-shared.CreateAccDescFPAtomicOp.4" file="shared_pseudocode.xml" hover="function: AccessDescriptor CreateAccDescFPAtomicOp(MemAtomicOp modop, boolean acquire, boolean release, boolean tagchecked)">CreateAccDescFPAtomicOp</a>(<a link="MemAtomicOp_BFMAXNM" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp { MemAtomicOp_GCSSS1, MemAtomicOp_ADD, MemAtomicOp_BIC, MemAtomicOp_EOR, MemAtomicOp_ORR, MemAtomicOp_SMAX, MemAtomicOp_SMIN, MemAtomicOp_UMAX, MemAtomicOp_UMIN, MemAtomicOp_SWP, MemAtomicOp_CAS, MemAtomicOp_FPADD, MemAtomicOp_FPMAX, MemAtomicOp_FPMIN, MemAtomicOp_FPMAXNM, MemAtomicOp_FPMINNM, MemAtomicOp_BFADD, MemAtomicOp_BFMAX, MemAtomicOp_BFMIN, MemAtomicOp_BFMAXNM, MemAtomicOp_BFMINNM }">MemAtomicOp_BFMAXNM</a>, acquire,
                                                            release, tagchecked);

value = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[s, datasize];
if n == 31 then
    <a link="impl-aarch64.CheckSPAlignment.0" file="shared_pseudocode.xml" hover="function: CheckSPAlignment()">CheckSPAlignment</a>();
    address = <a link="impl-aarch64.SP.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) SP[integer width]">SP</a>[64];
else
    address = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[n, 64];

constant bits(datasize) comparevalue = bits(datasize) UNKNOWN; // Irrelevant when not executing CAS
data = <a link="impl-aarch64.MemAtomic.4" file="shared_pseudocode.xml" hover="function: bits(size) MemAtomic(bits(64) address, bits(size) cmpoperand, bits(size) operand, AccessDescriptor accdesc_in)">MemAtomic</a>(address, comparevalue, value, accdesc);

<a link="impl-aarch64.V.write.2" file="shared_pseudocode.xml" hover="accessor: V[integer n, ESize width] = bits(width) value">V</a>[t, datasize] = data;</pstext></ps>
  </ps_section>
</instructionsection>
