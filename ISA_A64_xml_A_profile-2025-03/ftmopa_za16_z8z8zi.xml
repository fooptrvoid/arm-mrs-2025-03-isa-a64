<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="ftmopa_za16_z8z8zi" title="FTMOPA (widening, 2-way, FP8 to FP16) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="mortlach2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="FTMOPA"/>
  </docvars>
  <heading>FTMOPA (widening, 2-way, FP8 to FP16)</heading>
  <desc>
    <brief>
      <para>8-bit floating-point sparse sum of two outer products, accumulating</para>
    </brief>
    <authored>
      <para>This instruction generates 8-bit floating-point sum of outer
products by multiplying the 2-in-4 selected elements from the
dense sub-matrices in the two first source vectors with the corresponding
elements of the compressed sparse sub-matrix in the second source vector
and accumulates the results to the corresponding elements of
a 16-bit element ZA tile.</para>
      <para>The sum of outer products is generated by multiplying the selected 2-in-4 8-bit floating-point
values from each overlapping 16-bit containers of the two SVL<sub>H</sub>×2 sub-matrices in
the first source vectors by the two 8-bit floating point
values from the corresponding 16-bit container of
the 2×SVL<sub>H</sub> sub-matrix in the second source vector.
The two selected elements from each overlapping 16-bit containers of
the first source vectors correspond to 2-in-4 elements of
rows of two SVL<sub>H</sub>×2 sub-matrices. Each 16-bit container of the
second source vector holds 2 elements of columns of a compressed
2×SVL<sub>H</sub> sub-matrix.</para>
      <para>The 2-in-4 8-bit floating values from overlapping 16-bit
containers of the first source vectors are selected by
4-bit control in the indexed segment of the control vector register.
If the control bit corresponding
to an element in the first source vectors is 0, the element is discarded
and does not contribute to the sum of products result. If more than two bits
of the 4-bit control corresponding to 16-bit containers of the first source vectors are 1,
only the elements corresponding to the least two significant bits are selected.</para>
      <para>The instruction widens the selected elements of sub-matrices of 8-bit floating-point
values held in the first source vectors to half-precision
values and multiplies them by the corresponding widened elements of
sub-matrix of 8-bit floating-point values in the second source vector
to half-precision values. The resulting SVL<sub>H</sub>×SVL<sub>H</sub>
half-precision sum of outer products is scaled by 2<sup>-UInt(FPMR.LSCALE[3:0])</sup>, before being destructively
added to the half-precision destination tile.
This is equivalent to performing a downscaled 2-way dot product and accumulate to
each of the destination tile elements.</para>
      <para>The 8-bit floating-point encoding format for the elements of the first source vector
and the second source vector is selected by <asm-code>FPMR.F8S1</asm-code> and <asm-code>FPMR.F8S2</asm-code>
respectively.</para>
      <para>This instruction is unpredicated.</para>
    </authored>
    <sm_policy>SM_1_only</sm_policy>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="SME2" oneof="1" id="iclass_sme2" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="FTMOPA"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME_TMOP &amp;&amp; FEAT_SME_F8F16" name="FEAT_SME_TMOP &amp;&amp; FEAT_SME_F8F16"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach2_ss_prod.mortlach_f8f16_2in4ss_prod.ftmopa_za16_z8z8zi_b2x1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Zm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="14" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="13" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="12" width="1" name="K" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="11" width="2" name="Zk" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="9" width="4" name="Zn" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="5" width="2" name="i2" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="3" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="2" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="1" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="0" width="1" name="ZAda" usename="1">
          <c colspan="1"/>
        </box>
      </regdiagram>
      <encoding name="ftmopa_za16_z8z8zi_b2x1" oneofinclass="1" oneof="1" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FTMOPA"/>
          <docvar key="instr-class" value="mortlach2"/>
        </docvars>
        <asmtemplate><text>FTMOPA  </text><a hover="For the &quot;Half-precision&quot; variant: is the name of the ZA tile ZA0-ZA1, encoded in the &quot;ZAda&quot; field." link="ZAda__3">&lt;ZAda&gt;</a><text>.H, { </text><a hover="Is the name of the first scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 2." link="Zn1__2">&lt;Zn1&gt;</a><text>.B-</text><a hover="Is the name of the second scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 2 plus 1." link="Zn2__2">&lt;Zn2&gt;</a><text>.B }, </text><a hover="Is the name of the second source scalable vector register, encoded in the &quot;Zm&quot; field." link="Zm">&lt;Zm&gt;</a><text>.B, </text><a hover="Is the name of the control vector register Z20-Z23 or Z28-Z31, encoded in the &quot;K:Zk&quot; fields." link="Zk__2">&lt;Zk&gt;</a><text>[</text><a hover="Is the control segment index, in the range 0 to 3, encoded in the &quot;i2&quot; field." link="index_i2_control_seg_idx">&lt;index&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach2_ss_prod.mortlach_f8f16_2in4ss_prod.ftmopa_za16_z8z8zi_b2x1" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME_TMOP) || !IsFeatureImplemented(FEAT_SME_F8F16) then
    <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn:'0');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer k = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('1':K:'1':Zk);
constant integer index = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i2);
constant integer da = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(ZAda);</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="ftmopa_za16_z8z8zi_b2x1" symboldefcount="1">
      <symbol link="ZAda__3">&lt;ZAda&gt;</symbol>
      <account encodedin="ZAda">
        <intro>
          <para>Is the name of the ZA tile ZA0-ZA1, encoded in the "ZAda" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="ftmopa_za16_z8z8zi_b2x1" symboldefcount="1">
      <symbol link="Zn1__2">&lt;Zn1&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the first scalable vector register of the first source multi-vector group, encoded as "Zn" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="ftmopa_za16_z8z8zi_b2x1" symboldefcount="1">
      <symbol link="Zn2__2">&lt;Zn2&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the second scalable vector register of the first source multi-vector group, encoded as "Zn" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="ftmopa_za16_z8z8zi_b2x1" symboldefcount="1">
      <symbol link="Zm">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the second source scalable vector register, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="ftmopa_za16_z8z8zi_b2x1" symboldefcount="1">
      <symbol link="Zk__2">&lt;Zk&gt;</symbol>
      <account encodedin="K:Zk">
        <intro>
          <para>Is the name of the control vector register Z20-Z23 or Z28-Z31, encoded in the "K:Zk" fields.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="ftmopa_za16_z8z8zi_b2x1" symboldefcount="1">
      <symbol link="index_i2_control_seg_idx">&lt;index&gt;</symbol>
      <account encodedin="i2">
        <intro>
          <para>Is the control segment index, in the range 0 to 3, encoded in the "i2" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sme.mortlach2_ss_prod.mortlach_f8f16_2in4ss_prod.ftmopa_za16_z8z8zi_b2x1" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckFPMREnabled.0" file="shared_pseudocode.xml" hover="function: CheckFPMREnabled()">CheckFPMREnabled</a>();
<a link="impl-aarch64.CheckStreamingSVEAndZAEnabled.0" file="shared_pseudocode.xml" hover="function: CheckStreamingSVEAndZAEnabled()">CheckStreamingSVEAndZAEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer dim = VL DIV 16;
constant integer csize = VL DIV 4;
constant bits(VL) op2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m, VL];
constant bits(VL) op3 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[k, VL];
constant bits(csize) ctrl = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[op3, index, csize];
constant bits(dim*dim*16) op4 = <a link="impl-aarch64.ZAtile.read.3" file="shared_pseudocode.xml" hover="accessor: bits(width) ZAtile[integer tile, ESize esize, integer width]">ZAtile</a>[da, 16, dim*dim*16];
bits(dim*dim*16) result;

for row = 0 to dim-1
    for col = 0 to dim-1
        integer i = 0;
        bits(16) rowop = <a link="impl-shared.Zeros.1" file="shared_pseudocode.xml" hover="function: bits(N) Zeros(integer N)">Zeros</a>(16);
        bits(16) colop = <a link="impl-shared.Zeros.1" file="shared_pseudocode.xml" hover="function: bits(N) Zeros(integer N)">Zeros</a>(16);
        for r = 0 to 1
            constant bits(VL) op1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[n+r, VL];
            for e = 0 to 1
                if i &lt; 2 &amp;&amp; <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[ctrl, 4*col + 2*r + e, 1] == '1' then
                    <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[rowop, i, 8] = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[op1, 2*row + e, 8];
                    i = i + 1;
        for j = 0 to 1
            <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[colop, j, 8] = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[op2, 2*col + j, 8];
        constant bits(16) sum = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[op4, row*dim+col, 16];
        <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, row*dim+col, 16] = <a link="impl-shared.FP8DotAddFP.5" file="shared_pseudocode.xml" hover="function: bits(M) FP8DotAddFP(bits(M) addend, bits(N) op1, bits(N) op2, FPCR_Type fpcr, FPMR_Type fpmr)">FP8DotAddFP</a>(sum, rowop, colop, FPCR, FPMR);
<a link="impl-aarch64.ZAtile.write.3" file="shared_pseudocode.xml" hover="accessor: ZAtile[integer tile, ESize esize, integer width] = bits(width) value">ZAtile</a>[da, 16, dim*dim*16] = result;</pstext></ps>
  </ps_section>
</instructionsection>
