<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="fdot_za_zzw" title="FDOT (2-way, multiple vectors, FP16 to FP32) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="mortlach2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="FDOT"/>
  </docvars>
  <heading>FDOT (2-way, multiple vectors, FP16 to FP32)</heading>
  <desc>
    <brief>
      <para>Multi-vector half-precision dot-product</para>
    </brief>
    <authored>
      <para>This instruction computes the fused sum-of-products of a pair of half-precision values
held in the corresponding 32-bit elements of the two or four first and second source vectors,
without intermediate rounding. The single-precision sum-of-products are destructively added
to the corresponding single-precision elements of the ZA single-vector groups.</para>
      <para>The single-vector
group within each half of or each quarter of the ZA array is selected by the sum
of the vector select register and offset, modulo half or quarter the number of ZA array vectors.</para>
      <para>The <syntax>vector group</syntax> symbol, <syntax>VGx2</syntax> or <syntax>VGx4</syntax>, indicates that
the ZA operand consists of two or four ZA single-vector
groups
respectively. The vector group symbol is preferred
for disassembly, but optional in assembler source code.</para>
      <para>This instruction follows SME ZA-targeting floating-point behaviors.</para>
      <para>This instruction is unpredicated.</para>
    </authored>
    <predicated>False</predicated>
    <sm_policy>SM_1_only</sm_policy>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <classesintro count="2">
      <txt>It has encodings from 2 classes:</txt>
      <a href="#iclass_two_za_single_vectors">Two ZA single-vectors</a>
      <txt> and </txt>
      <a href="#iclass_four_za_single_vectors">Four ZA single-vectors</a>
    </classesintro>
    <iclass name="Two ZA single-vectors" oneof="2" id="iclass_two_za_single_vectors" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="FDOT"/>
        <docvar key="sme-multireg" value="sme-vgx2-single"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2" name="ARMv9.3"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_array_2a.mortlach_multi2_z_za_fpdot_mm.fdot_za_zzw_2x2" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="22" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="4" name="Zm" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="16" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="4" name="Zn" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="5" width="2" name="opc" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="3" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="2" width="3" name="off3" usename="1">
          <c colspan="3"/>
        </box>
      </regdiagram>
      <encoding name="fdot_za_zzw_2x2" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FDOT"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="sme-multireg" value="sme-vgx2-single"/>
        </docvars>
        <asmtemplate><text>FDOT  ZA.S[</text><a hover="Is the 32-bit name of the vector select register W8-W11, encoded in the &quot;Rv&quot; field." link="Wv">&lt;Wv&gt;</a><text>, </text><a hover="Is the vector select offset, in the range 0 to 7, encoded in the &quot;off3&quot; field." link="offs">&lt;offs&gt;</a><text>{, VGx2}], { </text><a hover="For the &quot;Two ZA single-vectors&quot; variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 2." link="Zn1__2">&lt;Zn1&gt;</a><text>.H-</text><a hover="Is the name of the second scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 2 plus 1." link="Zn2__2">&lt;Zn2&gt;</a><text>.H }, { </text><a hover="For the &quot;Two ZA single-vectors&quot; variant: is the name of the first scalable vector register of the second source multi-vector group, encoded as &quot;Zm&quot; times 2." link="Zm1__3">&lt;Zm1&gt;</a><text>.H-</text><a hover="Is the name of the second scalable vector register of the second source multi-vector group, encoded as &quot;Zm&quot; times 2 plus 1." link="Zm2__2">&lt;Zm2&gt;</a><text>.H }</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_array_2a.mortlach_multi2_z_za_fpdot_mm.fdot_za_zzw_2x2" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn:'0');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm:'0');
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(off3);
constant integer nreg = 2;</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Four ZA single-vectors" oneof="2" id="iclass_four_za_single_vectors" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="FDOT"/>
        <docvar key="sme-multireg" value="sme-vgx4-single"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2" name="ARMv9.3"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_array_2b.mortlach_multi4_z_za_fpdot_mm.fdot_za_zzw_4x4" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="22" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="3" name="Zm" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="17" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="16" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="3" name="Zn" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="6" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="5" width="2" name="opc" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="3" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="2" width="3" name="off3" usename="1">
          <c colspan="3"/>
        </box>
      </regdiagram>
      <encoding name="fdot_za_zzw_4x4" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FDOT"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="sme-multireg" value="sme-vgx4-single"/>
        </docvars>
        <asmtemplate><text>FDOT  ZA.S[</text><a hover="Is the 32-bit name of the vector select register W8-W11, encoded in the &quot;Rv&quot; field." link="Wv">&lt;Wv&gt;</a><text>, </text><a hover="Is the vector select offset, in the range 0 to 7, encoded in the &quot;off3&quot; field." link="offs">&lt;offs&gt;</a><text>{, VGx4}], { </text><a hover="For the &quot;Four ZA single-vectors&quot; variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 4." link="Zn1__3">&lt;Zn1&gt;</a><text>.H-</text><a hover="Is the name of the fourth scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 4 plus 3." link="Zn4__2">&lt;Zn4&gt;</a><text>.H }, { </text><a hover="For the &quot;Four ZA single-vectors&quot; variant: is the name of the first scalable vector register of the second source multi-vector group, encoded as &quot;Zm&quot; times 4." link="Zm1__4">&lt;Zm1&gt;</a><text>.H-</text><a hover="Is the name of the fourth scalable vector register of the second source multi-vector group, encoded as &quot;Zm&quot; times 4 plus 3." link="Zm4__2">&lt;Zm4&gt;</a><text>.H }</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_array_2b.mortlach_multi4_z_za_fpdot_mm.fdot_za_zzw_4x4" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn:'00');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm:'00');
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(off3);
constant integer nreg = 4;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="fdot_za_zzw_2x2, fdot_za_zzw_4x4" symboldefcount="1">
      <symbol link="Wv">&lt;Wv&gt;</symbol>
      <account encodedin="Rv">
        <intro>
          <para>Is the 32-bit name of the vector select register W8-W11, encoded in the "Rv" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fdot_za_zzw_2x2, fdot_za_zzw_4x4" symboldefcount="1">
      <symbol link="offs">&lt;offs&gt;</symbol>
      <account encodedin="off3">
        <intro>
          <para>Is the vector select offset, in the range 0 to 7, encoded in the "off3" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fdot_za_zzw_2x2" symboldefcount="1">
      <symbol link="Zn1__2">&lt;Zn1&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>For the "Two ZA single-vectors" variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as "Zn" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fdot_za_zzw_4x4" symboldefcount="2">
      <symbol link="Zn1__3">&lt;Zn1&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>For the "Four ZA single-vectors" variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as "Zn" times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fdot_za_zzw_2x2" symboldefcount="1">
      <symbol link="Zn2__2">&lt;Zn2&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the second scalable vector register of the first source multi-vector group, encoded as "Zn" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fdot_za_zzw_2x2" symboldefcount="1">
      <symbol link="Zm1__3">&lt;Zm1&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>For the "Two ZA single-vectors" variant: is the name of the first scalable vector register of the second source multi-vector group, encoded as "Zm" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fdot_za_zzw_4x4" symboldefcount="2">
      <symbol link="Zm1__4">&lt;Zm1&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>For the "Four ZA single-vectors" variant: is the name of the first scalable vector register of the second source multi-vector group, encoded as "Zm" times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fdot_za_zzw_2x2" symboldefcount="1">
      <symbol link="Zm2__2">&lt;Zm2&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the second scalable vector register of the second source multi-vector group, encoded as "Zm" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fdot_za_zzw_4x4" symboldefcount="1">
      <symbol link="Zn4__2">&lt;Zn4&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the fourth scalable vector register of the first source multi-vector group, encoded as "Zn" times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fdot_za_zzw_4x4" symboldefcount="1">
      <symbol link="Zm4__2">&lt;Zm4&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the fourth scalable vector register of the second source multi-vector group, encoded as "Zm" times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sme.mortlach_multi_array_2a.mortlach_multi2_z_za_fpdot_mm.fdot_za_zzw_2x2" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckStreamingSVEAndZAEnabled.0" file="shared_pseudocode.xml" hover="function: CheckStreamingSVEAndZAEnabled()">CheckStreamingSVEAndZAEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer elements = VL DIV 32;
constant integer vectors = VL DIV 8;
constant integer vstride = vectors DIV nreg;
constant bits(32) vbase = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[v, 32];
integer vec = (<a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(vbase) + offset) MOD vstride;
bits(VL) result;

for r = 0 to nreg-1
    constant bits(VL) operand1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[n+r, VL];
    constant bits(VL) operand2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m+r, VL];
    constant bits(VL) operand3 = <a link="impl-aarch64.ZAvector.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) ZAvector[integer index, integer width]">ZAvector</a>[vec, VL];
    for e = 0 to elements-1
        constant bits(16) elt1_a = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, 2 * e + 0, 16];
        constant bits(16) elt1_b = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, 2 * e + 1, 16];
        constant bits(16) elt2_a = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, 2 * e + 0, 16];
        constant bits(16) elt2_b = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, 2 * e + 1, 16];
        bits(32) sum = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand3, e, 32];
        sum = <a link="impl-shared.FPDotAdd_ZA.6" file="shared_pseudocode.xml" hover="function: bits(32) FPDotAdd_ZA(bits(32) addend, bits(16) op1_a, bits(16) op1_b, bits(16) op2_a, bits(16) op2_b, FPCR_Type fpcr_in)">FPDotAdd_ZA</a>(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR);
        <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, e, 32] = sum;
    <a link="impl-aarch64.ZAvector.write.2" file="shared_pseudocode.xml" hover="accessor: ZAvector[integer index, integer width] = bits(width) value">ZAvector</a>[vec, VL] = result;
    vec = vec + vstride;</pstext></ps>
  </ps_section>
</instructionsection>
