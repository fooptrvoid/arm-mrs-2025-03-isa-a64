<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="cmpls_cmpeq_p_p_zz" title="CMPLS (vectors) -- A64" type="alias">
  <docvars>
    <docvar key="alias_mnemonic" value="CMPLS"/>
    <docvar key="instr-class" value="sve"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="CMPHS"/>
    <docvar key="sve-compare-type" value="hs"/>
  </docvars>
  <heading>CMPLS (vectors)</heading>
  <desc>
    <brief>
      <para>Compare unsigned lower or same as vector, setting the condition flags</para>
    </brief>
    <authored>
      <para>Compare active unsigned integer elements in the
first source vector being lower than or same as corresponding unsigned elements in the second source vector, and
place the boolean results of the 
comparison in the corresponding elements of the destination
predicate.  Inactive elements in the destination predicate register are set to zero. Sets the First (N), None (Z), !Last (C)
condition flags based on the predicate result,
and the V flag to zero.</para>
    </authored>
    <affected_by_sme output="predicate register or NZCV condition flags"/>
    <predicated>True</predicated>
    <uses_dit condition="FEAT_SVE2 is implemented or FEAT_SME is implemented">True</uses_dit>
  </desc>
  <operationalnotes>
    <operationalnote>
      <operationalnote_content>
        <para>If PSTATE.DIT is 1:</para>
        <list type="unordered">
          <listitem>
            <content>The execution time of this instruction is independent of:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its operand registers when its governing predicate register contains the same value for each execution.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
          <listitem>
            <content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its operand registers when its governing predicate register contains the same value for each execution.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
        </list>
        <para>If FEAT_SME is implemented and the PE is in Streaming SVE mode, then any subsequent instruction which is dependent on the predicate register or NZCV condition flags written by this instruction might be significantly delayed.</para>
      </operationalnote_content>
    </operationalnote>
  </operationalnotes>
  <aliasto refiform="cmpeq_p_p_zz.xml" iformid="cmpeq_p_p_zz">CMP&lt;cc&gt; (vectors)</aliasto>
  <classes>
    <iclass name="Higher or same" oneof="1" id="iclass_higher_or_same" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="CMPHS"/>
        <docvar key="sve-compare-type" value="hs"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SVE || FEAT_SME" name="FEAT_SVE || FEAT_SME"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_cmpvec.sve_int_cmp_0.cmphs_p_p_zz_.cmpls_p_p_zz_" tworows="1">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="20" width="5" name="Zm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" name="op" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="14" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="13" name="o2" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="12" width="3" name="Pg" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" name="ne" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="3" width="4" name="Pd" usename="1">
          <c colspan="4"/>
        </box>
      </regdiagram>
      <encoding name="cmpls_p_p_zz__cmphs_p_p_zz_" oneofinclass="1" oneof="1" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="CMPHS"/>
          <docvar key="alias_mnemonic" value="CMPLS"/>
          <docvar key="instr-class" value="sve"/>
          <docvar key="sve-compare-type" value="hs"/>
        </docvars>
        <asmtemplate><text>CMPLS  </text><a hover="Is the name of the destination scalable predicate register, encoded in the &quot;Pd&quot; field." link="Pd">&lt;Pd&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__25">&lt;T&gt;</a><text>, </text><a hover="Is the name of the governing scalable predicate register P0-P7, encoded in the &quot;Pg&quot; field." link="Pg">&lt;Pg&gt;</a><text>/Z, </text><a hover="Is the name of the second source scalable vector register, encoded in the &quot;Zm&quot; field." link="Zm">&lt;Zm&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__25">&lt;T&gt;</a><text>, </text><a hover="Is the name of the first source scalable vector register, encoded in the &quot;Zn&quot; field." link="Zn__2">&lt;Zn&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__25">&lt;T&gt;</a></asmtemplate>
        <equivalent_to>
          <asmtemplate><a href="cmpeq_p_p_zz.xml#cmphs_p_p_zz_">CMPHS</a><text>  </text><a hover="Is the name of the destination scalable predicate register, encoded in the &quot;Pd&quot; field." href="cmpeq_p_p_zz.xml#Pd">&lt;Pd&gt;</a><text>.</text><a hover="Is the size specifier, " href="cmpeq_p_p_zz.xml#T__25">&lt;T&gt;</a><text>, </text><a hover="Is the name of the governing scalable predicate register P0-P7, encoded in the &quot;Pg&quot; field." href="cmpeq_p_p_zz.xml#Pg">&lt;Pg&gt;</a><text>/Z, </text><a hover="Is the name of the first source scalable vector register, encoded in the &quot;Zn&quot; field." href="cmpeq_p_p_zz.xml#Zn__2">&lt;Zn&gt;</a><text>.</text><a hover="Is the size specifier, " href="cmpeq_p_p_zz.xml#T__25">&lt;T&gt;</a><text>, </text><a hover="Is the name of the second source scalable vector register, encoded in the &quot;Zm&quot; field." href="cmpeq_p_p_zz.xml#Zm">&lt;Zm&gt;</a><text>.</text><a hover="Is the size specifier, " href="cmpeq_p_p_zz.xml#T__25">&lt;T&gt;</a></asmtemplate>
          <aliascond>Never</aliascond>
        </equivalent_to>
      </encoding>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="cmpls_p_p_zz__cmphs_p_p_zz_" symboldefcount="1">
      <symbol link="Pd">&lt;Pd&gt;</symbol>
      <account encodedin="Pd">
        <intro>
          <para>Is the name of the destination scalable predicate register, encoded in the "Pd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="cmpls_p_p_zz__cmphs_p_p_zz_" symboldefcount="1">
      <symbol link="T__25">&lt;T&gt;</symbol>
      <definition encodedin="size">
        <intro>Is the size specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">size</entry>
                <entry class="symbol">&lt;T&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">00</entry>
                <entry class="symbol">B</entry>
              </row>
              <row>
                <entry class="bitfield">01</entry>
                <entry class="symbol">H</entry>
              </row>
              <row>
                <entry class="bitfield">10</entry>
                <entry class="symbol">S</entry>
              </row>
              <row>
                <entry class="bitfield">11</entry>
                <entry class="symbol">D</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="cmpls_p_p_zz__cmphs_p_p_zz_" symboldefcount="1">
      <symbol link="Pg">&lt;Pg&gt;</symbol>
      <account encodedin="Pg">
        <intro>
          <para>Is the name of the governing scalable predicate register P0-P7, encoded in the "Pg" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="cmpls_p_p_zz__cmphs_p_p_zz_" symboldefcount="1">
      <symbol link="Zm">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the second source scalable vector register, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="cmpls_p_p_zz__cmphs_p_p_zz_" symboldefcount="1">
      <symbol link="Zn__2">&lt;Zn&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the first source scalable vector register, encoded in the "Zn" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
</instructionsection>
