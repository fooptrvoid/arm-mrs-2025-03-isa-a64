<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="smlsl_za_zzi" title="SMLSL (multiple and indexed vector) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="mortlach2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="SMLSL"/>
  </docvars>
  <heading>SMLSL (multiple and indexed vector)</heading>
  <desc>
    <brief>
      <para>Multi-vector signed integer multiply-subtract long by indexed element</para>
    </brief>
    <authored>
      <para>This instruction multiplies each signed 16-bit element
in the one, two, or four first source
vectors with each
signed 16-bit indexed element of the second source vector, widens each product
to 32 bits, and destructively subtracts these values from
the corresponding 32-bit elements of the
ZA double-vector groups.</para>
      <para>The elements within the second source vector are specified using an immediate element index
which selects the same element position within each 128-bit vector segment. The index
range is from 0 to 7.</para>
      <para>The double-vector
group within all of, each half of,
or each quarter of the ZA array is selected by the sum
of the vector select register and offset range, modulo all, half, or quarter the number of ZA array vectors.</para>
      <para>The <syntax>vector group</syntax> symbol, <syntax>VGx2</syntax> or <syntax>VGx4</syntax>, indicates that
the ZA operand consists of two or four ZA double-vector
groups
respectively. The vector group symbol is preferred
for disassembly, but optional in assembler source code.</para>
      <para>This instruction is unpredicated.</para>
    </authored>
    <predicated>False</predicated>
    <uses_dit condition="FEAT_SVE2 is implemented or FEAT_SME is implemented">True</uses_dit>
    <sm_policy>SM_1_only</sm_policy>
  </desc>
  <operationalnotes>
    <operationalnote>
      <operationalnote_content>
        <para>If PSTATE.DIT is 1:</para>
        <list type="unordered">
          <listitem>
            <content>The execution time of this instruction is independent of:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its registers.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
          <listitem>
            <content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its registers.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
        </list>
      </operationalnote_content>
    </operationalnote>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <classesintro count="3">
      <txt>It has encodings from 3 classes:</txt>
      <a href="#iclass_one_za_double_vector">One ZA double-vector</a>
      <txt>, </txt>
      <a href="#iclass_two_za_double_vectors">Two ZA double-vectors</a>
      <txt> and </txt>
      <a href="#iclass_four_za_double_vectors">Four ZA double-vectors</a>
    </classesintro>
    <iclass name="One ZA double-vector" oneof="3" id="iclass_one_za_double_vector" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="SMLSL"/>
        <docvar key="sme-multireg" value="sme-vgx1-double"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2" name="ARMv9.3"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_indexed_1.mortlach_multi1_mla_long_idx.smlsl_za_zzi_1" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="21" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="19" width="4" name="Zm" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="15" width="1" name="i3h" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="11" width="2" name="i3l" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" name="U" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="3" name="S" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="2" width="3" name="off3" usename="1">
          <c colspan="3"/>
        </box>
      </regdiagram>
      <encoding name="smlsl_za_zzi_1" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SMLSL"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="sme-multireg" value="sme-vgx1-double"/>
        </docvars>
        <asmtemplate><text>SMLSL  ZA.S[</text><a hover="Is the 32-bit name of the vector select register W8-W11, encoded in the &quot;Rv&quot; field." link="Wv">&lt;Wv&gt;</a><text>, </text><a hover="For the &quot;One ZA double-vector&quot; variant: is the first vector select offset, encoded as &quot;off3&quot; field times 2." link="offs1">&lt;offs1&gt;</a><text>:</text><a hover="For the &quot;One ZA double-vector&quot; variant: is the second vector select offset, encoded as &quot;off3&quot; field times 2 plus 1." link="offs2">&lt;offs2&gt;</a><text>], </text><a hover="Is the name of the first source scalable vector register, encoded in the &quot;Zn&quot; field." link="Zn__2">&lt;Zn&gt;</a><text>.H, </text><a hover="For the &quot;Double-precision&quot; variant: is the name of the second source scalable vector register Z0-Z15, encoded in the &quot;Zm&quot; field." link="Zm__2">&lt;Zm&gt;</a><text>.H[</text><a hover="For the &quot;Four ZA quad-vectors of 64-bit elements&quot;, &quot;One ZA quad-vector of 64-bit elements&quot;, and &quot;Two ZA quad-vectors of 64-bit elements&quot; variants: is the element index, in the range 0 to 7, encoded in the &quot;i3h:i3l&quot; fields." link="index__18">&lt;index&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_indexed_1.mortlach_multi1_mla_long_idx.smlsl_za_zzi_1" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 32;
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('0':Zm);
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(off3:'0');
constant integer index = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i3h:i3l);
constant integer nreg = 1;</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Two ZA double-vectors" oneof="3" id="iclass_two_za_double_vectors" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="SMLSL"/>
        <docvar key="sme-multireg" value="sme-vgx2-double"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2" name="ARMv9.3"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_indexed_2.mortlach_multi2_mla_long_idx.smlsl_za_zzi_2xi" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="21" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="19" width="4" name="Zm" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="15" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="11" width="2" name="i3h" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="9" width="4" name="Zn" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="5" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="4" name="U" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="3" name="S" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="2" width="1" name="i3l" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="1" width="2" name="off2" usename="1">
          <c colspan="2"/>
        </box>
      </regdiagram>
      <encoding name="smlsl_za_zzi_2xi" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SMLSL"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="sme-multireg" value="sme-vgx2-double"/>
        </docvars>
        <asmtemplate><text>SMLSL  ZA.S[</text><a hover="Is the 32-bit name of the vector select register W8-W11, encoded in the &quot;Rv&quot; field." link="Wv">&lt;Wv&gt;</a><text>, </text><a hover="For the &quot;Four ZA double-vectors&quot; and &quot;Two ZA double-vectors&quot; variants: is the first vector select offset, encoded as &quot;off2&quot; field times 2." link="offs1__2">&lt;offs1&gt;</a><text>:</text><a hover="For the &quot;Four ZA double-vectors&quot; and &quot;Two ZA double-vectors&quot; variants: is the second vector select offset, encoded as &quot;off2&quot; field times 2 plus 1." link="offs2__2">&lt;offs2&gt;</a><text>{, VGx2}], { </text><a hover="For the &quot;Two ZA double-vectors&quot; variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 2." link="Zn1__2">&lt;Zn1&gt;</a><text>.H-</text><a hover="Is the name of the second scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 2 plus 1." link="Zn2__2">&lt;Zn2&gt;</a><text>.H }, </text><a hover="For the &quot;Double-precision&quot; variant: is the name of the second source scalable vector register Z0-Z15, encoded in the &quot;Zm&quot; field." link="Zm__2">&lt;Zm&gt;</a><text>.H[</text><a hover="For the &quot;Four ZA quad-vectors of 64-bit elements&quot;, &quot;One ZA quad-vector of 64-bit elements&quot;, and &quot;Two ZA quad-vectors of 64-bit elements&quot; variants: is the element index, in the range 0 to 7, encoded in the &quot;i3h:i3l&quot; fields." link="index__18">&lt;index&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_indexed_2.mortlach_multi2_mla_long_idx.smlsl_za_zzi_2xi" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 32;
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn:'0');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('0':Zm);
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(off2:'0');
constant integer index = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i3h:i3l);
constant integer nreg = 2;</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Four ZA double-vectors" oneof="3" id="iclass_four_za_double_vectors" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="SMLSL"/>
        <docvar key="sme-multireg" value="sme-vgx4-double"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2" name="ARMv9.3"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_indexed_3.mortlach_multi4_mla_long_idx.smlsl_za_zzi_4xi" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="21" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="19" width="4" name="Zm" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="15" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="11" width="2" name="i3h" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="9" width="3" name="Zn" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="6" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="4" name="U" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="3" name="S" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="2" width="1" name="i3l" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="1" width="2" name="off2" usename="1">
          <c colspan="2"/>
        </box>
      </regdiagram>
      <encoding name="smlsl_za_zzi_4xi" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SMLSL"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="sme-multireg" value="sme-vgx4-double"/>
        </docvars>
        <asmtemplate><text>SMLSL  ZA.S[</text><a hover="Is the 32-bit name of the vector select register W8-W11, encoded in the &quot;Rv&quot; field." link="Wv">&lt;Wv&gt;</a><text>, </text><a hover="For the &quot;Four ZA double-vectors&quot; and &quot;Two ZA double-vectors&quot; variants: is the first vector select offset, encoded as &quot;off2&quot; field times 2." link="offs1__2">&lt;offs1&gt;</a><text>:</text><a hover="For the &quot;Four ZA double-vectors&quot; and &quot;Two ZA double-vectors&quot; variants: is the second vector select offset, encoded as &quot;off2&quot; field times 2 plus 1." link="offs2__2">&lt;offs2&gt;</a><text>{, VGx4}], { </text><a hover="For the &quot;Four ZA double-vectors&quot; variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 4." link="Zn1__3">&lt;Zn1&gt;</a><text>.H-</text><a hover="Is the name of the fourth scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 4 plus 3." link="Zn4__2">&lt;Zn4&gt;</a><text>.H }, </text><a hover="For the &quot;Double-precision&quot; variant: is the name of the second source scalable vector register Z0-Z15, encoded in the &quot;Zm&quot; field." link="Zm__2">&lt;Zm&gt;</a><text>.H[</text><a hover="For the &quot;Four ZA quad-vectors of 64-bit elements&quot;, &quot;One ZA quad-vector of 64-bit elements&quot;, and &quot;Two ZA quad-vectors of 64-bit elements&quot; variants: is the element index, in the range 0 to 7, encoded in the &quot;i3h:i3l&quot; fields." link="index__18">&lt;index&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_indexed_3.mortlach_multi4_mla_long_idx.smlsl_za_zzi_4xi" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 32;
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn:'00');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('0':Zm);
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(off2:'0');
constant integer index = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i3h:i3l);
constant integer nreg = 4;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="smlsl_za_zzi_1, smlsl_za_zzi_2xi, smlsl_za_zzi_4xi" symboldefcount="1">
      <symbol link="Wv">&lt;Wv&gt;</symbol>
      <account encodedin="Rv">
        <intro>
          <para>Is the 32-bit name of the vector select register W8-W11, encoded in the "Rv" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="smlsl_za_zzi_1" symboldefcount="1">
      <symbol link="offs1">&lt;offs1&gt;</symbol>
      <account encodedin="off3">
        <intro>
          <para>For the "One ZA double-vector" variant: is the first vector select offset, encoded as "off3" field times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="smlsl_za_zzi_2xi, smlsl_za_zzi_4xi" symboldefcount="2">
      <symbol link="offs1__2">&lt;offs1&gt;</symbol>
      <account encodedin="off2">
        <intro>
          <para>For the "Four ZA double-vectors" and "Two ZA double-vectors" variants: is the first vector select offset, encoded as "off2" field times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="smlsl_za_zzi_1" symboldefcount="1">
      <symbol link="offs2">&lt;offs2&gt;</symbol>
      <account encodedin="off3">
        <intro>
          <para>For the "One ZA double-vector" variant: is the second vector select offset, encoded as "off3" field times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="smlsl_za_zzi_2xi, smlsl_za_zzi_4xi" symboldefcount="2">
      <symbol link="offs2__2">&lt;offs2&gt;</symbol>
      <account encodedin="off2">
        <intro>
          <para>For the "Four ZA double-vectors" and "Two ZA double-vectors" variants: is the second vector select offset, encoded as "off2" field times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="smlsl_za_zzi_1" symboldefcount="1">
      <symbol link="Zn__2">&lt;Zn&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the first source scalable vector register, encoded in the "Zn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="smlsl_za_zzi_1, smlsl_za_zzi_2xi, smlsl_za_zzi_4xi" symboldefcount="1">
      <symbol link="Zm__2">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the second source scalable vector register Z0-Z15, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="smlsl_za_zzi_1, smlsl_za_zzi_2xi, smlsl_za_zzi_4xi" symboldefcount="1">
      <symbol link="index__18">&lt;index&gt;</symbol>
      <account encodedin="i3h:i3l">
        <intro>
          <para>Is the element index, in the range 0 to 7, encoded in the "i3h:i3l" fields.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="smlsl_za_zzi_2xi" symboldefcount="1">
      <symbol link="Zn1__2">&lt;Zn1&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>For the "Two ZA double-vectors" variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as "Zn" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="smlsl_za_zzi_4xi" symboldefcount="2">
      <symbol link="Zn1__3">&lt;Zn1&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>For the "Four ZA double-vectors" variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as "Zn" times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="smlsl_za_zzi_2xi" symboldefcount="1">
      <symbol link="Zn2__2">&lt;Zn2&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the second scalable vector register of the first source multi-vector group, encoded as "Zn" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="smlsl_za_zzi_4xi" symboldefcount="1">
      <symbol link="Zn4__2">&lt;Zn4&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the fourth scalable vector register of the first source multi-vector group, encoded as "Zn" times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sme.mortlach_multi_indexed_1.mortlach_multi1_mla_long_idx.smlsl_za_zzi_1" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckStreamingSVEAndZAEnabled.0" file="shared_pseudocode.xml" hover="function: CheckStreamingSVEAndZAEnabled()">CheckStreamingSVEAndZAEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer elements = VL DIV esize;
constant integer vectors = VL DIV 8;
constant integer vstride = vectors DIV nreg;
constant integer eltspersegment = 128 DIV esize;
constant bits(32) vbase = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[v, 32];
integer vec = (<a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(vbase) + offset) MOD vstride;
bits(VL) result;
vec = vec - (vec MOD 2);

for r = 0 to nreg-1
    constant bits(VL) operand1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[n+r, VL];
    constant bits(VL) operand2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m, VL];
    for i = 0 to 1
        constant bits(VL) operand3 = <a link="impl-aarch64.ZAvector.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) ZAvector[integer index, integer width]">ZAvector</a>[vec + i, VL];
        for e = 0 to elements-1
            constant integer segmentbase = e - (e MOD eltspersegment);
            constant integer s = 2 * segmentbase + index;
            constant integer element1 = <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, 2 * e + i, esize DIV 2]);
            constant integer element2 = <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, s, esize DIV 2]);
            constant bits(esize) product = (element1 * element2)&lt;esize-1:0&gt;;
            <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, e, esize] = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand3, e, esize] - product;
        <a link="impl-aarch64.ZAvector.write.2" file="shared_pseudocode.xml" hover="accessor: ZAvector[integer index, integer width] = bits(width) value">ZAvector</a>[vec + i, VL] = result;
    vec = vec + vstride;</pstext></ps>
  </ps_section>
</instructionsection>
