<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="CAST" title="CAST, CASAT, CASALT, CASLT -- A64" type="instruction">
  <docvars>
    <docvar key="address-form" value="base-register"/>
    <docvar key="address-form-reg-type" value="base-register-64-reg"/>
    <docvar key="instr-class" value="general"/>
    <docvar key="isa" value="A64"/>
    <docvar key="reg-type" value="64-reg"/>
  </docvars>
  <heading>CAST, CASAT, CASALT, CASLT</heading>
  <desc>
    <brief>
      <para>Compare and swap unprivileged</para>
    </brief>
    <authored>
      <para>This instruction
reads a 64-bit doubleword from memory, and compares it against the value held in a
first register. If the comparison is equal, the value in a second register
is written to memory. If the comparison is not equal, the architecture permits writing
the value read from the location to memory.
If the write is performed, the read and write occur atomically such
that no other modification of the memory location can take place
between the read and write.</para>
      <list type="unordered">
        <listitem>
          <content>
            <instruction>CASAT</instruction> and <instruction>CASALT</instruction> load from memory with acquire semantics.</content>
        </listitem>
        <listitem>
          <content>
            <instruction>CASLT</instruction> and <instruction>CASALT</instruction> store to memory with release semantics.</content>
        </listitem>
        <listitem>
          <content>
            <instruction>CAST</instruction> has neither acquire nor release semantics.</content>
        </listitem>
      </list>
      <para>The architecture permits that the data read clears any exclusive
monitors associated with that location, even if the compare
subsequently fails.</para>
      <para>If the instruction generates a synchronous Data Abort, the register
which is compared and loaded, that is <syntax>&lt;Xs&gt;</syntax>,
is restored to the value held in the register
before the instruction was executed.</para>
      <para>Explicit Memory  effects produced by the instruction behave as if the instruction was
  executed at EL0 if the <xref linkend="ARMARM_Effective_value">Effective value</xref> of
  PSTATE.UAO is 0 and either:</para>
      <list type="unordered">
        <listitem>
          <content>The instruction is executed at EL1.</content>
        </listitem>
        <listitem>
          <content>The instruction is executed at EL2 when the <xref linkend="ARMARM_Effective_value">Effective value</xref>
  of <register_link id="AArch64-hcr_el2.xml" state="AArch64">HCR_EL2</register_link>.{E2H, TGE} is {1, 1}.</content>
        </listitem>
      </list>
      <para>Otherwise, the Explicit Memory  effects operate with the restrictions determined by
  the Exception level at which the instruction is executed.</para>
      <para>For a <instruction>CAST</instruction> or <instruction>CASAT</instruction> instruction, when <syntax>&lt;Ws&gt;</syntax>
or <syntax>&lt;Xs&gt;</syntax> specifies the same register as <syntax>&lt;Wt&gt;</syntax> or <syntax>&lt;Xt&gt;</syntax>,
this signals to the memory system that an additional subsequent <instruction>CAST</instruction>,
<instruction>CASAT</instruction>, <instruction>CASALT</instruction>, or <instruction>CASLT</instruction>
access to the specified location is likely to occur in the near future. The memory system can respond by
taking actions that are expected to enable the subsequent <instruction>CAST</instruction>,
<instruction>CASAT</instruction>, <instruction>CASALT</instruction>, or <instruction>CASLT</instruction> access to succeed when it does occur.</para>
      <para>A code sequence starting with a <instruction>CAST</instruction> or <instruction>CASAT</instruction> instruction for which
<syntax>&lt;Ws&gt;</syntax> or <syntax>&lt;Xs&gt;</syntax> specifies the same register as <syntax>&lt;Wt&gt;</syntax>
or <syntax>&lt;Xt&gt;</syntax>, and ending with a subsequent <instruction>CAST</instruction>, <instruction>CASAT</instruction>,
<instruction>CASALT</instruction>, or <instruction>CASLT</instruction> to the same location, exhibits the following
properties for best performance when the location may be accessed concurrently, on one or more other PEs:</para>
      <list type="unordered">
        <listitem>
          <content>The sequence does not contain any direct system register writes, address translation instructions, cache or TLB
  maintenance operations, exception producing instructions, exception returns, or <instruction>ISB</instruction> barriers.</content>
        </listitem>
        <listitem>
          <content>The execution of the sequence includes 32 or fewer instructions.</content>
        </listitem>
        <listitem>
          <content>The value provided in <syntax>&lt;Ws&gt;</syntax> or <syntax>&lt;Xs&gt;</syntax> of the first <instruction>CAST</instruction> or <instruction>CASAT</instruction>
  is a value likely to result in the comparison failing.
  A failing comparison result may lead to better performance due to the hardware not performing a write to memory.</content>
        </listitem>
      </list>
      <note>
        <para>For a <instruction>CAST</instruction> or <instruction>CASAT</instruction> instruction, when <syntax>&lt;Ws&gt;</syntax> or
<syntax>&lt;Xs&gt;</syntax> specifies the same register as <syntax>&lt;Wt&gt;</syntax> or <syntax>&lt;Xt&gt;</syntax>, the
value in memory is not modified, because the <instruction>CAST</instruction> or <instruction>CASAT</instruction> either fails its compare or writes the same value back to memory.</para>
      </note>
      <para>For more information about memory ordering semantics, see <xref linkend="ARMARM_BEIHCHEF">Load-Acquire, Store-Release</xref>.</para>
      <para>For information about addressing modes, see
<xref linkend="ARMARM_CHDIIIBB">Load/Store addressing modes</xref>.</para>
    </authored>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="No offset" oneof="1" id="iclass_no_offset" no_encodings="4" isa="A64">
      <docvars>
        <docvar key="address-form" value="base-register"/>
        <docvar key="address-form-reg-type" value="base-register-64-reg"/>
        <docvar key="instr-class" value="general"/>
        <docvar key="isa" value="A64"/>
        <docvar key="reg-type" value="64-reg"/>
      </docvars>
      <iclassintro count="4"/>
      <arch_variants>
        <arch_variant feature="FEAT_LSUI" name="ARMv9.6"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.ldst.comswap_unpriv.CAST_C64_comswap_unpriv" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" name="sz" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="29" width="7" settings="7">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="22" width="1" name="L" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="20" width="5" name="Rs" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="1" name="o0" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="14" width="5" name="Rt2" usename="1" settings="5" psbits="xxxxx">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Rt" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="CAST_C64_comswap_unpriv" oneofinclass="4" oneof="4" label="CAST" bitdiffs="L == 0 &amp;&amp; o0 == 0">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="CAST"/>
          <docvar key="instr-class" value="general"/>
          <docvar key="address-form" value="base-register"/>
          <docvar key="address-form-reg-type" value="base-register-64-reg"/>
          <docvar key="atomic-ops" value="CAST-64-reg"/>
          <docvar key="reg-type" value="64-reg"/>
        </docvars>
        <box hibit="22" width="1" name="L">
          <c>0</c>
        </box>
        <box hibit="15" width="1" name="o0">
          <c>0</c>
        </box>
        <asmtemplate><text>CAST  </text><a hover="Is the 64-bit name of the general-purpose register to be compared and loaded, encoded in the &quot;Rs&quot; field." link="XsOrXZR__4">&lt;Xs&gt;</a><text>, </text><a hover="Is the 64-bit name of the general-purpose register to be conditionally stored, encoded in the &quot;Rt&quot; field." link="XtOrXZR__10">&lt;Xt&gt;</a><text>, [</text><a hover="Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the &quot;Rn&quot; field." link="XnSP_option">&lt;Xn|SP&gt;</a><text>{, #0}]</text></asmtemplate>
      </encoding>
      <encoding name="CASAT_C64_comswap_unpriv" oneofinclass="4" oneof="4" label="CASAT" bitdiffs="L == 1 &amp;&amp; o0 == 0">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="CASAT"/>
          <docvar key="instr-class" value="general"/>
          <docvar key="address-form" value="base-register"/>
          <docvar key="address-form-reg-type" value="base-register-64-reg"/>
          <docvar key="atomic-ops" value="CASAT-64-reg"/>
          <docvar key="reg-type" value="64-reg"/>
        </docvars>
        <box hibit="22" width="1" name="L">
          <c>1</c>
        </box>
        <box hibit="15" width="1" name="o0">
          <c>0</c>
        </box>
        <asmtemplate><text>CASAT  </text><a hover="Is the 64-bit name of the general-purpose register to be compared and loaded, encoded in the &quot;Rs&quot; field." link="XsOrXZR__4">&lt;Xs&gt;</a><text>, </text><a hover="Is the 64-bit name of the general-purpose register to be conditionally stored, encoded in the &quot;Rt&quot; field." link="XtOrXZR__10">&lt;Xt&gt;</a><text>, [</text><a hover="Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the &quot;Rn&quot; field." link="XnSP_option">&lt;Xn|SP&gt;</a><text>{, #0}]</text></asmtemplate>
      </encoding>
      <encoding name="CASALT_C64_comswap_unpriv" oneofinclass="4" oneof="4" label="CASALT" bitdiffs="L == 1 &amp;&amp; o0 == 1">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="CASALT"/>
          <docvar key="instr-class" value="general"/>
          <docvar key="address-form" value="base-register"/>
          <docvar key="address-form-reg-type" value="base-register-64-reg"/>
          <docvar key="atomic-ops" value="CASALT-64-reg"/>
          <docvar key="reg-type" value="64-reg"/>
        </docvars>
        <box hibit="22" width="1" name="L">
          <c>1</c>
        </box>
        <box hibit="15" width="1" name="o0">
          <c>1</c>
        </box>
        <asmtemplate><text>CASALT  </text><a hover="Is the 64-bit name of the general-purpose register to be compared and loaded, encoded in the &quot;Rs&quot; field." link="XsOrXZR__4">&lt;Xs&gt;</a><text>, </text><a hover="Is the 64-bit name of the general-purpose register to be conditionally stored, encoded in the &quot;Rt&quot; field." link="XtOrXZR__10">&lt;Xt&gt;</a><text>, [</text><a hover="Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the &quot;Rn&quot; field." link="XnSP_option">&lt;Xn|SP&gt;</a><text>{, #0}]</text></asmtemplate>
      </encoding>
      <encoding name="CASLT_C64_comswap_unpriv" oneofinclass="4" oneof="4" label="CASLT" bitdiffs="L == 0 &amp;&amp; o0 == 1">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="CASLT"/>
          <docvar key="instr-class" value="general"/>
          <docvar key="address-form" value="base-register"/>
          <docvar key="address-form-reg-type" value="base-register-64-reg"/>
          <docvar key="atomic-ops" value="CASLT-64-reg"/>
          <docvar key="reg-type" value="64-reg"/>
        </docvars>
        <box hibit="22" width="1" name="L">
          <c>0</c>
        </box>
        <box hibit="15" width="1" name="o0">
          <c>1</c>
        </box>
        <asmtemplate><text>CASLT  </text><a hover="Is the 64-bit name of the general-purpose register to be compared and loaded, encoded in the &quot;Rs&quot; field." link="XsOrXZR__4">&lt;Xs&gt;</a><text>, </text><a hover="Is the 64-bit name of the general-purpose register to be conditionally stored, encoded in the &quot;Rt&quot; field." link="XtOrXZR__10">&lt;Xt&gt;</a><text>, [</text><a hover="Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the &quot;Rn&quot; field." link="XnSP_option">&lt;Xn|SP&gt;</a><text>{, #0}]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.ldst.comswap_unpriv.CAST_C64_comswap_unpriv" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_LSUI) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer s = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rs);
constant integer t = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rt);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
constant boolean acquire = L == '1';
constant boolean release = o0 == '1';
constant boolean tagchecked = n != 31;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="CAST_C64_comswap_unpriv, CASAT_C64_comswap_unpriv, CASALT_C64_comswap_unpriv, CASLT_C64_comswap_unpriv" symboldefcount="1">
      <symbol link="XsOrXZR__4">&lt;Xs&gt;</symbol>
      <account encodedin="Rs">
        <intro>
          <para>Is the 64-bit name of the general-purpose register to be compared and loaded, encoded in the "Rs" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="CAST_C64_comswap_unpriv, CASAT_C64_comswap_unpriv, CASALT_C64_comswap_unpriv, CASLT_C64_comswap_unpriv" symboldefcount="1">
      <symbol link="XtOrXZR__10">&lt;Xt&gt;</symbol>
      <account encodedin="Rt">
        <intro>
          <para>Is the 64-bit name of the general-purpose register to be conditionally stored, encoded in the "Rt" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="CAST_C64_comswap_unpriv, CASAT_C64_comswap_unpriv, CASALT_C64_comswap_unpriv, CASLT_C64_comswap_unpriv" symboldefcount="1">
      <symbol link="XnSP_option">&lt;Xn|SP&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.ldst.comswap_unpriv.CAST_C64_comswap_unpriv" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">bits(64) address;
bits(64) comparevalue;
bits(64) newvalue;

constant boolean privileged = <a link="AArch64.IsUnprivAccessPriv.0" file="shared_pseudocode.xml" hover="function: boolean AArch64.IsUnprivAccessPriv()">AArch64.IsUnprivAccessPriv</a>();
constant <a link="AccessDescriptor" file="shared_pseudocode.xml" hover="type AccessDescriptor is ( AccessType acctype, bits(2) el, SecurityState ss, boolean acqsc, boolean acqpc, boolean relsc, boolean limitedordered, boolean exclusive, boolean atomicop, MemAtomicOp modop, boolean nontemporal, boolean read, boolean write, CacheOp cacheop, CacheOpScope opscope, CacheType cachetype, boolean pan, boolean transactional, boolean nonfault, boolean firstfault, boolean first, boolean contiguous, boolean streamingsve, boolean ls64, boolean withstatus, boolean mops, boolean rcw, boolean rcws, boolean toplevel, VARange varange, boolean a32lsmd, boolean tagchecked, boolean tagaccess, boolean stzgm, boolean ispair, boolean highestaddressfirst, MPAMinfo mpam )">AccessDescriptor</a> accdesc = <a link="impl-shared.CreateAccDescAtomicOp.5" file="shared_pseudocode.xml" hover="function: AccessDescriptor CreateAccDescAtomicOp(MemAtomicOp modop, boolean acquire, boolean release, boolean tagchecked, boolean privileged)">CreateAccDescAtomicOp</a>(<a link="MemAtomicOp_CAS" file="shared_pseudocode.xml" hover="enumeration MemAtomicOp { MemAtomicOp_GCSSS1, MemAtomicOp_ADD, MemAtomicOp_BIC, MemAtomicOp_EOR, MemAtomicOp_ORR, MemAtomicOp_SMAX, MemAtomicOp_SMIN, MemAtomicOp_UMAX, MemAtomicOp_UMIN, MemAtomicOp_SWP, MemAtomicOp_CAS, MemAtomicOp_FPADD, MemAtomicOp_FPMAX, MemAtomicOp_FPMIN, MemAtomicOp_FPMAXNM, MemAtomicOp_FPMINNM, MemAtomicOp_BFADD, MemAtomicOp_BFMAX, MemAtomicOp_BFMIN, MemAtomicOp_BFMAXNM, MemAtomicOp_BFMINNM }">MemAtomicOp_CAS</a>, acquire, release,
                                                          tagchecked, privileged);
comparevalue = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[s, 64];
newvalue = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[t, 64];

if n == 31 then
    <a link="impl-aarch64.CheckSPAlignment.0" file="shared_pseudocode.xml" hover="function: CheckSPAlignment()">CheckSPAlignment</a>();
    address = <a link="impl-aarch64.SP.read.1" file="shared_pseudocode.xml" hover="accessor: bits(width) SP[integer width]">SP</a>[64];
else
    address = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[n, 64];

<a link="impl-aarch64.X.write.2" file="shared_pseudocode.xml" hover="accessor: X[integer n, integer width] = bits(width) value">X</a>[s, 64] = <a link="impl-aarch64.MemAtomic.4" file="shared_pseudocode.xml" hover="function: bits(size) MemAtomic(bits(64) address, bits(size) cmpoperand, bits(size) operand, AccessDescriptor accdesc_in)">MemAtomic</a>(address, comparevalue, newvalue, accdesc);</pstext></ps>
  </ps_section>
</instructionsection>
