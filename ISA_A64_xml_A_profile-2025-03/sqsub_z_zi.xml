<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="sqsub_z_zi" title="SQSUB (immediate) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="sve"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="SQSUB"/>
  </docvars>
  <heading>SQSUB (immediate)</heading>
  <desc>
    <brief>
      <para>Signed saturating subtract immediate (unpredicated)</para>
    </brief>
    <authored>
      <para>Signed saturating subtract of an unsigned immediate from
each element of the source vector,
and destructively place the results in the corresponding elements of the  source vector. Each result element is saturated to the
 N-bit element's
signed integer range -2<sup>(N-1)</sup>  to (2<sup>(N-1)</sup>)-1. This instruction is unpredicated.</para>
      <para>The immediate is an unsigned value in the range 0 to 255, and
for element widths of 16 bits or higher it may also be a
positive multiple of 256 in the range 256 to 65280.</para>
      <para>The immediate is encoded in 8 bits with an optional left shift
by 8. The preferred disassembly when the shift option is
specified is "<syntax>#&lt;uimm8&gt;, LSL #8</syntax>".
However an assembler and
disassembler may also allow use of the shifted 16-bit value unless the
immediate is 0 and the shift amount is 8, which must be
unambiguously described as "<syntax>#0, LSL #8</syntax>".</para>
    </authored>
    <predicated>False</predicated>
    <takes_movprfx>True</takes_movprfx>
  </desc>
  <operationalnotes>
    <operationalnote>
      <operationalnote_content>
        <para>This instruction might be immediately preceded in program order by a <instruction>MOVPRFX</instruction> instruction. The <instruction>MOVPRFX</instruction> must conform to all of the following requirements, otherwise the behavior of the <instruction>MOVPRFX</instruction> and this instruction is <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word>:</para>
        <list type="unordered">
          <listitem>
            <content>The <instruction>MOVPRFX</instruction> must be unpredicated.</content>
          </listitem>
          <listitem>
            <content>The <instruction>MOVPRFX</instruction> must specify the same destination register as this instruction.</content>
          </listitem>
          <listitem>
            <content>The destination register must not refer to architectural register state referenced by any other source operand register of this instruction.</content>
          </listitem>
        </list>
      </operationalnote_content>
    </operationalnote>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="SVE" oneof="1" id="iclass_sve" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="SQSUB"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SVE || FEAT_SME" name="FEAT_SVE || FEAT_SME"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_wideimm_unpred.sve_int_arith_imm0.sqsub_z_zi_" tworows="1">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="18" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="16" name="U" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="15" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="13" width="1" name="sh" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="12" width="8" name="imm8" usename="1">
          <c colspan="8"/>
        </box>
        <box hibit="4" width="5" name="Zdn" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="sqsub_z_zi_" oneofinclass="1" oneof="1" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SQSUB"/>
          <docvar key="instr-class" value="sve"/>
        </docvars>
        <asmtemplate><text>SQSUB  </text><a hover="Is the name of the source and destination scalable vector register, encoded in the &quot;Zdn&quot; field." link="Zdn__2">&lt;Zdn&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__4">&lt;T&gt;</a><text>, </text><a hover="Is the name of the source and destination scalable vector register, encoded in the &quot;Zdn&quot; field." link="Zdn__2">&lt;Zdn&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__4">&lt;T&gt;</a><text>, #</text><a hover="Is an unsigned immediate in the range 0 to 255, encoded in the &quot;imm8&quot; field." link="imm__27">&lt;imm&gt;</a><text>{, </text><a hover="Is the optional left shift to apply to the immediate, defaulting to LSL #0 and " link="shift__10">&lt;shift&gt;</a><text>}</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_wideimm_unpred.sve_int_arith_imm0.sqsub_z_zi_" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE) &amp;&amp; !IsFeatureImplemented(FEAT_SME) then
    <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
if size:sh == '001' then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 8 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(size);
constant integer dn = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zdn);
integer imm = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(imm8);
if sh == '1' then imm = imm &lt;&lt; 8;
constant boolean unsigned = FALSE;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="sqsub_z_zi_" symboldefcount="1">
      <symbol link="Zdn__2">&lt;Zdn&gt;</symbol>
      <account encodedin="Zdn">
        <intro>
          <para>Is the name of the source and destination scalable vector register, encoded in the "Zdn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sqsub_z_zi_" symboldefcount="1">
      <symbol link="T__4">&lt;T&gt;</symbol>
      <definition encodedin="size">
        <intro>Is the size specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">size</entry>
                <entry class="symbol">&lt;T&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">00</entry>
                <entry class="symbol">B</entry>
              </row>
              <row>
                <entry class="bitfield">01</entry>
                <entry class="symbol">H</entry>
              </row>
              <row>
                <entry class="bitfield">10</entry>
                <entry class="symbol">S</entry>
              </row>
              <row>
                <entry class="bitfield">11</entry>
                <entry class="symbol">D</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="sqsub_z_zi_" symboldefcount="1">
      <symbol link="imm__27">&lt;imm&gt;</symbol>
      <account encodedin="imm8">
        <intro>
          <para>Is an unsigned immediate in the range 0 to 255, encoded in the "imm8" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sqsub_z_zi_" symboldefcount="1">
      <symbol link="shift__10">&lt;shift&gt;</symbol>
      <definition encodedin="sh">
        <intro>Is the optional left shift to apply to the immediate, defaulting to LSL #0 and </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">sh</entry>
                <entry class="symbol">&lt;shift&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">0</entry>
                <entry class="symbol">LSL #0</entry>
              </row>
              <row>
                <entry class="bitfield">1</entry>
                <entry class="symbol">LSL #8</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sve.sve_wideimm_unpred.sve_int_arith_imm0.sqsub_z_zi_" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckSVEEnabled()">CheckSVEEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer elements = VL DIV esize;
constant bits(VL) operand1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[dn, VL];
bits(VL) result;

for e = 0 to elements-1
    constant integer element1 = <a link="impl-shared.Int.2" file="shared_pseudocode.xml" hover="function: integer Int(bits(N) x, boolean unsigned)">Int</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, e, esize], unsigned);
    (<a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, e, esize], -) = <a link="impl-shared.SatQ.3" file="shared_pseudocode.xml" hover="function: (bits(N), boolean) SatQ(integer i, integer N, boolean unsigned)">SatQ</a>(element1 - imm, esize, unsigned);

<a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[dn, VL] = result;</pstext></ps>
  </ps_section>
</instructionsection>
