<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="fcvtl_mz2_z" title="FCVTL -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="mortlach2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="FCVTL"/>
  </docvars>
  <heading>FCVTL</heading>
  <desc>
    <brief>
      <para>Multi-vector convert from half-precision to deinterleaved single-precision</para>
    </brief>
    <authored>
      <para>This instruction converts each element of the
source vector from half-precision to single-precision floating-point, and places the two-way deinterleaved results
in the double-width destination elements of the destination vectors.</para>
      <para>This instruction follows SME2 floating-point numerical behaviors
corresponding to instructions that place their results in one or more
SVE Z vectors.</para>
      <para>This instruction is unpredicated.</para>
      <para>ID_AA64SMFR0_EL1.F16F16 indicates whether this instruction is implemented.</para>
    </authored>
    <predicated>False</predicated>
    <sm_policy>SM_1_only</sm_policy>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="SME2" oneof="1" id="iclass_sme2" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="FCVTL"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME_F16F16" name="ARMv9.4"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_sve_4.mortlach_multi2_wide_fp_cvrt.fcvtl_mz2_z_" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="17" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="15" width="6" settings="6">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="4" name="Zd" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="0" name="L" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
      </regdiagram>
      <encoding name="fcvtl_mz2_z_" oneofinclass="1" oneof="1" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FCVTL"/>
          <docvar key="instr-class" value="mortlach2"/>
        </docvars>
        <asmtemplate><text>FCVTL  { </text><a hover="For the &quot;Two registers&quot; variant: is the name of the first scalable vector register of the destination multi-vector group, encoded as &quot;Zd&quot; times 2." link="Zd1">&lt;Zd1&gt;</a><text>.S-</text><a hover="For the &quot;Consecutive&quot; variant: is the name of the second scalable vector register of the destination multi-vector group, encoded as &quot;Zd&quot; times 2 plus 1." link="Zd2">&lt;Zd2&gt;</a><text>.S }, </text><a hover="Is the name of the source scalable vector register, encoded in the &quot;Zn&quot; field." link="Zn">&lt;Zn&gt;</a><text>.H</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_sve_4.mortlach_multi2_wide_fp_cvrt.fcvtl_mz2_z_" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME_F16F16) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd:'0');</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="fcvtl_mz2_z_" symboldefcount="1">
      <symbol link="Zd1">&lt;Zd1&gt;</symbol>
      <account encodedin="Zd">
        <intro>
          <para>Is the name of the first scalable vector register of the destination multi-vector group, encoded as "Zd" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fcvtl_mz2_z_" symboldefcount="1">
      <symbol link="Zd2">&lt;Zd2&gt;</symbol>
      <account encodedin="Zd">
        <intro>
          <para>Is the name of the second scalable vector register of the destination multi-vector group, encoded as "Zd" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fcvtl_mz2_z_" symboldefcount="1">
      <symbol link="Zn">&lt;Zn&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the source scalable vector register, encoded in the "Zn" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sme.mortlach_multi_sve_4.mortlach_multi2_wide_fp_cvrt.fcvtl_mz2_z_" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckStreamingSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckStreamingSVEEnabled()">CheckStreamingSVEEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer pairs = VL DIV 32;
constant bits(VL) operand = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[n, VL];
bits(VL) result0;
bits(VL) result1;

for p = 0 to pairs-1
    constant bits(16) element1 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand, 2*p+0, 16];
    constant bits(16) element2 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand, 2*p+1, 16];
    constant bits(32) res1 = <a link="impl-aarch64.FPConvertSVE.3" file="shared_pseudocode.xml" hover="function: bits(M) FPConvertSVE(bits(N) op, FPCR_Type fpcr_in, integer M)">FPConvertSVE</a>(element1, FPCR, 32);
    constant bits(32) res2 = <a link="impl-aarch64.FPConvertSVE.3" file="shared_pseudocode.xml" hover="function: bits(M) FPConvertSVE(bits(N) op, FPCR_Type fpcr_in, integer M)">FPConvertSVE</a>(element2, FPCR, 32);
    <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result0, p, 32] = res1;
    <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result1, p, 32] = res2;

<a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[d+0, VL] = result0;
<a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[d+1, VL] = result1;</pstext></ps>
  </ps_section>
</instructionsection>
