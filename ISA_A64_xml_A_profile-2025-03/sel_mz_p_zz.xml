<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="sel_mz_p_zz" title="SEL -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="mortlach2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="SEL"/>
  </docvars>
  <heading>SEL</heading>
  <desc>
    <brief>
      <para>Multi-vector conditionally select elements from two vectors</para>
    </brief>
    <authored>
      <para>This instruction selects consecutive elements from the two or four first source vectors
where predicate elements are true, and places them in the corresponding elements of the
two or four destination vectors. The corresponding elements from the two or four second
source vectors are placed in the remaining elements of the destination vectors.</para>
    </authored>
    <predicated>True</predicated>
    <uses_dit condition="FEAT_SVE2 is implemented or FEAT_SME is implemented">True</uses_dit>
    <sm_policy>SM_1_only</sm_policy>
  </desc>
  <operationalnotes>
    <operationalnote>
      <operationalnote_content>
        <para>If PSTATE.DIT is 1:</para>
        <list type="unordered">
          <listitem>
            <content>The execution time of this instruction is independent of:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its operand registers when its governing predicate register contains the same value for each execution.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
          <listitem>
            <content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its operand registers when its governing predicate register contains the same value for each execution.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
        </list>
      </operationalnote_content>
    </operationalnote>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <classesintro count="2">
      <txt>It has encodings from 2 classes:</txt>
      <a href="#iclass_two_registers">Two registers</a>
      <txt> and </txt>
      <a href="#iclass_four_registers">Four registers</a>
    </classesintro>
    <iclass name="Two registers" oneof="2" id="iclass_two_registers" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="ldstruct-regcount" value="to-2reg"/>
        <docvar key="mnemonic" value="SEL"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2" name="ARMv9.3"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_sve_1.mortlach_multi2_select_int.sel_mz_p_zz_2">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="4" name="Zm" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="16" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="15" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="12" width="3" name="PNg" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="9" width="4" name="Zn" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="5" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="4" width="4" name="Zd" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="0" width="1" settings="1">
          <c>0</c>
        </box>
      </regdiagram>
      <encoding name="sel_mz_p_zz_2" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SEL"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="ldstruct-regcount" value="to-2reg"/>
        </docvars>
        <asmtemplate><text>SEL  { </text><a hover="For the &quot;Two registers&quot; variant: is the name of the first scalable vector register of the destination multi-vector group, encoded as &quot;Zd&quot; times 2." link="Zd1">&lt;Zd1&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__5">&lt;T&gt;</a><text>-</text><a hover="For the &quot;Consecutive&quot; variant: is the name of the second scalable vector register of the destination multi-vector group, encoded as &quot;Zd&quot; times 2 plus 1." link="Zd2">&lt;Zd2&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__5">&lt;T&gt;</a><text> }, </text><a hover="Is the name of the governing scalable predicate register PN8-PN15, with predicate-as-counter encoding, encoded in the &quot;PNg&quot; field." link="PNg">&lt;PNg&gt;</a><text>, { </text><a hover="For the &quot;Two registers&quot; variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 2." link="Zn1__2">&lt;Zn1&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__5">&lt;T&gt;</a><text>-</text><a hover="Is the name of the second scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 2 plus 1." link="Zn2__2">&lt;Zn2&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__5">&lt;T&gt;</a><text> }, { </text><a hover="For the &quot;Two registers&quot; variant: is the name of the first scalable vector register of the second source multi-vector group, encoded as &quot;Zm&quot; times 2." link="Zm1__3">&lt;Zm1&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__5">&lt;T&gt;</a><text>-</text><a hover="Is the name of the second scalable vector register of the second source multi-vector group, encoded as &quot;Zm&quot; times 2 plus 1." link="Zm2__2">&lt;Zm2&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__5">&lt;T&gt;</a><text> }</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_sve_1.mortlach_multi2_select_int.sel_mz_p_zz_2" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 8 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(size);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn:'0');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm:'0');
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd:'0');
constant integer g = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('1':PNg);
constant integer nreg = 2;</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Four registers" oneof="2" id="iclass_four_registers" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="ldstruct-regcount" value="to-4reg"/>
        <docvar key="mnemonic" value="SEL"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2" name="ARMv9.3"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_sve_1.mortlach_multi4_select_int.sel_mz_p_zz_4">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="3" name="Zm" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="17" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="15" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="12" width="3" name="PNg" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="9" width="3" name="Zn" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="6" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="4" width="3" name="Zd" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="1" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
      </regdiagram>
      <encoding name="sel_mz_p_zz_4" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SEL"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="ldstruct-regcount" value="to-4reg"/>
        </docvars>
        <asmtemplate><text>SEL  { </text><a hover="For the &quot;Four registers&quot; variant: is the name of the first scalable vector register of the destination multi-vector group, encoded as &quot;Zd&quot; times 4." link="Zd1__2">&lt;Zd1&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__5">&lt;T&gt;</a><text>-</text><a hover="For the &quot;Consecutive&quot; variant: is the name of the fourth scalable vector register of the destination multi-vector group, encoded as &quot;Zd&quot; times 4 plus 3." link="Zd4">&lt;Zd4&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__5">&lt;T&gt;</a><text> }, </text><a hover="Is the name of the governing scalable predicate register PN8-PN15, with predicate-as-counter encoding, encoded in the &quot;PNg&quot; field." link="PNg">&lt;PNg&gt;</a><text>, { </text><a hover="For the &quot;Four registers&quot; variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 4." link="Zn1__3">&lt;Zn1&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__5">&lt;T&gt;</a><text>-</text><a hover="Is the name of the fourth scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 4 plus 3." link="Zn4__2">&lt;Zn4&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__5">&lt;T&gt;</a><text> }, { </text><a hover="For the &quot;Four registers&quot; variant: is the name of the first scalable vector register of the second source multi-vector group, encoded as &quot;Zm&quot; times 4." link="Zm1__4">&lt;Zm1&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__5">&lt;T&gt;</a><text>-</text><a hover="Is the name of the fourth scalable vector register of the second source multi-vector group, encoded as &quot;Zm&quot; times 4 plus 3." link="Zm4__2">&lt;Zm4&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__5">&lt;T&gt;</a><text> }</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_sve_1.mortlach_multi4_select_int.sel_mz_p_zz_4" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 8 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(size);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn:'00');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm:'00');
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd:'00');
constant integer g = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('1':PNg);
constant integer nreg = 4;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="sel_mz_p_zz_2" symboldefcount="1">
      <symbol link="Zd1">&lt;Zd1&gt;</symbol>
      <account encodedin="Zd">
        <intro>
          <para>For the "Two registers" variant: is the name of the first scalable vector register of the destination multi-vector group, encoded as "Zd" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sel_mz_p_zz_4" symboldefcount="2">
      <symbol link="Zd1__2">&lt;Zd1&gt;</symbol>
      <account encodedin="Zd">
        <intro>
          <para>For the "Four registers" variant: is the name of the first scalable vector register of the destination multi-vector group, encoded as "Zd" times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sel_mz_p_zz_2, sel_mz_p_zz_4" symboldefcount="1">
      <symbol link="T__5">&lt;T&gt;</symbol>
      <definition encodedin="size">
        <intro>Is the size specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">size</entry>
                <entry class="symbol">&lt;T&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">00</entry>
                <entry class="symbol">B</entry>
              </row>
              <row>
                <entry class="bitfield">01</entry>
                <entry class="symbol">H</entry>
              </row>
              <row>
                <entry class="bitfield">10</entry>
                <entry class="symbol">S</entry>
              </row>
              <row>
                <entry class="bitfield">11</entry>
                <entry class="symbol">D</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="sel_mz_p_zz_2" symboldefcount="1">
      <symbol link="Zd2">&lt;Zd2&gt;</symbol>
      <account encodedin="Zd">
        <intro>
          <para>Is the name of the second scalable vector register of the destination multi-vector group, encoded as "Zd" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sel_mz_p_zz_2, sel_mz_p_zz_4" symboldefcount="1">
      <symbol link="PNg">&lt;PNg&gt;</symbol>
      <account encodedin="PNg">
        <intro>
          <para>Is the name of the governing scalable predicate register PN8-PN15, with predicate-as-counter encoding, encoded in the "PNg" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sel_mz_p_zz_2" symboldefcount="1">
      <symbol link="Zn1__2">&lt;Zn1&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>For the "Two registers" variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as "Zn" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sel_mz_p_zz_4" symboldefcount="2">
      <symbol link="Zn1__3">&lt;Zn1&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>For the "Four registers" variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as "Zn" times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sel_mz_p_zz_2" symboldefcount="1">
      <symbol link="Zn2__2">&lt;Zn2&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the second scalable vector register of the first source multi-vector group, encoded as "Zn" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sel_mz_p_zz_2" symboldefcount="1">
      <symbol link="Zm1__3">&lt;Zm1&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>For the "Two registers" variant: is the name of the first scalable vector register of the second source multi-vector group, encoded as "Zm" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sel_mz_p_zz_4" symboldefcount="2">
      <symbol link="Zm1__4">&lt;Zm1&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>For the "Four registers" variant: is the name of the first scalable vector register of the second source multi-vector group, encoded as "Zm" times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sel_mz_p_zz_2" symboldefcount="1">
      <symbol link="Zm2__2">&lt;Zm2&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the second scalable vector register of the second source multi-vector group, encoded as "Zm" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sel_mz_p_zz_4" symboldefcount="1">
      <symbol link="Zd4">&lt;Zd4&gt;</symbol>
      <account encodedin="Zd">
        <intro>
          <para>Is the name of the fourth scalable vector register of the destination multi-vector group, encoded as "Zd" times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sel_mz_p_zz_4" symboldefcount="1">
      <symbol link="Zn4__2">&lt;Zn4&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the fourth scalable vector register of the first source multi-vector group, encoded as "Zn" times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sel_mz_p_zz_4" symboldefcount="1">
      <symbol link="Zm4__2">&lt;Zm4&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the fourth scalable vector register of the second source multi-vector group, encoded as "Zm" times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sme.mortlach_multi_sve_1.mortlach_multi2_select_int.sel_mz_p_zz_2" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckStreamingSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckStreamingSVEEnabled()">CheckStreamingSVEEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer PL = VL DIV 8;
constant integer elements = VL DIV esize;
array [0..3] of bits(VL) results;
constant bits(PL) pred = <a link="impl-aarch64.P.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) P[integer n, integer width]">P</a>[g, PL];
constant bits(PL * nreg) mask = <a link="impl-aarch64.CounterToPredicate.2" file="shared_pseudocode.xml" hover="function: bits(width) CounterToPredicate(bits(16) pred, integer width)">CounterToPredicate</a>(pred&lt;15:0&gt;, PL * nreg);

for r = 0 to nreg-1
    constant bits(VL) operand1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[n+r, VL];
    constant bits(VL) operand2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m+r, VL];
    for e = 0 to elements-1
        if <a link="impl-aarch64.ActivePredicateElement.3" file="shared_pseudocode.xml" hover="function: boolean ActivePredicateElement(bits(N) pred, integer e, integer esize)">ActivePredicateElement</a>(mask, r * elements + e, esize) then
            <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[results[r], e, esize] = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, e, esize];
        else
            <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[results[r], e, esize] = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, e, esize];

for r = 0 to nreg-1
    <a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[d+r, VL] = results[r];</pstext></ps>
  </ps_section>
</instructionsection>
