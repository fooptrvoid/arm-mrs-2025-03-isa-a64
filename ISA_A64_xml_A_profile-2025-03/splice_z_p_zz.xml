<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="splice_z_p_zz" title="SPLICE -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="sve"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="SPLICE"/>
  </docvars>
  <heading>SPLICE</heading>
  <desc>
    <brief>
      <para>Splice two vectors under predicate control</para>
    </brief>
    <authored>
      <para>Select a region from the first source vector and copy it to the
lowest-numbered elements of the result. Then set any remaining elements
of the result to a copy of the lowest-numbered elements from the second
source vector. The region is selected using the first and last true
elements in the vector select predicate register.
The result is placed
destructively in the destination and first source vector,
   or constructively in the destination vector.</para>
    </authored>
    <predicated>False</predicated>
  </desc>
  <operationalnotes>
    <operationalnote>
      <operationalnote_titles>
        <operationalnote_title>Destructive</operationalnote_title>
      </operationalnote_titles>
      <operationalnote_content>
        <para>The destructive variant of this instruction might be immediately preceded in program order by a <instruction>MOVPRFX</instruction> instruction. The <instruction>MOVPRFX</instruction> must
conform to all of the following requirements, otherwise the behavior of the <instruction>MOVPRFX</instruction> and the destructive variant of this instruction is <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word>:</para>
        <list type="unordered">
          <listitem>
            <content>The <instruction>MOVPRFX</instruction> must be unpredicated.</content>
          </listitem>
          <listitem>
            <content>The <instruction>MOVPRFX</instruction> must specify the same destination register as this instruction.</content>
          </listitem>
          <listitem>
            <content>The destination register must not refer to architectural register state referenced by any other source operand register of this instruction.</content>
          </listitem>
        </list>
      </operationalnote_content>
    </operationalnote>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <classesintro count="2">
      <txt>It has encodings from 2 classes:</txt>
      <a href="#iclass_constructive">Constructive</a>
      <txt> and </txt>
      <a href="#iclass_destructive">Destructive</a>
    </classesintro>
    <iclass name="Constructive" oneof="2" id="iclass_constructive" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="SPLICE"/>
        <docvar key="sve-dest_const" value="sve-const"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SVE2 || FEAT_SME" name="FEAT_SVE2 || FEAT_SME"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_perm_pred.sve_intx_perm_splice.splice_z_p_zz_con">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="19" width="3" settings="3">
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="16" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="15" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="13" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="12" width="3" name="Pv" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="splice_z_p_zz_con" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SPLICE"/>
          <docvar key="instr-class" value="sve"/>
          <docvar key="sve-dest_const" value="sve-const"/>
        </docvars>
        <asmtemplate><text>SPLICE  </text><a hover="Is the name of the destination scalable vector register, encoded in the &quot;Zd&quot; field." link="Zd">&lt;Zd&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__86">&lt;T&gt;</a><text>, </text><a hover="Is the name of the vector select predicate register P0-P7, encoded in the &quot;Pv&quot; field." link="Pv__2">&lt;Pv&gt;</a><text>, { </text><a hover="Is the name of the first scalable vector register of the source multi-vector group, encoded in the &quot;Zn&quot; field." link="Zn1__5">&lt;Zn1&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__86">&lt;T&gt;</a><text>, </text><a hover="Is the name of the second scalable vector register of the source multi-vector group, encoded in the &quot;Zn&quot; field." link="Zn2__4">&lt;Zn2&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__86">&lt;T&gt;</a><text> }</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_perm_pred.sve_intx_perm_splice.splice_z_p_zz_con" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE2) &amp;&amp; !IsFeatureImplemented(FEAT_SME) then
    <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 8 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(size);
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pv);
constant integer dst = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
constant integer s1 = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer s2 = (s1 + 1) MOD 32;</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Destructive" oneof="2" id="iclass_destructive" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="SPLICE"/>
        <docvar key="sve-dest_const" value="sve-dest"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SVE || FEAT_SME" name="FEAT_SVE || FEAT_SME"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_perm_pred.sve_int_perm_splice.splice_z_p_zz_des">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="19" width="3" settings="3">
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="16" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="15" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="13" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="12" width="3" name="Pv" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="9" width="5" name="Zm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Zdn" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="splice_z_p_zz_des" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SPLICE"/>
          <docvar key="instr-class" value="sve"/>
          <docvar key="sve-dest_const" value="sve-dest"/>
        </docvars>
        <asmtemplate><text>SPLICE  </text><a hover="Is the name of the first source and destination scalable vector register, encoded in the &quot;Zdn&quot; field." link="Zdn">&lt;Zdn&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__86">&lt;T&gt;</a><text>, </text><a hover="Is the name of the vector select predicate register P0-P7, encoded in the &quot;Pv&quot; field." link="Pv__2">&lt;Pv&gt;</a><text>, </text><a hover="Is the name of the first source and destination scalable vector register, encoded in the &quot;Zdn&quot; field." link="Zdn">&lt;Zdn&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__86">&lt;T&gt;</a><text>, </text><a hover="Is the name of the second source scalable vector register, encoded in the &quot;Zm&quot; field." link="Zm">&lt;Zm&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__86">&lt;T&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_perm_pred.sve_int_perm_splice.splice_z_p_zz_des" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE) &amp;&amp; !IsFeatureImplemented(FEAT_SME) then
    <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 8 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(size);
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pv);
constant integer dst = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zdn);
constant integer s1 = dst;
constant integer s2 = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="splice_z_p_zz_con" symboldefcount="1">
      <symbol link="Zd">&lt;Zd&gt;</symbol>
      <account encodedin="Zd">
        <intro>
          <para>Is the name of the destination scalable vector register, encoded in the "Zd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="splice_z_p_zz_con, splice_z_p_zz_des" symboldefcount="1">
      <symbol link="T__86">&lt;T&gt;</symbol>
      <definition encodedin="size">
        <intro>Is the size specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">size</entry>
                <entry class="symbol">&lt;T&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">00</entry>
                <entry class="symbol">B</entry>
              </row>
              <row>
                <entry class="bitfield">01</entry>
                <entry class="symbol">H</entry>
              </row>
              <row>
                <entry class="bitfield">10</entry>
                <entry class="symbol">S</entry>
              </row>
              <row>
                <entry class="bitfield">11</entry>
                <entry class="symbol">D</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="splice_z_p_zz_con, splice_z_p_zz_des" symboldefcount="1">
      <symbol link="Pv__2">&lt;Pv&gt;</symbol>
      <account encodedin="Pv">
        <intro>
          <para>Is the name of the vector select predicate register P0-P7, encoded in the "Pv" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="splice_z_p_zz_con" symboldefcount="1">
      <symbol link="Zn1__5">&lt;Zn1&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the first scalable vector register of the source multi-vector group, encoded in the "Zn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="splice_z_p_zz_con" symboldefcount="1">
      <symbol link="Zn2__4">&lt;Zn2&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the second scalable vector register of the source multi-vector group, encoded in the "Zn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="splice_z_p_zz_des" symboldefcount="1">
      <symbol link="Zdn">&lt;Zdn&gt;</symbol>
      <account encodedin="Zdn">
        <intro>
          <para>Is the name of the first source and destination scalable vector register, encoded in the "Zdn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="splice_z_p_zz_des" symboldefcount="1">
      <symbol link="Zm">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the second source scalable vector register, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sve.sve_perm_pred.sve_intx_perm_splice.splice_z_p_zz_con" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckSVEEnabled()">CheckSVEEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer PL = VL DIV 8;
constant integer elements = VL DIV esize;
constant bits(PL) mask = <a link="impl-aarch64.P.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) P[integer n, integer width]">P</a>[v, PL];
constant bits(VL) operand1 = if <a link="impl-aarch64.AnyActiveElement.2" file="shared_pseudocode.xml" hover="function: boolean AnyActiveElement(bits(N) mask, integer esize)">AnyActiveElement</a>(mask, esize) then <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[s1, VL] else <a link="impl-shared.Zeros.1" file="shared_pseudocode.xml" hover="function: bits(N) Zeros(integer N)">Zeros</a>(VL);
constant bits(VL) operand2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[s2, VL];
bits(VL) result;
integer x = 0;
boolean active = FALSE;
constant integer lastnum = <a link="impl-aarch64.LastActiveElement.2" file="shared_pseudocode.xml" hover="function: integer LastActiveElement(bits(N) mask, integer esize)">LastActiveElement</a>(mask, esize);

if lastnum &gt;= 0 then
    for e = 0 to lastnum
        active = active || <a link="impl-aarch64.ActivePredicateElement.3" file="shared_pseudocode.xml" hover="function: boolean ActivePredicateElement(bits(N) pred, integer e, integer esize)">ActivePredicateElement</a>(mask, e, esize);
        if active then
            <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, x, esize] = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, e, esize];
            x = x + 1;

constant integer nelements = (elements - x) - 1;
for e = 0 to nelements
    <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, x, esize] = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, e, esize];
    x = x + 1;

<a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[dst, VL] = result;</pstext></ps>
  </ps_section>
</instructionsection>
