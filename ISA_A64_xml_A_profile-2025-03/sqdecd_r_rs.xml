<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="sqdecd_r_rs" title="SQDECD (scalar) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="sve"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="SQDECD"/>
    <docvar key="sve-esize" value="esize-doubleword"/>
  </docvars>
  <heading>SQDECD (scalar)</heading>
  <desc>
    <brief>
      <para>Signed saturating decrement scalar by multiple of 64-bit predicate constraint element count</para>
    </brief>
    <authored>
      <para>Determines the number of active 64-bit
elements implied by the named predicate constraint, multiplies
that by an immediate in the range 1 to 16 inclusive, and
then uses the result to decrement the
  scalar destination.
The
  result is
  saturated to the
     source general-purpose register's
  signed integer range.
  A 32-bit saturated result is then sign-extended to 64 bits.</para>
      <para>The named predicate constraint limits the number of active
elements in a single predicate to:</para>
      <list type="unordered">
        <listitem>
          <content>A fixed number (VL1 to VL256)</content>
        </listitem>
        <listitem>
          <content>The largest power of two (POW2)</content>
        </listitem>
        <listitem>
          <content>The largest multiple of three or four (MUL3 or MUL4)</content>
        </listitem>
        <listitem>
          <content>All available, implicitly a multiple of two (ALL).</content>
        </listitem>
      </list>
      <para>Unspecified or out of range constraint encodings generate an
empty predicate or zero element count rather than Undefined
Instruction exception.</para>
    </authored>
    <predicated>False</predicated>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <classesintro count="2">
      <txt>It has encodings from 2 classes:</txt>
      <a href="#iclass_32_bit">32-bit</a>
      <txt> and </txt>
      <a href="#iclass_64_bit">64-bit</a>
    </classesintro>
    <iclass name="32-bit" oneof="2" id="iclass_32_bit" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="atomic-ops" value="SQDECD-32-fsreg"/>
        <docvar key="instr-class" value="sve"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="SQDECD"/>
        <docvar key="reg-type" value="32-fsreg"/>
        <docvar key="sve-esize" value="esize-doubleword"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SVE || FEAT_SME" name="FEAT_SVE || FEAT_SME"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_countelt.sve_int_pred_pattern_b.sqdecd_r_rs_sx" tworows="1">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" name="sf" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="19" width="4" name="imm4" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="15" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="13" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="11" name="D" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="10" name="U" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="pattern" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Rdn" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="sqdecd_r_rs_sx" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SQDECD"/>
          <docvar key="instr-class" value="sve"/>
          <docvar key="sve-esize" value="esize-doubleword"/>
          <docvar key="atomic-ops" value="SQDECD-32-fsreg"/>
          <docvar key="reg-type" value="32-fsreg"/>
        </docvars>
        <asmtemplate><text>SQDECD  </text><a hover="Is the 64-bit name of the source and destination general-purpose register, encoded in the &quot;Rdn&quot; field." link="Xdn">&lt;Xdn&gt;</a><text>, </text><a hover="Is the 32-bit name of the source and destination general-purpose register, encoded in the &quot;Rdn&quot; field." link="Wdn">&lt;Wdn&gt;</a><text>{, </text><a hover="Is the optional pattern specifier, defaulting to ALL, " link="pattern">&lt;pattern&gt;</a><text>{, MUL #</text><a hover="Is the immediate multiplier, in the range 1 to 16, defaulting to 1, encoded in the &quot;imm4&quot; field." link="imm__45">&lt;imm&gt;</a><text>}}</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_countelt.sve_int_pred_pattern_b.sqdecd_r_rs_sx" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE) &amp;&amp; !IsFeatureImplemented(FEAT_SME) then
    <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 64;
constant integer dn = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rdn);
constant bits(5) pat = pattern;
constant integer imm = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(imm4) + 1;

constant boolean unsigned = FALSE;
constant integer ssize = 32;</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="64-bit" oneof="2" id="iclass_64_bit" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="atomic-ops" value="SQDECD-64-fsreg"/>
        <docvar key="instr-class" value="sve"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="SQDECD"/>
        <docvar key="reg-type" value="64-fsreg"/>
        <docvar key="sve-esize" value="esize-doubleword"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SVE || FEAT_SME" name="FEAT_SVE || FEAT_SME"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_countelt.sve_int_pred_pattern_b.sqdecd_r_rs_x" tworows="1">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" name="sf" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="19" width="4" name="imm4" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="15" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="13" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="11" name="D" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="10" name="U" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="pattern" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Rdn" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="sqdecd_r_rs_x" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SQDECD"/>
          <docvar key="instr-class" value="sve"/>
          <docvar key="sve-esize" value="esize-doubleword"/>
          <docvar key="atomic-ops" value="SQDECD-64-fsreg"/>
          <docvar key="reg-type" value="64-fsreg"/>
        </docvars>
        <asmtemplate><text>SQDECD  </text><a hover="Is the 64-bit name of the source and destination general-purpose register, encoded in the &quot;Rdn&quot; field." link="Xdn">&lt;Xdn&gt;</a><text>{, </text><a hover="Is the optional pattern specifier, defaulting to ALL, " link="pattern">&lt;pattern&gt;</a><text>{, MUL #</text><a hover="Is the immediate multiplier, in the range 1 to 16, defaulting to 1, encoded in the &quot;imm4&quot; field." link="imm__45">&lt;imm&gt;</a><text>}}</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_countelt.sve_int_pred_pattern_b.sqdecd_r_rs_x" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE) &amp;&amp; !IsFeatureImplemented(FEAT_SME) then
    <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 64;
constant integer dn = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rdn);
constant bits(5) pat = pattern;
constant integer imm = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(imm4) + 1;

constant boolean unsigned = FALSE;
constant integer ssize = 64;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="sqdecd_r_rs_sx, sqdecd_r_rs_x" symboldefcount="1">
      <symbol link="Xdn">&lt;Xdn&gt;</symbol>
      <account encodedin="Rdn">
        <intro>
          <para>Is the 64-bit name of the source and destination general-purpose register, encoded in the "Rdn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sqdecd_r_rs_sx" symboldefcount="1">
      <symbol link="Wdn">&lt;Wdn&gt;</symbol>
      <account encodedin="Rdn">
        <intro>
          <para>Is the 32-bit name of the source and destination general-purpose register, encoded in the "Rdn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sqdecd_r_rs_sx, sqdecd_r_rs_x" symboldefcount="1">
      <symbol link="pattern">&lt;pattern&gt;</symbol>
      <definition encodedin="pattern">
        <intro>Is the optional pattern specifier, defaulting to ALL, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">pattern</entry>
                <entry class="symbol">&lt;pattern&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">00000</entry>
                <entry class="symbol">POW2</entry>
              </row>
              <row>
                <entry class="bitfield">00001</entry>
                <entry class="symbol">VL1</entry>
              </row>
              <row>
                <entry class="bitfield">00010</entry>
                <entry class="symbol">VL2</entry>
              </row>
              <row>
                <entry class="bitfield">00011</entry>
                <entry class="symbol">VL3</entry>
              </row>
              <row>
                <entry class="bitfield">00100</entry>
                <entry class="symbol">VL4</entry>
              </row>
              <row>
                <entry class="bitfield">00101</entry>
                <entry class="symbol">VL5</entry>
              </row>
              <row>
                <entry class="bitfield">00110</entry>
                <entry class="symbol">VL6</entry>
              </row>
              <row>
                <entry class="bitfield">00111</entry>
                <entry class="symbol">VL7</entry>
              </row>
              <row>
                <entry class="bitfield">01000</entry>
                <entry class="symbol">VL8</entry>
              </row>
              <row>
                <entry class="bitfield">01001</entry>
                <entry class="symbol">VL16</entry>
              </row>
              <row>
                <entry class="bitfield">01010</entry>
                <entry class="symbol">VL32</entry>
              </row>
              <row>
                <entry class="bitfield">01011</entry>
                <entry class="symbol">VL64</entry>
              </row>
              <row>
                <entry class="bitfield">01100</entry>
                <entry class="symbol">VL128</entry>
              </row>
              <row>
                <entry class="bitfield">01101</entry>
                <entry class="symbol">VL256</entry>
              </row>
              <row>
                <entry class="bitfield">0111x</entry>
                <entry class="symbol">#uimm5</entry>
              </row>
              <row>
                <entry class="bitfield">1xx00</entry>
                <entry class="symbol">#uimm5</entry>
              </row>
              <row>
                <entry class="bitfield">1x0x1</entry>
                <entry class="symbol">#uimm5</entry>
              </row>
              <row>
                <entry class="bitfield">1x010</entry>
                <entry class="symbol">#uimm5</entry>
              </row>
              <row>
                <entry class="bitfield">101x1</entry>
                <entry class="symbol">#uimm5</entry>
              </row>
              <row>
                <entry class="bitfield">10110</entry>
                <entry class="symbol">#uimm5</entry>
              </row>
              <row>
                <entry class="bitfield">11101</entry>
                <entry class="symbol">MUL4</entry>
              </row>
              <row>
                <entry class="bitfield">11110</entry>
                <entry class="symbol">MUL3</entry>
              </row>
              <row>
                <entry class="bitfield">11111</entry>
                <entry class="symbol">ALL</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="sqdecd_r_rs_sx, sqdecd_r_rs_x" symboldefcount="1">
      <symbol link="imm__45">&lt;imm&gt;</symbol>
      <account encodedin="imm4">
        <intro>
          <para>Is the immediate multiplier, in the range 1 to 16, defaulting to 1, encoded in the "imm4" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sve.sve_countelt.sve_int_pred_pattern_b.sqdecd_r_rs_sx" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckSVEEnabled()">CheckSVEEnabled</a>();
constant integer count = <a link="impl-aarch64.DecodePredCount.2" file="shared_pseudocode.xml" hover="function: integer DecodePredCount(bits(5) bitpattern, integer esize)">DecodePredCount</a>(pat, esize);
constant bits(ssize) operand1 = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[dn, ssize];
bits(ssize) result;
constant integer element1 = <a link="impl-shared.Int.2" file="shared_pseudocode.xml" hover="function: integer Int(bits(N) x, boolean unsigned)">Int</a>(operand1, unsigned);
(result, -) = <a link="impl-shared.SatQ.3" file="shared_pseudocode.xml" hover="function: (bits(N), boolean) SatQ(integer i, integer N, boolean unsigned)">SatQ</a>(element1 - (count * imm), ssize, unsigned);
<a link="impl-aarch64.X.write.2" file="shared_pseudocode.xml" hover="accessor: X[integer n, integer width] = bits(width) value">X</a>[dn, 64] = <a link="impl-shared.Extend.3" file="shared_pseudocode.xml" hover="function: bits(N) Extend(bits(M) x, integer N, boolean unsigned)">Extend</a>(result, 64, unsigned);</pstext></ps>
  </ps_section>
</instructionsection>
