<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="pmlal_mz_zzzw" title="PMLAL -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="sve2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="ldstruct-regcount" value="to-2reg"/>
    <docvar key="mnemonic" value="PMLAL"/>
  </docvars>
  <heading>PMLAL</heading>
  <desc>
    <brief>
      <para>Multi-vector polynomial multiply long and accumulate vectors</para>
    </brief>
    <authored>
      <para>Polynomial multiply over [0, 1] the corresponding even-numbered elements of the first and
second source vectors, and bitwise exclusive-OR the result with the overlapping double-width
elements of the first destination vector. Perform the same operation with odd-numbered elements
of the source vectors, writing to the second destination vector. This instruction is unpredicated.</para>
      <para>This instruction is legal when executed in Streaming SVE mode if both FEAT_SSVE_AES
and FEAT_SVE_AES2 are implemented.</para>
    </authored>
    <predicated>False</predicated>
    <sm_policy>SM_0_or_1</sm_policy>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="SVE2" oneof="1" id="iclass_sve2" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="ldstruct-regcount" value="to-2reg"/>
        <docvar key="mnemonic" value="PMLAL"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SVE_AES2" name="ARMv9.6"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_intx_crypto.sve_crypto_pmlal_multi.pmlal_mz_zzzw_1x2" tworows="1">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Zm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="3" settings="3">
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="4" name="Zda" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="0" width="1" settings="1">
          <c>0</c>
        </box>
      </regdiagram>
      <encoding name="pmlal_mz_zzzw_1x2" oneofinclass="1" oneof="1" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="PMLAL"/>
          <docvar key="instr-class" value="sve2"/>
          <docvar key="ldstruct-regcount" value="to-2reg"/>
        </docvars>
        <asmtemplate><text>PMLAL  { </text><a hover="Is the name of the first scalable vector register of the destination multi-vector group, encoded as &quot;Zda&quot; times 2." link="Zda1">&lt;Zda1&gt;</a><text>.Q-</text><a hover="Is the name of the second scalable vector register of the destination multi-vector group, encoded as &quot;Zda&quot; times 2 plus 1." link="Zda2">&lt;Zda2&gt;</a><text>.Q }, </text><a hover="Is the name of the first source scalable vector register, encoded in the &quot;Zn&quot; field." link="Zn__2">&lt;Zn&gt;</a><text>.D, </text><a hover="Is the name of the second source scalable vector register, encoded in the &quot;Zm&quot; field." link="Zm">&lt;Zm&gt;</a><text>.D</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_intx_crypto.sve_crypto_pmlal_multi.pmlal_mz_zzzw_1x2" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE_AES2) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 128;
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer da = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zda:'0');</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="pmlal_mz_zzzw_1x2" symboldefcount="1">
      <symbol link="Zda1">&lt;Zda1&gt;</symbol>
      <account encodedin="Zda">
        <intro>
          <para>Is the name of the first scalable vector register of the destination multi-vector group, encoded as "Zda" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="pmlal_mz_zzzw_1x2" symboldefcount="1">
      <symbol link="Zda2">&lt;Zda2&gt;</symbol>
      <account encodedin="Zda">
        <intro>
          <para>Is the name of the second scalable vector register of the destination multi-vector group, encoded as "Zda" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="pmlal_mz_zzzw_1x2" symboldefcount="1">
      <symbol link="Zn__2">&lt;Zn&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the first source scalable vector register, encoded in the "Zn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="pmlal_mz_zzzw_1x2" symboldefcount="1">
      <symbol link="Zm">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the second source scalable vector register, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sve.sve_intx_crypto.sve_crypto_pmlal_multi.pmlal_mz_zzzw_1x2" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">if IsFeatureImplemented(FEAT_SSVE_AES) then
    <a link="impl-aarch64.CheckSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckSVEEnabled()">CheckSVEEnabled</a>();
else
    <a link="impl-aarch64.CheckNonStreamingSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckNonStreamingSVEEnabled()">CheckNonStreamingSVEEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer elements = VL DIV esize;
constant bits(VL) operand1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[n, VL];
constant bits(VL) operand2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m, VL];
bits(VL) result_lo = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[da + 0, VL];
bits(VL) result_hi = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[da + 1, VL];

for e = 0 to elements-1
    constant bits(esize DIV 2) element1_lo = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, 2*e + 0, esize DIV 2];
    constant bits(esize DIV 2) element2_lo = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, 2*e + 0, esize DIV 2];
    constant bits(esize DIV 2) element1_hi = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, 2*e + 1, esize DIV 2];
    constant bits(esize DIV 2) element2_hi = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, 2*e + 1, esize DIV 2];
    constant bits(esize) product_lo = <a link="impl-shared.PolynomialMult.2" file="shared_pseudocode.xml" hover="function: bits(M+N) PolynomialMult(bits(M) op1, bits(N) op2)">PolynomialMult</a>(element1_lo, element2_lo);
    constant bits(esize) product_hi = <a link="impl-shared.PolynomialMult.2" file="shared_pseudocode.xml" hover="function: bits(M+N) PolynomialMult(bits(M) op1, bits(N) op2)">PolynomialMult</a>(element1_hi, element2_hi);
    <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result_lo, e, esize] = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[result_lo, e, esize] EOR product_lo;
    <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result_hi, e, esize] = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[result_hi, e, esize] EOR product_hi;

<a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[da + 0, VL] = result_lo;
<a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[da + 1, VL] = result_hi;</pstext></ps>
  </ps_section>
</instructionsection>
