<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="movaz_z_rza" title="MOVAZ (tile to vector, single) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="mortlach2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="MOVAZ"/>
  </docvars>
  <heading>MOVAZ (tile to vector, single)</heading>
  <desc>
    <brief>
      <para>Move and zero ZA tile slice to vector register</para>
    </brief>
    <authored>
      <para>This instruction operates on a horizontal or vertical slice
within a named ZA tile of the specified element size. The tile slice
is zeroed after moving its contents to the destination vector.</para>
      <para>The slice number within the tile is selected by
the sum of the slice index register and immediate offset,
modulo the number of such elements in a vector.
The immediate offset is in the range 0 to the number of elements in a 128-bit vector segment minus 1.</para>
      <para>This instruction is unpredicated.</para>
    </authored>
    <predicated>False</predicated>
    <uses_dit condition="FEAT_SVE2 is implemented or FEAT_SME is implemented">True</uses_dit>
    <sm_policy>SM_1_only</sm_policy>
  </desc>
  <operationalnotes>
    <operationalnote>
      <operationalnote_content>
        <para>If PSTATE.DIT is 1:</para>
        <list type="unordered">
          <listitem>
            <content>The execution time of this instruction is independent of:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its registers.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
          <listitem>
            <content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its registers.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
        </list>
      </operationalnote_content>
    </operationalnote>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <classesintro count="5">
      <txt>It has encodings from 5 classes:</txt>
      <a href="#iclass_8_bit">8-bit</a>
      <txt>, </txt>
      <a href="#iclass_16_bit">16-bit</a>
      <txt>, </txt>
      <a href="#iclass_32_bit">32-bit</a>
      <txt>, </txt>
      <a href="#iclass_64_bit">64-bit</a>
      <txt> and </txt>
      <a href="#iclass_128_bit">128-bit</a>
    </classesintro>
    <iclass name="8-bit" oneof="5" id="iclass_8_bit" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="asimdimm-datatype" value="per-byte"/>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="MOVAZ"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2p1" name="ARMv9.4"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_ext.mortlach_extract_zero.movaz_z_rza_b" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="21" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="18" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="17" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="16" name="Q" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="15" width="1" name="V" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="14" width="2" name="Rs" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="8" width="4" name="off4" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="movaz_z_rza_b" oneofinclass="1" oneof="5" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="MOVAZ"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="asimdimm-datatype" value="per-byte"/>
        </docvars>
        <asmtemplate><text>MOVAZ  </text><a hover="Is the name of the destination scalable vector register, encoded in the &quot;Zd&quot; field." link="Zd">&lt;Zd&gt;</a><text>.B, ZA0</text><a hover="Is the horizontal or vertical slice indicator, " link="HV__4">&lt;HV&gt;</a><text>.B[</text><a hover="Is the 32-bit name of the slice index register W12-W15, encoded in the &quot;Rs&quot; field." link="Ws__3">&lt;Ws&gt;</a><text>, </text><a hover="For the &quot;8-bit&quot; variant: is the slice index offset, in the range 0 to 15, encoded in the &quot;off4&quot; field." link="offs__2">&lt;offs&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_ext.mortlach_extract_zero.movaz_z_rza_b" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2p1) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer s = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('011':Rs);
constant integer n = 0;
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(off4);
constant integer esize = 8;
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
constant boolean vertical = V == '1';</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="16-bit" oneof="5" id="iclass_16_bit" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="asimdimm-datatype" value="per-halfword"/>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="MOVAZ"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2p1" name="ARMv9.4"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_ext.mortlach_extract_zero.movaz_z_rza_h" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="21" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="18" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="17" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="16" name="Q" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="15" width="1" name="V" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="14" width="2" name="Rs" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="8" width="1" name="ZAn" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="7" width="3" name="off3" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="movaz_z_rza_h" oneofinclass="1" oneof="5" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="MOVAZ"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="asimdimm-datatype" value="per-halfword"/>
        </docvars>
        <asmtemplate><text>MOVAZ  </text><a hover="Is the name of the destination scalable vector register, encoded in the &quot;Zd&quot; field." link="Zd">&lt;Zd&gt;</a><text>.H, </text><a hover="For the &quot;16-bit&quot; variant: is the name of the ZA tile ZA0-ZA1 to be accessed, encoded in the &quot;ZAn&quot; field." link="ZAn__2">&lt;ZAn&gt;</a><a hover="Is the horizontal or vertical slice indicator, " link="HV__4">&lt;HV&gt;</a><text>.H[</text><a hover="Is the 32-bit name of the slice index register W12-W15, encoded in the &quot;Rs&quot; field." link="Ws__3">&lt;Ws&gt;</a><text>, </text><a hover="For the &quot;16-bit&quot; variant: is the slice index offset, in the range 0 to 7, encoded in the &quot;off3&quot; field." link="offs__4">&lt;offs&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_ext.mortlach_extract_zero.movaz_z_rza_h" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2p1) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer s = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('011':Rs);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(ZAn);
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(off3);
constant integer esize = 16;
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
constant boolean vertical = V == '1';</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="32-bit" oneof="5" id="iclass_32_bit" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="asimdimm-datatype" value="per-word"/>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="MOVAZ"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2p1" name="ARMv9.4"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_ext.mortlach_extract_zero.movaz_z_rza_w" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="21" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="18" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="17" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="16" name="Q" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="15" width="1" name="V" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="14" width="2" name="Rs" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="8" width="2" name="ZAn" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="6" width="2" name="off2" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="movaz_z_rza_w" oneofinclass="1" oneof="5" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="MOVAZ"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="asimdimm-datatype" value="per-word"/>
        </docvars>
        <asmtemplate><text>MOVAZ  </text><a hover="Is the name of the destination scalable vector register, encoded in the &quot;Zd&quot; field." link="Zd">&lt;Zd&gt;</a><text>.S, </text><a hover="For the &quot;32-bit&quot; variant: is the name of the ZA tile ZA0-ZA3 to be accessed, encoded in the &quot;ZAn&quot; field." link="ZAn__3">&lt;ZAn&gt;</a><a hover="Is the horizontal or vertical slice indicator, " link="HV__4">&lt;HV&gt;</a><text>.S[</text><a hover="Is the 32-bit name of the slice index register W12-W15, encoded in the &quot;Rs&quot; field." link="Ws__3">&lt;Ws&gt;</a><text>, </text><a hover="For the &quot;32-bit&quot; variant: is the slice index offset, in the range 0 to 3, encoded in the &quot;off2&quot; field." link="offs__6">&lt;offs&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_ext.mortlach_extract_zero.movaz_z_rza_w" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2p1) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer s = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('011':Rs);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(ZAn);
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(off2);
constant integer esize = 32;
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
constant boolean vertical = V == '1';</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="64-bit" oneof="5" id="iclass_64_bit" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="asimdimm-datatype" value="per-doubleword"/>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="MOVAZ"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2p1" name="ARMv9.4"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_ext.mortlach_extract_zero.movaz_z_rza_d" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="21" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="18" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="17" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="16" name="Q" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="15" width="1" name="V" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="14" width="2" name="Rs" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="8" width="3" name="ZAn" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="5" width="1" name="o1" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="movaz_z_rza_d" oneofinclass="1" oneof="5" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="MOVAZ"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="asimdimm-datatype" value="per-doubleword"/>
        </docvars>
        <asmtemplate><text>MOVAZ  </text><a hover="Is the name of the destination scalable vector register, encoded in the &quot;Zd&quot; field." link="Zd">&lt;Zd&gt;</a><text>.D, </text><a hover="For the &quot;64-bit&quot; variant: is the name of the ZA tile ZA0-ZA7 to be accessed, encoded in the &quot;ZAn&quot; field." link="ZAn">&lt;ZAn&gt;</a><a hover="Is the horizontal or vertical slice indicator, " link="HV__4">&lt;HV&gt;</a><text>.D[</text><a hover="Is the 32-bit name of the slice index register W12-W15, encoded in the &quot;Rs&quot; field." link="Ws__3">&lt;Ws&gt;</a><text>, </text><a hover="For the &quot;64-bit&quot; variant: is the slice index offset, in the range 0 to 1, encoded in the &quot;o1&quot; field." link="offs__3">&lt;offs&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_ext.mortlach_extract_zero.movaz_z_rza_d" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2p1) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer s = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('011':Rs);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(ZAn);
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(o1);
constant integer esize = 64;
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
constant boolean vertical = V == '1';</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="128-bit" oneof="5" id="iclass_128_bit" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="asimdimm-datatype" value="per-quadword"/>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="MOVAZ"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2p1" name="ARMv9.4"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_ext.mortlach_extract_zero.movaz_z_rza_q" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="21" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="18" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="17" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="16" name="Q" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="15" width="1" name="V" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="14" width="2" name="Rs" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="8" width="4" name="ZAn" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="movaz_z_rza_q" oneofinclass="1" oneof="5" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="MOVAZ"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="asimdimm-datatype" value="per-quadword"/>
        </docvars>
        <asmtemplate><text>MOVAZ  </text><a hover="Is the name of the destination scalable vector register, encoded in the &quot;Zd&quot; field." link="Zd">&lt;Zd&gt;</a><text>.Q, </text><a hover="For the &quot;128-bit&quot; variant: is the name of the ZA tile ZA0-ZA15 to be accessed, encoded in the &quot;ZAn&quot; field." link="ZAn__4">&lt;ZAn&gt;</a><a hover="Is the horizontal or vertical slice indicator, " link="HV__4">&lt;HV&gt;</a><text>.Q[</text><a hover="Is the 32-bit name of the slice index register W12-W15, encoded in the &quot;Rs&quot; field." link="Ws__3">&lt;Ws&gt;</a><text>, </text><a hover="For the &quot;128-bit&quot; variant: is the slice index offset, with implicit value 0." link="offs__5">&lt;offs&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_ext.mortlach_extract_zero.movaz_z_rza_q" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2p1) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer s = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('011':Rs);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(ZAn);
constant integer offset = 0;
constant integer esize = 128;
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
constant boolean vertical = V == '1';</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="movaz_z_rza_b, movaz_z_rza_h, movaz_z_rza_w, movaz_z_rza_d, movaz_z_rza_q" symboldefcount="1">
      <symbol link="Zd">&lt;Zd&gt;</symbol>
      <account encodedin="Zd">
        <intro>
          <para>Is the name of the destination scalable vector register, encoded in the "Zd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="movaz_z_rza_b, movaz_z_rza_h, movaz_z_rza_w, movaz_z_rza_d, movaz_z_rza_q" symboldefcount="1">
      <symbol link="HV__4">&lt;HV&gt;</symbol>
      <definition encodedin="V">
        <intro>Is the horizontal or vertical slice indicator, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">V</entry>
                <entry class="symbol">&lt;HV&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">0</entry>
                <entry class="symbol">H</entry>
              </row>
              <row>
                <entry class="bitfield">1</entry>
                <entry class="symbol">V</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="movaz_z_rza_b, movaz_z_rza_h, movaz_z_rza_w, movaz_z_rza_d, movaz_z_rza_q" symboldefcount="1">
      <symbol link="Ws__3">&lt;Ws&gt;</symbol>
      <account encodedin="Rs">
        <intro>
          <para>Is the 32-bit name of the slice index register W12-W15, encoded in the "Rs" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="movaz_z_rza_b" symboldefcount="1">
      <symbol link="offs__2">&lt;offs&gt;</symbol>
      <account encodedin="off4">
        <intro>
          <para>For the "8-bit" variant: is the slice index offset, in the range 0 to 15, encoded in the "off4" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="movaz_z_rza_h" symboldefcount="2">
      <symbol link="offs__4">&lt;offs&gt;</symbol>
      <account encodedin="off3">
        <intro>
          <para>For the "16-bit" variant: is the slice index offset, in the range 0 to 7, encoded in the "off3" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="movaz_z_rza_w" symboldefcount="3">
      <symbol link="offs__6">&lt;offs&gt;</symbol>
      <account encodedin="off2">
        <intro>
          <para>For the "32-bit" variant: is the slice index offset, in the range 0 to 3, encoded in the "off2" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="movaz_z_rza_d" symboldefcount="4">
      <symbol link="offs__3">&lt;offs&gt;</symbol>
      <account encodedin="o1">
        <intro>
          <para>For the "64-bit" variant: is the slice index offset, in the range 0 to 1, encoded in the "o1" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="movaz_z_rza_q" symboldefcount="5">
      <symbol link="offs__5">&lt;offs&gt;</symbol>
      <account encodedin="">
        <intro>
          <para>For the "128-bit" variant: is the slice index offset, with implicit value 0.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="movaz_z_rza_h" symboldefcount="1">
      <symbol link="ZAn__2">&lt;ZAn&gt;</symbol>
      <account encodedin="ZAn">
        <intro>
          <para>For the "16-bit" variant: is the name of the ZA tile ZA0-ZA1 to be accessed, encoded in the "ZAn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="movaz_z_rza_w" symboldefcount="2">
      <symbol link="ZAn__3">&lt;ZAn&gt;</symbol>
      <account encodedin="ZAn">
        <intro>
          <para>For the "32-bit" variant: is the name of the ZA tile ZA0-ZA3 to be accessed, encoded in the "ZAn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="movaz_z_rza_d" symboldefcount="3">
      <symbol link="ZAn">&lt;ZAn&gt;</symbol>
      <account encodedin="ZAn">
        <intro>
          <para>For the "64-bit" variant: is the name of the ZA tile ZA0-ZA7 to be accessed, encoded in the "ZAn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="movaz_z_rza_q" symboldefcount="4">
      <symbol link="ZAn__4">&lt;ZAn&gt;</symbol>
      <account encodedin="ZAn">
        <intro>
          <para>For the "128-bit" variant: is the name of the ZA tile ZA0-ZA15 to be accessed, encoded in the "ZAn" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sme.mortlach_ext.mortlach_extract_zero.movaz_z_rza_b" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckStreamingSVEAndZAEnabled.0" file="shared_pseudocode.xml" hover="function: CheckStreamingSVEAndZAEnabled()">CheckStreamingSVEAndZAEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer PL = VL DIV 8;
constant integer dim = VL DIV esize;
constant bits(32) index = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[s, 32];
constant integer  slice = (<a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(index) + offset) MOD dim;
constant bits(VL) operand = <a link="impl-aarch64.ZAslice.read.5" file="shared_pseudocode.xml" hover="accessor: bits(width) ZAslice[integer tile, ESize esize, boolean vertical, integer slice, integer width]">ZAslice</a>[n, esize, vertical, slice, VL];
<a link="impl-aarch64.ZAslice.write.5" file="shared_pseudocode.xml" hover="accessor: ZAslice[integer tile, ESize esize, boolean vertical, integer slice, integer width] = bits(width) value">ZAslice</a>[n, esize, vertical, slice, VL] = <a link="impl-shared.Zeros.1" file="shared_pseudocode.xml" hover="function: bits(N) Zeros(integer N)">Zeros</a>(VL);
<a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[d, VL] = operand;</pstext></ps>
  </ps_section>
</instructionsection>
