<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="adr_z_az" title="ADR -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="sve"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="ADR"/>
  </docvars>
  <heading>ADR</heading>
  <desc>
    <brief>
      <para>Compute vector address</para>
    </brief>
    <authored>
      <para>Optionally sign or zero-extend the least significant 32 bits
of each element from a vector of offsets or indices in the
second source vector, scale each index by 2, 4 or 8, add
to a vector of base addresses from the first source vector,
and place the resulting addresses in the destination
vector. This instruction is unpredicated.</para>
      <para>This instruction is illegal when executed in Streaming SVE mode, unless FEAT_SME_FA64 is implemented and enabled.</para>
    </authored>
    <predicated>False</predicated>
    <uses_dit condition="FEAT_SVE2 is implemented or FEAT_SME is implemented">True</uses_dit>
    <sm_policy>SM_0_only</sm_policy>
  </desc>
  <operationalnotes>
    <operationalnote>
      <operationalnote_content>
        <para>If PSTATE.DIT is 1:</para>
        <list type="unordered">
          <listitem>
            <content>The execution time of this instruction is independent of:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its registers.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
          <listitem>
            <content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its registers.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
        </list>
      </operationalnote_content>
    </operationalnote>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <classesintro count="3">
      <txt>It has encodings from 3 classes:</txt>
      <a href="#iclass_packed_offsets">Packed offsets</a>
      <txt>, </txt>
      <a href="#iclass_unpacked_32_bit_signed_offsets">Unpacked 32-bit signed offsets</a>
      <txt> and </txt>
      <a href="#iclass_unpacked_32_bit_unsigned_offsets">Unpacked 32-bit unsigned offsets</a>
    </classesintro>
    <iclass name="Packed offsets" oneof="3" id="iclass_packed_offsets" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="ADR"/>
        <docvar key="sve-offset-type" value="off_pkd"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SVE" name="PROFILE_A"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_int_adr.sve_int_bin_cons_misc_0_a.adr_z_az_sd_same_scaled">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="22" width="1" name="sz" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Zm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="4" settings="4">
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="11" width="2" name="msz" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="adr_z_az_sd_same_scaled" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="ADR"/>
          <docvar key="instr-class" value="sve"/>
          <docvar key="sve-offset-type" value="off_pkd"/>
        </docvars>
        <asmtemplate><text>ADR  </text><a hover="Is the name of the destination scalable vector register, encoded in the &quot;Zd&quot; field." link="Zd">&lt;Zd&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__11">&lt;T&gt;</a><text>, [</text><a hover="Is the name of the base scalable vector register, encoded in the &quot;Zn&quot; field." link="Zn__3">&lt;Zn&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__11">&lt;T&gt;</a><text>, </text><a hover="Is the name of the offset scalable vector register, encoded in the &quot;Zm&quot; field." link="Zm__3">&lt;Zm&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__11">&lt;T&gt;</a><text>{, </text><a hover="Is the index extend and shift specifier, " link="mod_LSL">&lt;mod&gt;</a><text> </text><a hover="Is the index shift amount, " link="amount__12">&lt;amount&gt;</a><text>}]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_int_adr.sve_int_bin_cons_misc_0_a.adr_z_az_sd_same_scaled" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 32 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(sz);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
constant integer osize = esize;
constant boolean unsigned = TRUE;
constant integer mbytes = 1 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(msz);</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Unpacked 32-bit signed offsets" oneof="3" id="iclass_unpacked_32_bit_signed_offsets" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="ADR"/>
        <docvar key="sve-offset-type" value="off_s_s32"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SVE" name="PROFILE_A"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_int_adr.sve_int_bin_cons_misc_0_a.adr_z_az_d_s32_scaled" tworows="1">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="opc" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Zm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="4" settings="4">
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="11" width="2" name="msz" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="adr_z_az_d_s32_scaled" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="ADR"/>
          <docvar key="instr-class" value="sve"/>
          <docvar key="sve-offset-type" value="off_s_s32"/>
        </docvars>
        <asmtemplate><text>ADR  </text><a hover="Is the name of the destination scalable vector register, encoded in the &quot;Zd&quot; field." link="Zd">&lt;Zd&gt;</a><text>.D, [</text><a hover="Is the name of the base scalable vector register, encoded in the &quot;Zn&quot; field." link="Zn__3">&lt;Zn&gt;</a><text>.D, </text><a hover="Is the name of the offset scalable vector register, encoded in the &quot;Zm&quot; field." link="Zm__3">&lt;Zm&gt;</a><text>.D, SXTW{</text><a hover="Is the index shift amount, " link="amount__12">&lt;amount&gt;</a><text>}]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_int_adr.sve_int_bin_cons_misc_0_a.adr_z_az_d_s32_scaled" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 64;
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
constant integer osize = 32;
constant boolean unsigned = FALSE;
constant integer mbytes = 1 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(msz);</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Unpacked 32-bit unsigned offsets" oneof="3" id="iclass_unpacked_32_bit_unsigned_offsets" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="ADR"/>
        <docvar key="sve-offset-type" value="off_s_u32"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SVE" name="PROFILE_A"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_int_adr.sve_int_bin_cons_misc_0_a.adr_z_az_d_u32_scaled" tworows="1">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="opc" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Zm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="4" settings="4">
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="11" width="2" name="msz" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="adr_z_az_d_u32_scaled" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="ADR"/>
          <docvar key="instr-class" value="sve"/>
          <docvar key="sve-offset-type" value="off_s_u32"/>
        </docvars>
        <asmtemplate><text>ADR  </text><a hover="Is the name of the destination scalable vector register, encoded in the &quot;Zd&quot; field." link="Zd">&lt;Zd&gt;</a><text>.D, [</text><a hover="Is the name of the base scalable vector register, encoded in the &quot;Zn&quot; field." link="Zn__3">&lt;Zn&gt;</a><text>.D, </text><a hover="Is the name of the offset scalable vector register, encoded in the &quot;Zm&quot; field." link="Zm__3">&lt;Zm&gt;</a><text>.D, UXTW{</text><a hover="Is the index shift amount, " link="amount__12">&lt;amount&gt;</a><text>}]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_int_adr.sve_int_bin_cons_misc_0_a.adr_z_az_d_u32_scaled" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 64;
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
constant integer osize = 32;
constant boolean unsigned = TRUE;
constant integer mbytes = 1 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(msz);</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="adr_z_az_sd_same_scaled, adr_z_az_d_s32_scaled, adr_z_az_d_u32_scaled" symboldefcount="1">
      <symbol link="Zd">&lt;Zd&gt;</symbol>
      <account encodedin="Zd">
        <intro>
          <para>Is the name of the destination scalable vector register, encoded in the "Zd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="adr_z_az_sd_same_scaled" symboldefcount="1">
      <symbol link="T__11">&lt;T&gt;</symbol>
      <definition encodedin="sz">
        <intro>Is the size specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">sz</entry>
                <entry class="symbol">&lt;T&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">0</entry>
                <entry class="symbol">S</entry>
              </row>
              <row>
                <entry class="bitfield">1</entry>
                <entry class="symbol">D</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="adr_z_az_sd_same_scaled, adr_z_az_d_s32_scaled, adr_z_az_d_u32_scaled" symboldefcount="1">
      <symbol link="Zn__3">&lt;Zn&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the base scalable vector register, encoded in the "Zn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="adr_z_az_sd_same_scaled, adr_z_az_d_s32_scaled, adr_z_az_d_u32_scaled" symboldefcount="1">
      <symbol link="Zm__3">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the offset scalable vector register, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="adr_z_az_sd_same_scaled" symboldefcount="1">
      <symbol link="mod_LSL">&lt;mod&gt;</symbol>
      <definition encodedin="msz">
        <intro>Is the index extend and shift specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">msz</entry>
                <entry class="symbol">&lt;mod&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">00</entry>
                <entry class="symbol">[absent]</entry>
              </row>
              <row>
                <entry class="bitfield">x1</entry>
                <entry class="symbol">LSL</entry>
              </row>
              <row>
                <entry class="bitfield">10</entry>
                <entry class="symbol">LSL</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="adr_z_az_sd_same_scaled, adr_z_az_d_s32_scaled, adr_z_az_d_u32_scaled" symboldefcount="1">
      <symbol link="amount__12">&lt;amount&gt;</symbol>
      <definition encodedin="msz">
        <intro>Is the index shift amount, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">msz</entry>
                <entry class="symbol">&lt;amount&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">00</entry>
                <entry class="symbol">[absent]</entry>
              </row>
              <row>
                <entry class="bitfield">01</entry>
                <entry class="symbol">#1</entry>
              </row>
              <row>
                <entry class="bitfield">10</entry>
                <entry class="symbol">#2</entry>
              </row>
              <row>
                <entry class="bitfield">11</entry>
                <entry class="symbol">#3</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sve.sve_int_adr.sve_int_bin_cons_misc_0_a.adr_z_az_sd_same_scaled" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckNonStreamingSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckNonStreamingSVEEnabled()">CheckNonStreamingSVEEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer elements = VL DIV esize;
constant bits(VL) base = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[n, VL];
constant bits(VL) offs = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m, VL];
bits(VL) result;

for e = 0 to elements-1
    constant bits(esize) addr = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[base, e, esize];
    constant integer offset = <a link="impl-shared.Int.2" file="shared_pseudocode.xml" hover="function: integer Int(bits(N) x, boolean unsigned)">Int</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[offs, e, esize]&lt;osize-1:0&gt;, unsigned);
    <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, e, esize] = addr + (offset * mbytes);

<a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[d, VL] = result;</pstext></ps>
  </ps_section>
</instructionsection>
