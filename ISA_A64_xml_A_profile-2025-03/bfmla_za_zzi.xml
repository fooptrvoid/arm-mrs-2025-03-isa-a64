<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="bfmla_za_zzi" title="BFMLA (multiple and indexed vector) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="mortlach2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="BFMLA"/>
  </docvars>
  <heading>BFMLA (multiple and indexed vector)</heading>
  <desc>
    <brief>
      <para>Multi-vector BFloat16 fused multiply-add by indexed element</para>
    </brief>
    <authored>
      <para>This instruction multiplies the indexed element of the
second source vector by the corresponding BFloat16 elements of the two or four first
source vectors and destructively adds these values without intermediate rounding to the corresponding elements of the ZA single-vector groups.</para>
      <para>The elements within the second source vector are specified using an immediate element index
which selects the same element position within each 128-bit vector segment. The index
range is from 0 to 7.</para>
      <para>The single-vector
group within each half of or each quarter of the ZA array is selected by the sum
of the vector select register and offset, modulo half or quarter the number of ZA array vectors.</para>
      <para>The <syntax>vector group</syntax> symbol, <syntax>VGx2</syntax> or <syntax>VGx4</syntax>, indicates that
the ZA operand consists of two or four ZA single-vector
groups
respectively. The vector group symbol is preferred
for disassembly, but optional in assembler source code.</para>
      <para>This instruction follows SME2 ZA-targeting non-widening BFloat16
numerical behaviors.</para>
      <para>This instruction is unpredicated.</para>
      <para>ID_AA64SMFR0_EL1.B16B16 indicates whether this instruction is implemented.</para>
    </authored>
    <predicated>False</predicated>
    <sm_policy>SM_1_only</sm_policy>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <classesintro count="2">
      <txt>It has encodings from 2 classes:</txt>
      <a href="#iclass_two_za_single_vectors">Two ZA single-vectors</a>
      <txt> and </txt>
      <a href="#iclass_four_za_single_vectors">Four ZA single-vectors</a>
    </classesintro>
    <iclass name="Two ZA single-vectors" oneof="2" id="iclass_two_za_single_vectors" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="BFMLA"/>
        <docvar key="sme-multireg" value="sme-vgx2-single"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME_B16B16" name="ARMv9.4"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_indexed_2.mortlach_multi2_zza_idx_h.bfmla_za_zzi_h2xi" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="21" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="19" width="4" name="Zm" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="15" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="11" width="2" name="i3h" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="9" width="4" name="Zn" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="5" name="op" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="4" name="S" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="3" width="1" name="i3l" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="2" width="3" name="off3" usename="1">
          <c colspan="3"/>
        </box>
      </regdiagram>
      <encoding name="bfmla_za_zzi_h2xi" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="BFMLA"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="sme-multireg" value="sme-vgx2-single"/>
        </docvars>
        <asmtemplate><text>BFMLA  ZA.H[</text><a hover="Is the 32-bit name of the vector select register W8-W11, encoded in the &quot;Rv&quot; field." link="Wv">&lt;Wv&gt;</a><text>, </text><a hover="Is the vector select offset, in the range 0 to 7, encoded in the &quot;off3&quot; field." link="offs">&lt;offs&gt;</a><text>{, VGx2}], { </text><a hover="For the &quot;Two ZA single-vectors&quot; variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 2." link="Zn1__2">&lt;Zn1&gt;</a><text>.H-</text><a hover="Is the name of the second scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 2 plus 1." link="Zn2__2">&lt;Zn2&gt;</a><text>.H }, </text><a hover="For the &quot;Double-precision&quot; variant: is the name of the second source scalable vector register Z0-Z15, encoded in the &quot;Zm&quot; field." link="Zm__2">&lt;Zm&gt;</a><text>.H[</text><a hover="For the &quot;Four ZA single-vectors of half-precision elements&quot; and &quot;Two ZA single-vectors of half-precision elements&quot; variants: is the element index, in the range 0 to 7, encoded in the &quot;i3h:i3l&quot; fields." link="index__18">&lt;index&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_indexed_2.mortlach_multi2_zza_idx_h.bfmla_za_zzi_h2xi" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME_B16B16) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer esize = 16;
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn:'0');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('0':Zm);
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(off3);
constant integer index = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i3h:i3l);
constant integer nreg = 2;</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Four ZA single-vectors" oneof="2" id="iclass_four_za_single_vectors" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="BFMLA"/>
        <docvar key="sme-multireg" value="sme-vgx4-single"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME_B16B16" name="ARMv9.4"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_indexed_3.mortlach_multi4_zza_idx_h.bfmla_za_zzi_h4xi" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="21" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="19" width="4" name="Zm" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="15" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="11" width="2" name="i3h" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="9" width="3" name="Zn" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="6" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="5" name="op" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="4" name="S" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="3" width="1" name="i3l" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="2" width="3" name="off3" usename="1">
          <c colspan="3"/>
        </box>
      </regdiagram>
      <encoding name="bfmla_za_zzi_h4xi" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="BFMLA"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="sme-multireg" value="sme-vgx4-single"/>
        </docvars>
        <asmtemplate><text>BFMLA  ZA.H[</text><a hover="Is the 32-bit name of the vector select register W8-W11, encoded in the &quot;Rv&quot; field." link="Wv">&lt;Wv&gt;</a><text>, </text><a hover="Is the vector select offset, in the range 0 to 7, encoded in the &quot;off3&quot; field." link="offs">&lt;offs&gt;</a><text>{, VGx4}], { </text><a hover="For the &quot;Four ZA single-vectors&quot; variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 4." link="Zn1__3">&lt;Zn1&gt;</a><text>.H-</text><a hover="Is the name of the fourth scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 4 plus 3." link="Zn4__2">&lt;Zn4&gt;</a><text>.H }, </text><a hover="For the &quot;Double-precision&quot; variant: is the name of the second source scalable vector register Z0-Z15, encoded in the &quot;Zm&quot; field." link="Zm__2">&lt;Zm&gt;</a><text>.H[</text><a hover="For the &quot;Four ZA single-vectors of half-precision elements&quot; and &quot;Two ZA single-vectors of half-precision elements&quot; variants: is the element index, in the range 0 to 7, encoded in the &quot;i3h:i3l&quot; fields." link="index__18">&lt;index&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_indexed_3.mortlach_multi4_zza_idx_h.bfmla_za_zzi_h4xi" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME_B16B16) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer esize = 16;
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn:'00');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('0':Zm);
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(off3);
constant integer index = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i3h:i3l);
constant integer nreg = 4;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="bfmla_za_zzi_h2xi, bfmla_za_zzi_h4xi" symboldefcount="1">
      <symbol link="Wv">&lt;Wv&gt;</symbol>
      <account encodedin="Rv">
        <intro>
          <para>Is the 32-bit name of the vector select register W8-W11, encoded in the "Rv" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="bfmla_za_zzi_h2xi, bfmla_za_zzi_h4xi" symboldefcount="1">
      <symbol link="offs">&lt;offs&gt;</symbol>
      <account encodedin="off3">
        <intro>
          <para>Is the vector select offset, in the range 0 to 7, encoded in the "off3" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="bfmla_za_zzi_h2xi" symboldefcount="1">
      <symbol link="Zn1__2">&lt;Zn1&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>For the "Two ZA single-vectors" variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as "Zn" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="bfmla_za_zzi_h4xi" symboldefcount="2">
      <symbol link="Zn1__3">&lt;Zn1&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>For the "Four ZA single-vectors" variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as "Zn" times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="bfmla_za_zzi_h2xi" symboldefcount="1">
      <symbol link="Zn2__2">&lt;Zn2&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the second scalable vector register of the first source multi-vector group, encoded as "Zn" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="bfmla_za_zzi_h2xi, bfmla_za_zzi_h4xi" symboldefcount="1">
      <symbol link="Zm__2">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the second source scalable vector register Z0-Z15, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="bfmla_za_zzi_h2xi, bfmla_za_zzi_h4xi" symboldefcount="1">
      <symbol link="index__18">&lt;index&gt;</symbol>
      <account encodedin="i3h:i3l">
        <intro>
          <para>Is the element index, in the range 0 to 7, encoded in the "i3h:i3l" fields.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="bfmla_za_zzi_h4xi" symboldefcount="1">
      <symbol link="Zn4__2">&lt;Zn4&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the fourth scalable vector register of the first source multi-vector group, encoded as "Zn" times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sme.mortlach_multi_indexed_2.mortlach_multi2_zza_idx_h.bfmla_za_zzi_h2xi" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckStreamingSVEAndZAEnabled.0" file="shared_pseudocode.xml" hover="function: CheckStreamingSVEAndZAEnabled()">CheckStreamingSVEAndZAEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer elements = VL DIV 16;
constant integer vectors = VL DIV 8;
constant integer vstride = vectors DIV nreg;
constant integer eltspersegment = 128 DIV 16;
constant bits(32) vbase = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[v, 32];
integer vec = (<a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(vbase) + offset) MOD vstride;
bits(VL) result;

for r = 0 to nreg-1
    constant bits(VL) op1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[n+r, VL];
    constant bits(VL) op2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m, VL];
    constant bits(VL) op3 = <a link="impl-aarch64.ZAvector.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) ZAvector[integer index, integer width]">ZAvector</a>[vec, VL];
    for e = 0 to elements-1
        constant bits(16) elem1 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[op1, e, 16];
        constant integer segmentbase = e - (e MOD eltspersegment);
        constant integer s = segmentbase + index;
        constant bits(16) elem2 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[op2, s, 16];
        constant bits(16) elem3 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[op3, e, 16];
        <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, e, 16] = <a link="impl-shared.BFMulAdd_ZA.4" file="shared_pseudocode.xml" hover="function: bits(N) BFMulAdd_ZA(bits(N) addend, bits(N) op1, bits(N) op2, FPCR_Type fpcr_in)">BFMulAdd_ZA</a>(elem3, elem1, elem2, FPCR);
    <a link="impl-aarch64.ZAvector.write.2" file="shared_pseudocode.xml" hover="accessor: ZAvector[integer index, integer width] = bits(width) value">ZAvector</a>[vec, VL] = result;
    vec = vec + vstride;</pstext></ps>
  </ps_section>
</instructionsection>
