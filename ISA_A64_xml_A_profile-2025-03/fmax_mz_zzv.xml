<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="fmax_mz_zzv" title="FMAX (multiple and single vector) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="mortlach2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="FMAX"/>
  </docvars>
  <heading>FMAX (multiple and single vector)</heading>
  <desc>
    <brief>
      <para>Multi-vector floating-point maximum by vector</para>
    </brief>
    <authored>
      <para>This instruction determines the maximum  of
floating-point elements of the
second source vector and
the corresponding floating-point elements of the two or four first source vectors and
destructively places the results in the corresponding elements of the two or four first
source vectors.</para>
      <para>When FPCR.AH is 0, the behavior is as follows:</para>
      <list type="unordered">
        <listitem>
          <content>Negative zero compares less than positive zero.</content>
        </listitem>
        <listitem>
          <content>When FPCR.DN is 0, if either
  element is a NaN, the result is a quiet NaN.</content>
        </listitem>
        <listitem>
          <content>When FPCR.DN is 1, if either
  element is a NaN, the result is Default NaN.</content>
        </listitem>
      </list>
      <para>When FPCR.AH is 1, the behavior is as follows:</para>
      <list type="unordered">
        <listitem>
          <content>If both elements
  are zeros, regardless of the sign of either zero, the result is the
  second element.</content>
        </listitem>
        <listitem>
          <content>If either element is a NaN,
  regardless of the value of FPCR.DN, the result is the
  second element.</content>
        </listitem>
      </list>
      <para>This instruction follows SME2 floating-point numerical behaviors
corresponding to instructions that place their results in one or more
SVE Z vectors.</para>
      <para>This instruction is unpredicated.</para>
    </authored>
    <predicated>False</predicated>
    <sm_policy>SM_1_only</sm_policy>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <classesintro count="2">
      <txt>It has encodings from 2 classes:</txt>
      <a href="#iclass_two_registers">Two registers</a>
      <txt> and </txt>
      <a href="#iclass_four_registers">Four registers</a>
    </classesintro>
    <iclass name="Two registers" oneof="2" id="iclass_two_registers" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="ldstruct-regcount" value="to-2reg"/>
        <docvar key="mnemonic" value="FMAX"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2" name="ARMv9.3"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_sve_2a.mortlach_multi2_z_z_fminmax_sm.fmax_mz_zzv_2x1" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" constraint="!= 00">
          <c colspan="2">!= 00</c>
        </box>
        <box hibit="21" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="19" width="4" name="Zm" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="15" width="5" settings="5">
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="10" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="9" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="7" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="5" name="op" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="4" width="4" name="Zdn" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="0" name="o2" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
      </regdiagram>
      <encoding name="fmax_mz_zzv_2x1" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMAX"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="ldstruct-regcount" value="to-2reg"/>
        </docvars>
        <asmtemplate><text>FMAX  { </text><a hover="For the &quot;Two registers&quot; variant: is the name of the first scalable vector register of the destination and first source multi-vector group, encoded as &quot;Zdn&quot; times 2." link="Zdn1">&lt;Zdn1&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__37">&lt;T&gt;</a><text>-</text><a hover="Is the name of the second scalable vector register of the destination and first source multi-vector group, encoded as &quot;Zdn&quot; times 2 plus 1." link="Zdn2">&lt;Zdn2&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__37">&lt;T&gt;</a><text> }, { </text><a hover="For the &quot;Two registers&quot; variant: is the name of the first scalable vector register of the destination and first source multi-vector group, encoded as &quot;Zdn&quot; times 2." link="Zdn1">&lt;Zdn1&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__37">&lt;T&gt;</a><text>-</text><a hover="Is the name of the second scalable vector register of the destination and first source multi-vector group, encoded as &quot;Zdn&quot; times 2 plus 1." link="Zdn2">&lt;Zdn2&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__37">&lt;T&gt;</a><text> }, </text><a hover="For the &quot;Double-precision&quot; variant: is the name of the second source scalable vector register Z0-Z15, encoded in the &quot;Zm&quot; field." link="Zm__2">&lt;Zm&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__37">&lt;T&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_sve_2a.mortlach_multi2_z_z_fminmax_sm.fmax_mz_zzv_2x1" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 8 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(size);
constant integer dn = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zdn:'0');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('0':Zm);
constant integer nreg = 2;</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Four registers" oneof="2" id="iclass_four_registers" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="ldstruct-regcount" value="to-4reg"/>
        <docvar key="mnemonic" value="FMAX"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2" name="ARMv9.3"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_sve_2b.mortlach_multi4_z_z_fminmax_sm.fmax_mz_zzv_4x1" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" constraint="!= 00">
          <c colspan="2">!= 00</c>
        </box>
        <box hibit="21" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="19" width="4" name="Zm" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="15" width="5" settings="5">
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="10" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="9" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="7" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="5" name="op" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="4" width="3" name="Zdn" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="1" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="0" name="o2" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
      </regdiagram>
      <encoding name="fmax_mz_zzv_4x1" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMAX"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="ldstruct-regcount" value="to-4reg"/>
        </docvars>
        <asmtemplate><text>FMAX  { </text><a hover="For the &quot;Four registers&quot; variant: is the name of the first scalable vector register of the destination and first source multi-vector group, encoded as &quot;Zdn&quot; times 4." link="Zdn1__2">&lt;Zdn1&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__37">&lt;T&gt;</a><text>-</text><a hover="Is the name of the fourth scalable vector register of the destination and first source multi-vector group, encoded as &quot;Zdn&quot; times 4 plus 3." link="Zdn4">&lt;Zdn4&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__37">&lt;T&gt;</a><text> }, { </text><a hover="For the &quot;Four registers&quot; variant: is the name of the first scalable vector register of the destination and first source multi-vector group, encoded as &quot;Zdn&quot; times 4." link="Zdn1__2">&lt;Zdn1&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__37">&lt;T&gt;</a><text>-</text><a hover="Is the name of the fourth scalable vector register of the destination and first source multi-vector group, encoded as &quot;Zdn&quot; times 4 plus 3." link="Zdn4">&lt;Zdn4&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__37">&lt;T&gt;</a><text> }, </text><a hover="For the &quot;Double-precision&quot; variant: is the name of the second source scalable vector register Z0-Z15, encoded in the &quot;Zm&quot; field." link="Zm__2">&lt;Zm&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__37">&lt;T&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_sve_2b.mortlach_multi4_z_z_fminmax_sm.fmax_mz_zzv_4x1" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 8 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(size);
constant integer dn = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zdn:'00');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('0':Zm);
constant integer nreg = 4;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="fmax_mz_zzv_2x1" symboldefcount="1">
      <symbol link="Zdn1">&lt;Zdn1&gt;</symbol>
      <account encodedin="Zdn">
        <intro>
          <para>For the "Two registers" variant: is the name of the first scalable vector register of the destination and first source multi-vector group, encoded as "Zdn" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmax_mz_zzv_4x1" symboldefcount="2">
      <symbol link="Zdn1__2">&lt;Zdn1&gt;</symbol>
      <account encodedin="Zdn">
        <intro>
          <para>For the "Four registers" variant: is the name of the first scalable vector register of the destination and first source multi-vector group, encoded as "Zdn" times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmax_mz_zzv_2x1, fmax_mz_zzv_4x1" symboldefcount="1">
      <symbol link="T__37">&lt;T&gt;</symbol>
      <definition encodedin="size">
        <intro>Is the size specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">size</entry>
                <entry class="symbol">&lt;T&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">01</entry>
                <entry class="symbol">H</entry>
              </row>
              <row>
                <entry class="bitfield">10</entry>
                <entry class="symbol">S</entry>
              </row>
              <row>
                <entry class="bitfield">11</entry>
                <entry class="symbol">D</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="fmax_mz_zzv_2x1" symboldefcount="1">
      <symbol link="Zdn2">&lt;Zdn2&gt;</symbol>
      <account encodedin="Zdn">
        <intro>
          <para>Is the name of the second scalable vector register of the destination and first source multi-vector group, encoded as "Zdn" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmax_mz_zzv_2x1, fmax_mz_zzv_4x1" symboldefcount="1">
      <symbol link="Zm__2">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the second source scalable vector register Z0-Z15, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmax_mz_zzv_4x1" symboldefcount="1">
      <symbol link="Zdn4">&lt;Zdn4&gt;</symbol>
      <account encodedin="Zdn">
        <intro>
          <para>Is the name of the fourth scalable vector register of the destination and first source multi-vector group, encoded as "Zdn" times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sme.mortlach_multi_sve_2a.mortlach_multi2_z_z_fminmax_sm.fmax_mz_zzv_2x1" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckStreamingSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckStreamingSVEEnabled()">CheckStreamingSVEEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer elements = VL DIV esize;
array [0..3] of bits(VL) results;

for r = 0 to nreg-1
    constant bits(VL) operand1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[dn+r, VL];
    constant bits(VL) operand2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m, VL];
    for e = 0 to elements-1
        constant bits(esize) element1 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, e, esize];
        constant bits(esize) element2 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, e, esize];
        <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[results[r], e, esize] = <a link="impl-shared.FPMax.3" file="shared_pseudocode.xml" hover="function: bits(N) FPMax(bits(N) op1, bits(N) op2, FPCR_Type fpcr)">FPMax</a>(element1, element2, FPCR);

for r = 0 to nreg-1
    <a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[dn+r, VL] = results[r];</pstext></ps>
  </ps_section>
</instructionsection>
