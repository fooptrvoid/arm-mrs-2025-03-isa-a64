<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="sumlall_za_zzv" title="SUMLALL (multiple and single vector) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="mortlach2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="SUMLALL"/>
  </docvars>
  <heading>SUMLALL (multiple and single vector)</heading>
  <desc>
    <brief>
      <para>Multi-vector signed by unsigned integer multiply-add long-long by vector</para>
    </brief>
    <authored>
      <para>This instruction
multiplies each signed 8-bit element in the two or four
first source vectors with each unsigned 8-bit element in the second source vector,
widens each product to 32 bits, and destructively adds these values to the
corresponding 32-bit elements of the ZA quad-vector groups.</para>
      <para>The quad-vector
group within each half of or each quarter of the ZA array is selected by the sum
of the vector select register and offset range, modulo half or quarter the number of ZA array vectors.</para>
      <para>The <syntax>vector group</syntax> symbol, <syntax>VGx2</syntax> or <syntax>VGx4</syntax>, indicates that
the ZA operand consists of two or four ZA quad-vector
groups
respectively. The vector group symbol is preferred
for disassembly, but optional in assembler source code.</para>
      <para>This instruction is unpredicated.</para>
    </authored>
    <predicated>False</predicated>
    <uses_dit condition="FEAT_SVE2 is implemented or FEAT_SME is implemented">True</uses_dit>
    <sm_policy>SM_1_only</sm_policy>
  </desc>
  <operationalnotes>
    <operationalnote>
      <operationalnote_content>
        <para>If PSTATE.DIT is 1:</para>
        <list type="unordered">
          <listitem>
            <content>The execution time of this instruction is independent of:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its registers.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
          <listitem>
            <content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its registers.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
        </list>
      </operationalnote_content>
    </operationalnote>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <classesintro count="2">
      <txt>It has encodings from 2 classes:</txt>
      <a href="#iclass_two_za_quad_vectors">Two ZA quad-vectors</a>
      <txt> and </txt>
      <a href="#iclass_four_za_quad_vectors">Four ZA quad-vectors</a>
    </classesintro>
    <iclass name="Two ZA quad-vectors" oneof="2" id="iclass_two_za_quad_vectors" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="SUMLALL"/>
        <docvar key="sme-multireg" value="sme-vgx2-quad"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2" name="ARMv9.3"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_array_1a.mortlach_multi2_zz_za_mla_long_long_sm.sumlall_za_zzv_s2x1" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="22" name="sz" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="21" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="19" width="4" name="Zm" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="15" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" name="U" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="3" name="S" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="2" name="op" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="1" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="0" width="1" name="o1" usename="1">
          <c colspan="1"/>
        </box>
      </regdiagram>
      <encoding name="sumlall_za_zzv_s2x1" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SUMLALL"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="sme-multireg" value="sme-vgx2-quad"/>
        </docvars>
        <asmtemplate><text>SUMLALL  ZA.S[</text><a hover="Is the 32-bit name of the vector select register W8-W11, encoded in the &quot;Rv&quot; field." link="Wv">&lt;Wv&gt;</a><text>, </text><a hover="For the &quot;Four ZA quad-vectors&quot; and &quot;Two ZA quad-vectors&quot; variants: is the first vector select offset, encoded as &quot;o1&quot; field times 4." link="offs1__4">&lt;offs1&gt;</a><text>:</text><a hover="For the &quot;Four ZA quad-vectors&quot; and &quot;Two ZA quad-vectors&quot; variants: is the fourth vector select offset, encoded as &quot;o1&quot; field times 4 plus 3." link="offs4__2">&lt;offs4&gt;</a><text>{, VGx2}], { </text><a hover="Is the name of the first scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot;." link="Zn1">&lt;Zn1&gt;</a><text>.B-</text><a hover="Is the name of the second scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; plus 1 modulo 32." link="Zn2">&lt;Zn2&gt;</a><text>.B }, </text><a hover="For the &quot;Double-precision&quot; variant: is the name of the second source scalable vector register Z0-Z15, encoded in the &quot;Zm&quot; field." link="Zm__2">&lt;Zm&gt;</a><text>.B</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_array_1a.mortlach_multi2_zz_za_mla_long_long_sm.sumlall_za_zzv_s2x1" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 32;
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('0':Zm);
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(o1:'00');
constant integer nreg = 2;</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Four ZA quad-vectors" oneof="2" id="iclass_four_za_quad_vectors" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="SUMLALL"/>
        <docvar key="sme-multireg" value="sme-vgx4-quad"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2" name="ARMv9.3"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_array_1b.mortlach_multi4_zz_za_mla_long_long_sm.sumlall_za_zzv_s4x1" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="22" name="sz" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="21" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="19" width="4" name="Zm" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="15" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" name="U" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="3" name="S" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="2" name="op" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="1" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="0" width="1" name="o1" usename="1">
          <c colspan="1"/>
        </box>
      </regdiagram>
      <encoding name="sumlall_za_zzv_s4x1" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SUMLALL"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="sme-multireg" value="sme-vgx4-quad"/>
        </docvars>
        <asmtemplate><text>SUMLALL  ZA.S[</text><a hover="Is the 32-bit name of the vector select register W8-W11, encoded in the &quot;Rv&quot; field." link="Wv">&lt;Wv&gt;</a><text>, </text><a hover="For the &quot;Four ZA quad-vectors&quot; and &quot;Two ZA quad-vectors&quot; variants: is the first vector select offset, encoded as &quot;o1&quot; field times 4." link="offs1__4">&lt;offs1&gt;</a><text>:</text><a hover="For the &quot;Four ZA quad-vectors&quot; and &quot;Two ZA quad-vectors&quot; variants: is the fourth vector select offset, encoded as &quot;o1&quot; field times 4 plus 3." link="offs4__2">&lt;offs4&gt;</a><text>{, VGx4}], { </text><a hover="Is the name of the first scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot;." link="Zn1">&lt;Zn1&gt;</a><text>.B-</text><a hover="Is the name of the fourth scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; plus 3 modulo 32." link="Zn4">&lt;Zn4&gt;</a><text>.B }, </text><a hover="For the &quot;Double-precision&quot; variant: is the name of the second source scalable vector register Z0-Z15, encoded in the &quot;Zm&quot; field." link="Zm__2">&lt;Zm&gt;</a><text>.B</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_array_1b.mortlach_multi4_zz_za_mla_long_long_sm.sumlall_za_zzv_s4x1" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 32;
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('0':Zm);
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(o1:'00');
constant integer nreg = 4;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="sumlall_za_zzv_s2x1, sumlall_za_zzv_s4x1" symboldefcount="1">
      <symbol link="Wv">&lt;Wv&gt;</symbol>
      <account encodedin="Rv">
        <intro>
          <para>Is the 32-bit name of the vector select register W8-W11, encoded in the "Rv" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sumlall_za_zzv_s2x1, sumlall_za_zzv_s4x1" symboldefcount="1">
      <symbol link="offs1__4">&lt;offs1&gt;</symbol>
      <account encodedin="o1">
        <intro>
          <para>Is the first vector select offset, encoded as "o1" field times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sumlall_za_zzv_s2x1, sumlall_za_zzv_s4x1" symboldefcount="1">
      <symbol link="offs4__2">&lt;offs4&gt;</symbol>
      <account encodedin="o1">
        <intro>
          <para>Is the fourth vector select offset, encoded as "o1" field times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sumlall_za_zzv_s2x1, sumlall_za_zzv_s4x1" symboldefcount="1">
      <symbol link="Zn1">&lt;Zn1&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the first scalable vector register of the first source multi-vector group, encoded as "Zn".</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sumlall_za_zzv_s2x1" symboldefcount="1">
      <symbol link="Zn2">&lt;Zn2&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the second scalable vector register of the first source multi-vector group, encoded as "Zn" plus 1 modulo 32.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sumlall_za_zzv_s2x1, sumlall_za_zzv_s4x1" symboldefcount="1">
      <symbol link="Zm__2">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the second source scalable vector register Z0-Z15, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sumlall_za_zzv_s4x1" symboldefcount="1">
      <symbol link="Zn4">&lt;Zn4&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the fourth scalable vector register of the first source multi-vector group, encoded as "Zn" plus 3 modulo 32.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sme.mortlach_multi_array_1a.mortlach_multi2_zz_za_mla_long_long_sm.sumlall_za_zzv_s2x1" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckStreamingSVEAndZAEnabled.0" file="shared_pseudocode.xml" hover="function: CheckStreamingSVEAndZAEnabled()">CheckStreamingSVEAndZAEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer elements = VL DIV esize;
constant integer vectors = VL DIV 8;
constant integer vstride = vectors DIV nreg;
constant bits(32) vbase = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[v, 32];
integer vec = (<a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(vbase) + offset) MOD vstride;
bits(VL) result;
vec = vec - (vec MOD 4);

for r = 0 to nreg-1
    constant bits(VL) operand1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[(n+r) MOD 32, VL];
    constant bits(VL) operand2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m, VL];
    for i = 0 to 3
        constant bits(VL) operand3 = <a link="impl-aarch64.ZAvector.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) ZAvector[integer index, integer width]">ZAvector</a>[vec + i, VL];
        for e = 0 to elements-1
            constant integer element1 = <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, 4 * e + i, esize DIV 4]);
            constant integer element2 = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, 4 * e + i, esize DIV 4]);
            constant bits(esize) product = (element1 * element2)&lt;esize-1:0&gt;;
            <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, e, esize] = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand3, e, esize] + product;
        <a link="impl-aarch64.ZAvector.write.2" file="shared_pseudocode.xml" hover="accessor: ZAvector[integer index, integer width] = bits(width) value">ZAvector</a>[vec + i, VL] = result;
    vec = vec + vstride;</pstext></ps>
  </ps_section>
</instructionsection>
