<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="usmopa_za_pp_zz" title="USMOPA (4-way) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="mortlach"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="USMOPA"/>
  </docvars>
  <heading>USMOPA (4-way)</heading>
  <desc>
    <brief>
      <para>Unsigned by signed integer sum of outer products and accumulate</para>
    </brief>
    <authored>
      <para>The 8-bit integer variant works with a 32-bit element ZA tile.</para>
      <para>The 16-bit integer variant works with a 64-bit element ZA tile.</para>
      <para>This instruction multiplies the sub-matrix in the first source vector by the
sub-matrix in the second source vector.
In case of the 8-bit integer variant, the first source holds SVL<sub>S</sub>×4
sub-matrix of unsigned 8-bit integer values, and the second source holds
4×SVL<sub>S</sub> sub-matrix of signed 8-bit integer values.
In case of the 16-bit integer variant, the first source holds SVL<sub>D</sub>×4
sub-matrix of unsigned 16-bit integer values, and the second source holds
4×SVL<sub>D</sub> sub-matrix of signed 16-bit integer values.</para>
      <para>Each source vector is independently predicated by a corresponding
governing predicate.
When an 8-bit source element in case of 8-bit integer variant or
a 16-bit source element in case of 16-bit integer variant
is Inactive, it is treated as having the value 0.</para>
      <para>The resulting SVL<sub>S</sub>×SVL<sub>S</sub> widened 32-bit integer or
SVL<sub>D</sub>×SVL<sub>D</sub> widened 64-bit integer sum of outer products
is then destructively added to the 32-bit integer or 64-bit integer
destination tile, respectively for 8-bit integer and 16-bit integer
instruction variants.
This is equivalent to performing a 4-way dot product and accumulate to
each of the destination tile elements.</para>
      <para>In case of the 8-bit integer variant, each 32-bit container of the first source
vector holds 4 consecutive column elements of each row of a SVL<sub>S</sub>×4
sub-matrix, and each 32-bit container of the second source vector holds
4 consecutive row elements of each column of a 4×SVL<sub>S</sub> sub-matrix.
In case of the 16-bit integer variant, each 64-bit container of the first source
vector holds 4 consecutive column elements of each row of a SVL<sub>D</sub>×4
sub-matrix, and each 64-bit container of the second source vector holds
4 consecutive row elements of each column of a 4×SVL<sub>D</sub> sub-matrix.</para>
      <para>ID_AA64SMFR0_EL1.I16I64 indicates whether the 16-bit integer variant is implemented.</para>
    </authored>
    <predicated>True</predicated>
    <uses_dit condition="FEAT_SVE2 is implemented or FEAT_SME is implemented">True</uses_dit>
    <sm_policy>SM_1_only</sm_policy>
    <is_gov_pred_pair>True</is_gov_pred_pair>
  </desc>
  <operationalnotes>
    <operationalnote>
      <operationalnote_content>
        <para>If PSTATE.DIT is 1:</para>
        <list type="unordered">
          <listitem>
            <content>The execution time of this instruction is independent of:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its operand registers when its governing predicate registers contain the same value for each execution.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
          <listitem>
            <content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its operand registers when its governing predicate registers contain the same value for each execution.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
        </list>
      </operationalnote_content>
    </operationalnote>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <classesintro count="2">
      <txt>It has encodings from 2 classes:</txt>
      <a href="#iclass_32_bit">32-bit</a>
      <txt> and </txt>
      <a href="#iclass_64_bit">64-bit</a>
    </classesintro>
    <iclass name="32-bit" oneof="2" id="iclass_32_bit" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="asimdimm-datatype" value="per-word"/>
        <docvar key="instr-class" value="mortlach"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="USMOPA"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME" name="PROFILE_A"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_32bit_int_prod.mortlach_i8i32_prod.usmopa_za_pp_zz_32" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" name="u0" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="23" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="21" name="u1" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="20" width="5" name="Zm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="3" name="Pm" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="12" width="3" name="Pn" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" name="S" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="3" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="2" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="1" width="2" name="ZAda" usename="1">
          <c colspan="2"/>
        </box>
      </regdiagram>
      <encoding name="usmopa_za_pp_zz_32" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="USMOPA"/>
          <docvar key="instr-class" value="mortlach"/>
          <docvar key="asimdimm-datatype" value="per-word"/>
        </docvars>
        <asmtemplate><text>USMOPA  </text><a hover="For the &quot;32-bit&quot; variant: is the name of the ZA tile ZA0-ZA3, encoded in the &quot;ZAda&quot; field." link="ZAda">&lt;ZAda&gt;</a><text>.S, </text><a hover="Is the name of the first governing scalable predicate register P0-P7, encoded in the &quot;Pn&quot; field." link="Pn">&lt;Pn&gt;</a><text>/M, </text><a hover="Is the name of the second governing scalable predicate register P0-P7, encoded in the &quot;Pm&quot; field." link="Pm">&lt;Pm&gt;</a><text>/M, </text><a hover="Is the name of the first source scalable vector register, encoded in the &quot;Zn&quot; field." link="Zn__2">&lt;Zn&gt;</a><text>.B, </text><a hover="Is the name of the second source scalable vector register, encoded in the &quot;Zm&quot; field." link="Zm">&lt;Zm&gt;</a><text>.B</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_32bit_int_prod.mortlach_i8i32_prod.usmopa_za_pp_zz_32" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 32;
constant integer a = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pn);
constant integer b = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pm);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer da = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(ZAda);
constant boolean op1_unsigned = TRUE;
constant boolean op2_unsigned = FALSE;</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="64-bit" oneof="2" id="iclass_64_bit" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="asimdimm-datatype" value="per-doubleword"/>
        <docvar key="instr-class" value="mortlach"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="USMOPA"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME_I16I64" name="ARMv9.2"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_64bit_prod.mortlach_i16i64_prod.usmopa_za_pp_zz_64" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="29" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" name="u0" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="23" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="21" name="u1" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="20" width="5" name="Zm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="3" name="Pm" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="12" width="3" name="Pn" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" name="S" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="3" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="2" width="3" name="ZAda" usename="1">
          <c colspan="3"/>
        </box>
      </regdiagram>
      <encoding name="usmopa_za_pp_zz_64" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="USMOPA"/>
          <docvar key="instr-class" value="mortlach"/>
          <docvar key="asimdimm-datatype" value="per-doubleword"/>
        </docvars>
        <asmtemplate><text>USMOPA  </text><a hover="For the &quot;64-bit&quot; variant: is the name of the ZA tile ZA0-ZA7, encoded in the &quot;ZAda&quot; field." link="ZAda__2">&lt;ZAda&gt;</a><text>.D, </text><a hover="Is the name of the first governing scalable predicate register P0-P7, encoded in the &quot;Pn&quot; field." link="Pn">&lt;Pn&gt;</a><text>/M, </text><a hover="Is the name of the second governing scalable predicate register P0-P7, encoded in the &quot;Pm&quot; field." link="Pm">&lt;Pm&gt;</a><text>/M, </text><a hover="Is the name of the first source scalable vector register, encoded in the &quot;Zn&quot; field." link="Zn__2">&lt;Zn&gt;</a><text>.H, </text><a hover="Is the name of the second source scalable vector register, encoded in the &quot;Zm&quot; field." link="Zm">&lt;Zm&gt;</a><text>.H</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_64bit_prod.mortlach_i16i64_prod.usmopa_za_pp_zz_64" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME_I16I64) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer esize = 64;
constant integer a = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pn);
constant integer b = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pm);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer da = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(ZAda);
constant boolean op1_unsigned = TRUE;
constant boolean op2_unsigned = FALSE;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="usmopa_za_pp_zz_32" symboldefcount="1">
      <symbol link="ZAda">&lt;ZAda&gt;</symbol>
      <account encodedin="ZAda">
        <intro>
          <para>For the "32-bit" variant: is the name of the ZA tile ZA0-ZA3, encoded in the "ZAda" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="usmopa_za_pp_zz_64" symboldefcount="2">
      <symbol link="ZAda__2">&lt;ZAda&gt;</symbol>
      <account encodedin="ZAda">
        <intro>
          <para>For the "64-bit" variant: is the name of the ZA tile ZA0-ZA7, encoded in the "ZAda" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="usmopa_za_pp_zz_32, usmopa_za_pp_zz_64" symboldefcount="1">
      <symbol link="Pn">&lt;Pn&gt;</symbol>
      <account encodedin="Pn">
        <intro>
          <para>Is the name of the first governing scalable predicate register P0-P7, encoded in the "Pn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="usmopa_za_pp_zz_32, usmopa_za_pp_zz_64" symboldefcount="1">
      <symbol link="Pm">&lt;Pm&gt;</symbol>
      <account encodedin="Pm">
        <intro>
          <para>Is the name of the second governing scalable predicate register P0-P7, encoded in the "Pm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="usmopa_za_pp_zz_32, usmopa_za_pp_zz_64" symboldefcount="1">
      <symbol link="Zn__2">&lt;Zn&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the first source scalable vector register, encoded in the "Zn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="usmopa_za_pp_zz_32, usmopa_za_pp_zz_64" symboldefcount="1">
      <symbol link="Zm">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the second source scalable vector register, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sme.mortlach_32bit_int_prod.mortlach_i8i32_prod.usmopa_za_pp_zz_32" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckStreamingSVEAndZAEnabled.0" file="shared_pseudocode.xml" hover="function: CheckStreamingSVEAndZAEnabled()">CheckStreamingSVEAndZAEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer PL = VL DIV 8;
constant integer dim = VL DIV esize;
constant bits(PL) mask1 = <a link="impl-aarch64.P.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) P[integer n, integer width]">P</a>[a, PL];
constant bits(PL) mask2 = <a link="impl-aarch64.P.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) P[integer n, integer width]">P</a>[b, PL];
constant bits(VL) operand1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[n, VL];
constant bits(VL) operand2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m, VL];
constant bits(dim*dim*esize) operand3 = <a link="impl-aarch64.ZAtile.read.3" file="shared_pseudocode.xml" hover="accessor: bits(width) ZAtile[integer tile, ESize esize, integer width]">ZAtile</a>[da, esize, dim*dim*esize];
bits(dim*dim*esize) result;
integer  prod;

for row = 0 to dim-1
    for col = 0 to dim-1
        bits(esize) sum = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand3, row*dim+col, esize];
        for k = 0 to 3
            if (<a link="impl-aarch64.ActivePredicateElement.3" file="shared_pseudocode.xml" hover="function: boolean ActivePredicateElement(bits(N) pred, integer e, integer esize)">ActivePredicateElement</a>(mask1, 4*row + k, esize DIV 4) &amp;&amp;
                  <a link="impl-aarch64.ActivePredicateElement.3" file="shared_pseudocode.xml" hover="function: boolean ActivePredicateElement(bits(N) pred, integer e, integer esize)">ActivePredicateElement</a>(mask2, 4*col + k, esize DIV 4)) then
                prod = (<a link="impl-shared.Int.2" file="shared_pseudocode.xml" hover="function: integer Int(bits(N) x, boolean unsigned)">Int</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, 4*row + k, esize DIV 4], op1_unsigned) *
                        <a link="impl-shared.Int.2" file="shared_pseudocode.xml" hover="function: integer Int(bits(N) x, boolean unsigned)">Int</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, 4*col + k, esize DIV 4], op2_unsigned));
                sum = sum + prod;
        <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, row*dim+col, esize] = sum;

<a link="impl-aarch64.ZAtile.write.3" file="shared_pseudocode.xml" hover="accessor: ZAtile[integer tile, ESize esize, integer width] = bits(width) value">ZAtile</a>[da, esize, dim*dim*esize] = result;</pstext></ps>
  </ps_section>
</instructionsection>
