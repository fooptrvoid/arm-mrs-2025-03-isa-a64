<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="luti4_z_zz" title="LUTI4 (8-bit and 16-bit) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="sve2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="LUTI4"/>
  </docvars>
  <heading>LUTI4 (8-bit and 16-bit)</heading>
  <desc>
    <brief>
      <para>Lookup table read with 4-bit indicess (8-bit and 16-bit)</para>
    </brief>
    <authored>
      <para>This instruction copies indexed 8-bit or 16-bit elements from the low 128 or 256 bits of the table vector,
      or from the low 128 bits of the two table vectors to
the destination vector using packed 4-bit indices from a
segment of the source vector. A segment corresponds to a portion of the
source vector that is consumed in order to fill the destination vector.
The segment is selected by the vector segment index.
This instruction is unpredicated.</para>
    </authored>
    <predicated>False</predicated>
  </desc>
  <operationalnotes>
    <operationalnote>
      <operationalnote_content>
        <para>If PSTATE.DIT is 1:</para>
        <list type="unordered">
          <listitem>
            <content>The execution time of this instruction is independent of:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its registers.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
          <listitem>
            <content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered">
                <listitem>
                  <content>The values of the data supplied in any of its registers.</content>
                </listitem>
                <listitem>
                  <content>The values of the NZCV flags.</content>
                </listitem>
              </list>
            </content>
          </listitem>
        </list>
      </operationalnote_content>
    </operationalnote>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <classesintro count="3">
      <txt>It has encodings from 3 classes:</txt>
      <a href="#iclass_byte_single_register_table">Byte, single register table</a>
      <txt>, </txt>
      <a href="#iclass_halfword_two_register_table">Halfword, two register table</a>
      <txt> and </txt>
      <a href="#iclass_halfword_single_register_table">Halfword, single register table</a>
    </classesintro>
    <iclass name="Byte, single register table" oneof="3" id="iclass_byte_single_register_table" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="LUTI4"/>
        <docvar key="sve-luti4-type" value="sve-byte-onetbl"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="(FEAT_SVE2 || FEAT_SME2) &amp;&amp; FEAT_LUT" name="(FEAT_SVE2 || FEAT_SME2) &amp;&amp; FEAT_LUT"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_intx_histseg_lut.sve_intx_lut4_8.luti4_z_zz_8">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="1" name="i1" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="22" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Zm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>0</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="luti4_z_zz_8" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="LUTI4"/>
          <docvar key="instr-class" value="sve2"/>
          <docvar key="sve-luti4-type" value="sve-byte-onetbl"/>
        </docvars>
        <asmtemplate><text>LUTI4  </text><a hover="Is the name of the destination scalable vector register, encoded in the &quot;Zd&quot; field." link="Zd">&lt;Zd&gt;</a><text>.B, { </text><a hover="Is the name of the table vector register, encoded in the &quot;Zn&quot; field." link="Zn__4">&lt;Zn&gt;</a><text>.B }, </text><a hover="Is the name of the source scalable vector register, encoded in the &quot;Zm&quot; field." link="Zm__5">&lt;Zm&gt;</a><text>[</text><a hover="For the &quot;Byte, single register table&quot; variant: is the vector segment index, in the range 0 to 1, encoded in the &quot;i1&quot; field." link="index__30">&lt;index&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_intx_histseg_lut.sve_intx_lut4_8.luti4_z_zz_8" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if ((!IsFeatureImplemented(FEAT_SVE2) &amp;&amp; !IsFeatureImplemented(FEAT_SME2)) ||
      !IsFeatureImplemented(FEAT_LUT)) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer isize = 4;
constant integer esize = 8;
constant integer ntblr = 1;
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
constant integer part = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i1);</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Halfword, two register table" oneof="3" id="iclass_halfword_two_register_table" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="LUTI4"/>
        <docvar key="sve-luti4-type" value="sve-hword-twotbl"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="(FEAT_SVE2 || FEAT_SME2) &amp;&amp; FEAT_LUT" name="(FEAT_SVE2 || FEAT_SME2) &amp;&amp; FEAT_LUT"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_intx_histseg_lut.sve_intx_lut4_16.luti4_z_zz_2x16" tworows="1">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="i2" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Zm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="12" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="11" name="op" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="10" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="luti4_z_zz_2x16" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="LUTI4"/>
          <docvar key="instr-class" value="sve2"/>
          <docvar key="sve-luti4-type" value="sve-hword-twotbl"/>
        </docvars>
        <asmtemplate><text>LUTI4  </text><a hover="Is the name of the destination scalable vector register, encoded in the &quot;Zd&quot; field." link="Zd">&lt;Zd&gt;</a><text>.H, { </text><a hover="Is the name of the first table vector register, encoded as &quot;Zn&quot;." link="Zn1__7">&lt;Zn1&gt;</a><text>.H, </text><a hover="Is the name of the second table vector register, encoded as &quot;Zn&quot; plus 1 modulo 32." link="Zn2__5">&lt;Zn2&gt;</a><text>.H }, </text><a hover="Is the name of the source scalable vector register, encoded in the &quot;Zm&quot; field." link="Zm__5">&lt;Zm&gt;</a><text>[</text><a hover="For the &quot;Halfword, single register table&quot; and &quot;Halfword, two register table&quot; variants: is the vector segment index, in the range 0 to 3, encoded in the &quot;i2&quot; field." link="index__27">&lt;index&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_intx_histseg_lut.sve_intx_lut4_16.luti4_z_zz_2x16" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if ((!IsFeatureImplemented(FEAT_SVE2) &amp;&amp; !IsFeatureImplemented(FEAT_SME2)) ||
      !IsFeatureImplemented(FEAT_LUT)) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer isize = 4;
constant integer esize = 16;
constant integer ntblr = 2;
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
constant integer part = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i2);</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Halfword, single register table" oneof="3" id="iclass_halfword_single_register_table" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="LUTI4"/>
        <docvar key="sve-luti4-type" value="sve-hword-onetbl"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="(FEAT_SVE2 || FEAT_SME2) &amp;&amp; FEAT_LUT" name="(FEAT_SVE2 || FEAT_SME2) &amp;&amp; FEAT_LUT"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sve.sve_intx_histseg_lut.sve_intx_lut4_16.luti4_z_zz_1x16" tworows="1">
        <box hibit="31" width="3" settings="3">
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="24" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="i2" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Zm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="12" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="11" name="op" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="10" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Zd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="luti4_z_zz_1x16" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="LUTI4"/>
          <docvar key="instr-class" value="sve2"/>
          <docvar key="sve-luti4-type" value="sve-hword-onetbl"/>
        </docvars>
        <asmtemplate><text>LUTI4  </text><a hover="Is the name of the destination scalable vector register, encoded in the &quot;Zd&quot; field." link="Zd">&lt;Zd&gt;</a><text>.H, { </text><a hover="Is the name of the table vector register, encoded in the &quot;Zn&quot; field." link="Zn__4">&lt;Zn&gt;</a><text>.H }, </text><a hover="Is the name of the source scalable vector register, encoded in the &quot;Zm&quot; field." link="Zm__5">&lt;Zm&gt;</a><text>[</text><a hover="For the &quot;Halfword, single register table&quot; and &quot;Halfword, two register table&quot; variants: is the vector segment index, in the range 0 to 3, encoded in the &quot;i2&quot; field." link="index__27">&lt;index&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sve.sve_intx_histseg_lut.sve_intx_lut4_16.luti4_z_zz_1x16" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if ((!IsFeatureImplemented(FEAT_SVE2) &amp;&amp; !IsFeatureImplemented(FEAT_SME2)) ||
      !IsFeatureImplemented(FEAT_LUT)) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
if <a link="impl-aarch64.MaxImplementedAnyVL.0" file="shared_pseudocode.xml" hover="function: integer MaxImplementedAnyVL()">MaxImplementedAnyVL</a>() &lt; 256 then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer isize = 4;
constant integer esize = 16;
constant integer ntblr = 1;
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zd);
constant integer part = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i2);</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="luti4_z_zz_8, luti4_z_zz_2x16, luti4_z_zz_1x16" symboldefcount="1">
      <symbol link="Zd">&lt;Zd&gt;</symbol>
      <account encodedin="Zd">
        <intro>
          <para>Is the name of the destination scalable vector register, encoded in the "Zd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="luti4_z_zz_8, luti4_z_zz_1x16" symboldefcount="1">
      <symbol link="Zn__4">&lt;Zn&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the table vector register, encoded in the "Zn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="luti4_z_zz_8, luti4_z_zz_2x16, luti4_z_zz_1x16" symboldefcount="1">
      <symbol link="Zm__5">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the source scalable vector register, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="luti4_z_zz_8" symboldefcount="1">
      <symbol link="index__30">&lt;index&gt;</symbol>
      <account encodedin="i1">
        <intro>
          <para>For the "Byte, single register table" variant: is the vector segment index, in the range 0 to 1, encoded in the "i1" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="luti4_z_zz_2x16, luti4_z_zz_1x16" symboldefcount="2">
      <symbol link="index__27">&lt;index&gt;</symbol>
      <account encodedin="i2">
        <intro>
          <para>For the "Halfword, single register table" and "Halfword, two register table" variants: is the vector segment index, in the range 0 to 3, encoded in the "i2" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="luti4_z_zz_2x16" symboldefcount="1">
      <symbol link="Zn1__7">&lt;Zn1&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the first table vector register, encoded as "Zn".</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="luti4_z_zz_2x16" symboldefcount="1">
      <symbol link="Zn2__5">&lt;Zn2&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the second table vector register, encoded as "Zn" plus 1 modulo 32.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sve.sve_intx_histseg_lut.sve_intx_lut4_8.luti4_z_zz_8" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">if IsFeatureImplemented(FEAT_SME2) then <a link="impl-aarch64.CheckSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckSVEEnabled()">CheckSVEEnabled</a>(); else <a link="impl-aarch64.CheckNonStreamingSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckNonStreamingSVEEnabled()">CheckNonStreamingSVEEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
if ntblr == 1 &amp;&amp; esize == 16 &amp;&amp; VL &lt; 256 then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer elements = VL DIV esize;
constant integer tablesize = if ntblr == 1 &amp;&amp; esize == 16 then 256 else 128;
constant integer eltspertable = tablesize DIV esize;
constant integer ibase = elements * part;
constant bits(VL) indices = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m, VL];
constant bits(VL) table1  = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[n+0, VL];
constant bits(VL) table2  = if ntblr == 2 then <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[(n+1) MOD 32, VL] else <a link="impl-shared.Zeros.1" file="shared_pseudocode.xml" hover="function: bits(N) Zeros(integer N)">Zeros</a>(VL);
bits(VL) result;
bits(esize) res;

for e = 0 to elements-1
    constant integer index = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[indices, ibase + e, isize]);
    if index &lt; eltspertable then
        res = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[table1, index, esize];
    else
        assert ntblr == 2;
        res = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[table2, index - eltspertable, esize];
    <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, e, esize] = res;

<a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[d, VL] = result;</pstext></ps>
  </ps_section>
</instructionsection>
