<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2025 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="fmls_za_zzw" title="FMLS (multiple vectors) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="mortlach2"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="FMLS"/>
  </docvars>
  <heading>FMLS (multiple vectors)</heading>
  <desc>
    <brief>
      <para>Multi-vector floating-point fused multiply-subtract</para>
    </brief>
    <authored>
      <para>This instruction multiplies the corresponding floating-point elements
of the two or four first and second source vectors and destructively subtracts these values without intermediate rounding from the corresponding elements of the ZA single-vector groups.</para>
      <para>The single-vector
group within each half of or each quarter of the ZA array is selected by the sum
of the vector select register and offset, modulo half or quarter the number of ZA array vectors.</para>
      <para>The <syntax>vector group</syntax> symbol, <syntax>VGx2</syntax> or <syntax>VGx4</syntax>, indicates that
the ZA operand consists of two or four ZA single-vector
groups
respectively. The vector group symbol is preferred
for disassembly, but optional in assembler source code.</para>
      <para>This instruction follows SME ZA-targeting floating-point behaviors.</para>
      <para>This instruction is unpredicated.</para>
      <para>ID_AA64SMFR0_EL1.F64F64 indicates whether the double-precision variant is
implemented, and ID_AA64SMFR0_EL1.F16F16 indicates whether the half-precision variant is implemented.</para>
    </authored>
    <predicated>False</predicated>
    <sm_policy>SM_1_only</sm_policy>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <classesintro count="4">
      <txt>It has encodings from 4 classes:</txt>
      <a href="#iclass_two_za_single_vectors">Two ZA single-vectors</a>
      <txt>, </txt>
      <a href="#iclass_two_za_single_vectors_of_half_precision_elements">Two ZA single-vectors of half-precision elements</a>
      <txt>, </txt>
      <a href="#iclass_four_za_single_vectors">Four ZA single-vectors</a>
      <txt> and </txt>
      <a href="#iclass_four_za_single_vectors_of_half_precision_elements">Four ZA single-vectors of half-precision elements</a>
    </classesintro>
    <iclass name="Two ZA single-vectors" oneof="4" id="iclass_two_za_single_vectors" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="FMLS"/>
        <docvar key="sme-multireg" value="sme-vgx2-single"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2" name="ARMv9.3"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_array_2a.mortlach_multi2_zz_za_float_mm.fmls_za_zzw_2x2" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="22" width="1" name="sz" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="4" name="Zm" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="16" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="9" width="4" name="Zn" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="5" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="4" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="3" name="S" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="2" width="3" name="off3" usename="1">
          <c colspan="3"/>
        </box>
      </regdiagram>
      <encoding name="fmls_za_zzw_2x2" oneofinclass="1" oneof="4" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMLS"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="sme-multireg" value="sme-vgx2-single"/>
        </docvars>
        <asmtemplate><text>FMLS  ZA.</text><a hover="Is the size specifier, " link="T__52">&lt;T&gt;</a><text>[</text><a hover="Is the 32-bit name of the vector select register W8-W11, encoded in the &quot;Rv&quot; field." link="Wv">&lt;Wv&gt;</a><text>, </text><a hover="Is the vector select offset, in the range 0 to 7, encoded in the &quot;off3&quot; field." link="offs">&lt;offs&gt;</a><text>{, VGx2}], { </text><a hover="For the &quot;Two ZA single-vectors of half-precision elements&quot; and &quot;Two ZA single-vectors&quot; variants: is the name of the first scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 2." link="Zn1__2">&lt;Zn1&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__52">&lt;T&gt;</a><text>-</text><a hover="Is the name of the second scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 2 plus 1." link="Zn2__2">&lt;Zn2&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__52">&lt;T&gt;</a><text> }, { </text><a hover="For the &quot;Two ZA single-vectors of half-precision elements&quot; and &quot;Two ZA single-vectors&quot; variants: is the name of the first scalable vector register of the second source multi-vector group, encoded as &quot;Zm&quot; times 2." link="Zm1__3">&lt;Zm1&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__52">&lt;T&gt;</a><text>-</text><a hover="Is the name of the second scalable vector register of the second source multi-vector group, encoded as &quot;Zm&quot; times 2 plus 1." link="Zm2__2">&lt;Zm2&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__52">&lt;T&gt;</a><text> }</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_array_2a.mortlach_multi2_zz_za_float_mm.fmls_za_zzw_2x2" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
if sz == '1' &amp;&amp; !IsFeatureImplemented(FEAT_SME_F64F64) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer esize = 32 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(sz);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn:'0');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm:'0');
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(off3);
constant integer nreg = 2;</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Two ZA single-vectors of half-precision elements" oneof="4" id="iclass_two_za_single_vectors_of_half_precision_elements" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="FMLS"/>
        <docvar key="sme-multireg" value="sme-vgx2hp-single"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME_F16F16" name="ARMv9.4"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_array_2a.mortlach_multi2_zz_za_f16_mm.fmls_za_zzw_2x2_16" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="22" name="sz" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="4" name="Zm" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="16" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="4" name="Zn" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="5" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="4" name="S" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="3" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="2" width="3" name="off3" usename="1">
          <c colspan="3"/>
        </box>
      </regdiagram>
      <encoding name="fmls_za_zzw_2x2_16" oneofinclass="1" oneof="4" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMLS"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="sme-multireg" value="sme-vgx2hp-single"/>
        </docvars>
        <asmtemplate><text>FMLS  ZA.H[</text><a hover="Is the 32-bit name of the vector select register W8-W11, encoded in the &quot;Rv&quot; field." link="Wv">&lt;Wv&gt;</a><text>, </text><a hover="Is the vector select offset, in the range 0 to 7, encoded in the &quot;off3&quot; field." link="offs">&lt;offs&gt;</a><text>{, VGx2}], { </text><a hover="For the &quot;Two ZA single-vectors of half-precision elements&quot; and &quot;Two ZA single-vectors&quot; variants: is the name of the first scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 2." link="Zn1__2">&lt;Zn1&gt;</a><text>.H-</text><a hover="Is the name of the second scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 2 plus 1." link="Zn2__2">&lt;Zn2&gt;</a><text>.H }, { </text><a hover="For the &quot;Two ZA single-vectors of half-precision elements&quot; and &quot;Two ZA single-vectors&quot; variants: is the name of the first scalable vector register of the second source multi-vector group, encoded as &quot;Zm&quot; times 2." link="Zm1__3">&lt;Zm1&gt;</a><text>.H-</text><a hover="Is the name of the second scalable vector register of the second source multi-vector group, encoded as &quot;Zm&quot; times 2 plus 1." link="Zm2__2">&lt;Zm2&gt;</a><text>.H }</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_array_2a.mortlach_multi2_zz_za_f16_mm.fmls_za_zzw_2x2_16" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME_F16F16) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer esize = 16;
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn:'0');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm:'0');
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(off3);
constant integer nreg = 2;</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Four ZA single-vectors" oneof="4" id="iclass_four_za_single_vectors" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="FMLS"/>
        <docvar key="sme-multireg" value="sme-vgx4-single"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME2" name="ARMv9.3"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_array_2b.mortlach_multi4_zz_za_float_mm.fmls_za_zzw_4x4" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="22" width="1" name="sz" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="3" name="Zm" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="17" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="16" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="9" width="3" name="Zn" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="6" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="4" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="3" name="S" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="2" width="3" name="off3" usename="1">
          <c colspan="3"/>
        </box>
      </regdiagram>
      <encoding name="fmls_za_zzw_4x4" oneofinclass="1" oneof="4" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMLS"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="sme-multireg" value="sme-vgx4-single"/>
        </docvars>
        <asmtemplate><text>FMLS  ZA.</text><a hover="Is the size specifier, " link="T__52">&lt;T&gt;</a><text>[</text><a hover="Is the 32-bit name of the vector select register W8-W11, encoded in the &quot;Rv&quot; field." link="Wv">&lt;Wv&gt;</a><text>, </text><a hover="Is the vector select offset, in the range 0 to 7, encoded in the &quot;off3&quot; field." link="offs">&lt;offs&gt;</a><text>{, VGx4}], { </text><a hover="For the &quot;Four ZA single-vectors of half-precision elements&quot; and &quot;Four ZA single-vectors&quot; variants: is the name of the first scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 4." link="Zn1__3">&lt;Zn1&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__52">&lt;T&gt;</a><text>-</text><a hover="Is the name of the fourth scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 4 plus 3." link="Zn4__2">&lt;Zn4&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__52">&lt;T&gt;</a><text> }, { </text><a hover="For the &quot;Four ZA single-vectors of half-precision elements&quot; and &quot;Four ZA single-vectors&quot; variants: is the name of the first scalable vector register of the second source multi-vector group, encoded as &quot;Zm&quot; times 4." link="Zm1__4">&lt;Zm1&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__52">&lt;T&gt;</a><text>-</text><a hover="Is the name of the fourth scalable vector register of the second source multi-vector group, encoded as &quot;Zm&quot; times 4 plus 3." link="Zm4__2">&lt;Zm4&gt;</a><text>.</text><a hover="Is the size specifier, " link="T__52">&lt;T&gt;</a><text> }</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_array_2b.mortlach_multi4_zz_za_float_mm.fmls_za_zzw_4x4" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
if sz == '1' &amp;&amp; !IsFeatureImplemented(FEAT_SME_F64F64) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer esize = 32 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(sz);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn:'00');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm:'00');
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(off3);
constant integer nreg = 4;</pstext></ps>
      </ps_section>
    </iclass>
    <iclass name="Four ZA single-vectors of half-precision elements" oneof="4" id="iclass_four_za_single_vectors_of_half_precision_elements" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="FMLS"/>
        <docvar key="sme-multireg" value="sme-vgx4hp-single"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SME_F16F16" name="ARMv9.4"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.sme.mortlach_multi_array_2b.mortlach_multi4_zz_za_f16_mm.fmls_za_zzw_4x4_16" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="30" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="4" settings="4">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="24" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="22" name="sz" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="3" name="Zm" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="17" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="16" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="3" name="Zn" usename="1">
          <c colspan="3"/>
        </box>
        <box hibit="6" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="4" name="S" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="3" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="2" width="3" name="off3" usename="1">
          <c colspan="3"/>
        </box>
      </regdiagram>
      <encoding name="fmls_za_zzw_4x4_16" oneofinclass="1" oneof="4" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMLS"/>
          <docvar key="instr-class" value="mortlach2"/>
          <docvar key="sme-multireg" value="sme-vgx4hp-single"/>
        </docvars>
        <asmtemplate><text>FMLS  ZA.H[</text><a hover="Is the 32-bit name of the vector select register W8-W11, encoded in the &quot;Rv&quot; field." link="Wv">&lt;Wv&gt;</a><text>, </text><a hover="Is the vector select offset, in the range 0 to 7, encoded in the &quot;off3&quot; field." link="offs">&lt;offs&gt;</a><text>{, VGx4}], { </text><a hover="For the &quot;Four ZA single-vectors of half-precision elements&quot; and &quot;Four ZA single-vectors&quot; variants: is the name of the first scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 4." link="Zn1__3">&lt;Zn1&gt;</a><text>.H-</text><a hover="Is the name of the fourth scalable vector register of the first source multi-vector group, encoded as &quot;Zn&quot; times 4 plus 3." link="Zn4__2">&lt;Zn4&gt;</a><text>.H }, { </text><a hover="For the &quot;Four ZA single-vectors of half-precision elements&quot; and &quot;Four ZA single-vectors&quot; variants: is the name of the first scalable vector register of the second source multi-vector group, encoded as &quot;Zm&quot; times 4." link="Zm1__4">&lt;Zm1&gt;</a><text>.H-</text><a hover="Is the name of the fourth scalable vector register of the second source multi-vector group, encoded as &quot;Zm&quot; times 4 plus 3." link="Zm4__2">&lt;Zm4&gt;</a><text>.H }</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.sme.mortlach_multi_array_2b.mortlach_multi4_zz_za_f16_mm.fmls_za_zzw_4x4_16" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME_F16F16) then <a link="impl-shared.EndOfDecode.1" file="shared_pseudocode.xml" hover="function: EndOfDecode(DecodeType reason)">EndOfDecode</a>(<a link="Decode_UNDEF" file="shared_pseudocode.xml" hover="enumeration DecodeType { Decode_UNDEF, Decode_NOP, Decode_OK }">Decode_UNDEF</a>);
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer esize = 16;
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn:'00');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm:'00');
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(off3);
constant integer nreg = 4;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="fmls_za_zzw_2x2, fmls_za_zzw_4x4" symboldefcount="1">
      <symbol link="T__52">&lt;T&gt;</symbol>
      <definition encodedin="sz">
        <intro>Is the size specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">sz</entry>
                <entry class="symbol">&lt;T&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">0</entry>
                <entry class="symbol">S</entry>
              </row>
              <row>
                <entry class="bitfield">1</entry>
                <entry class="symbol">D</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="fmls_za_zzw_2x2, fmls_za_zzw_2x2_16, fmls_za_zzw_4x4, fmls_za_zzw_4x4_16" symboldefcount="1">
      <symbol link="Wv">&lt;Wv&gt;</symbol>
      <account encodedin="Rv">
        <intro>
          <para>Is the 32-bit name of the vector select register W8-W11, encoded in the "Rv" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmls_za_zzw_2x2, fmls_za_zzw_2x2_16, fmls_za_zzw_4x4, fmls_za_zzw_4x4_16" symboldefcount="1">
      <symbol link="offs">&lt;offs&gt;</symbol>
      <account encodedin="off3">
        <intro>
          <para>Is the vector select offset, in the range 0 to 7, encoded in the "off3" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmls_za_zzw_2x2, fmls_za_zzw_2x2_16" symboldefcount="1">
      <symbol link="Zn1__2">&lt;Zn1&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>For the "Two ZA single-vectors of half-precision elements" and "Two ZA single-vectors" variants: is the name of the first scalable vector register of the first source multi-vector group, encoded as "Zn" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmls_za_zzw_4x4, fmls_za_zzw_4x4_16" symboldefcount="2">
      <symbol link="Zn1__3">&lt;Zn1&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>For the "Four ZA single-vectors of half-precision elements" and "Four ZA single-vectors" variants: is the name of the first scalable vector register of the first source multi-vector group, encoded as "Zn" times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmls_za_zzw_2x2, fmls_za_zzw_2x2_16" symboldefcount="1">
      <symbol link="Zn2__2">&lt;Zn2&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the second scalable vector register of the first source multi-vector group, encoded as "Zn" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmls_za_zzw_2x2, fmls_za_zzw_2x2_16" symboldefcount="1">
      <symbol link="Zm1__3">&lt;Zm1&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>For the "Two ZA single-vectors of half-precision elements" and "Two ZA single-vectors" variants: is the name of the first scalable vector register of the second source multi-vector group, encoded as "Zm" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmls_za_zzw_4x4, fmls_za_zzw_4x4_16" symboldefcount="2">
      <symbol link="Zm1__4">&lt;Zm1&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>For the "Four ZA single-vectors of half-precision elements" and "Four ZA single-vectors" variants: is the name of the first scalable vector register of the second source multi-vector group, encoded as "Zm" times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmls_za_zzw_2x2, fmls_za_zzw_2x2_16" symboldefcount="1">
      <symbol link="Zm2__2">&lt;Zm2&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the second scalable vector register of the second source multi-vector group, encoded as "Zm" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmls_za_zzw_4x4, fmls_za_zzw_4x4_16" symboldefcount="1">
      <symbol link="Zn4__2">&lt;Zn4&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the fourth scalable vector register of the first source multi-vector group, encoded as "Zn" times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmls_za_zzw_4x4, fmls_za_zzw_4x4_16" symboldefcount="1">
      <symbol link="Zm4__2">&lt;Zm4&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the fourth scalable vector register of the second source multi-vector group, encoded as "Zm" times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.sme.mortlach_multi_array_2a.mortlach_multi2_zz_za_float_mm.fmls_za_zzw_2x2" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckStreamingSVEAndZAEnabled.0" file="shared_pseudocode.xml" hover="function: CheckStreamingSVEAndZAEnabled()">CheckStreamingSVEAndZAEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer elements = VL DIV esize;
constant integer vectors = VL DIV 8;
constant integer vstride = vectors DIV nreg;
constant bits(32) vbase = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[v, 32];
integer vec = (<a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(vbase) + offset) MOD vstride;
bits(VL) result;

for r = 0 to nreg-1
    constant bits(VL) op1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[n+r, VL];
    constant bits(VL) op2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m+r, VL];
    constant bits(VL) op3 = <a link="impl-aarch64.ZAvector.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) ZAvector[integer index, integer width]">ZAvector</a>[vec, VL];
    for e = 0 to elements-1
        constant bits(esize) elem1 = <a link="impl-shared.FPNeg.2" file="shared_pseudocode.xml" hover="function: bits(N) FPNeg(bits(N) op, FPCR_Type fpcr)">FPNeg</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[op1, e, esize], FPCR);
        constant bits(esize) elem2 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[op2, e, esize];
        constant bits(esize) elem3 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[op3, e, esize];
        <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, e, esize] = <a link="impl-shared.FPMulAdd_ZA.4" file="shared_pseudocode.xml" hover="function: bits(N) FPMulAdd_ZA(bits(N) addend, bits(N) op1, bits(N) op2, FPCR_Type fpcr_in)">FPMulAdd_ZA</a>(elem3, elem1, elem2, FPCR);
    <a link="impl-aarch64.ZAvector.write.2" file="shared_pseudocode.xml" hover="accessor: ZAvector[integer index, integer width] = bits(width) value">ZAvector</a>[vec, VL] = result;
    vec = vec + vstride;</pstext></ps>
  </ps_section>
</instructionsection>
